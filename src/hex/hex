#!/usr/bin/env bash

# Hex - GPU-Accelerated 2D Action RPG
# Build wrapper script that auto-compiles shaders and builds before running

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

# Function to print colored output
print_color() {
    echo -e "${2}${1}${NC}"
}

# Function to compile shaders
compile_shaders() {
    if [ -f "shaders/compile_shaders.sh" ]; then
        print_color "üé® Compiling shaders..." "$YELLOW"
        if bash shaders/compile_shaders.sh; then
            print_color "‚úÖ Shaders compiled successfully" "$GREEN"
        else
            print_color "‚ùå Shader compilation failed" "$RED"
            exit 1
        fi
    else
        print_color "‚ö†Ô∏è  No shader compilation script found, skipping..." "$YELLOW"
    fi
}

# Function to build the game
build_game() {
    print_color "üî® Building hex..." "$YELLOW"
    if zig build -Doptimize=ReleaseFast; then
        print_color "‚úÖ Build successful" "$GREEN"
    else
        print_color "‚ùå Build failed" "$RED"
        exit 1
    fi
}

# Function to run the game
run_game() {
    print_color "üéÆ Starting hex..." "$GREEN"
    exec ./zig-out/bin/hex "$@"
}

# Main execution flow
main() {
    # Check if zig is installed
    if ! command -v zig &> /dev/null; then
        print_color "‚ùå Error: zig is not installed or not in PATH" "$RED"
        print_color "Please install Zig 0.14.1 or newer" "$YELLOW"
        exit 1
    fi

    # Parse arguments
    if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
        echo "hex - GPU-Accelerated 2D Action RPG"
        echo ""
        echo "Usage: ./hex [options]"
        echo ""
        echo "Options:"
        echo "  --help, -h        Show this help message"
        echo "  --clean-shaders   Clean and rebuild all shaders"
        echo "  --skip-shaders    Skip shader compilation"
        echo "  --debug           Build with debug symbols"
        echo ""
        echo "Controls:"
        echo "  Mouse/WASD        Movement"
        echo "  Right Click       Fire projectile"
        echo "  Space            Pause"
        echo "  R                Respawn"
        echo "  ESC              Quit"
        exit 0
    fi

    # Handle special flags
    local skip_shaders=false
    local debug_build=false
    local clean_shaders=false
    local game_args=()

    for arg in "$@"; do
        case $arg in
            --skip-shaders)
                skip_shaders=true
                ;;
            --debug)
                debug_build=true
                ;;
            --clean-shaders)
                clean_shaders=true
                ;;
            *)
                game_args+=("$arg")
                ;;
        esac
    done

    # Clean shaders if requested
    if [ "$clean_shaders" = true ]; then
        print_color "üßπ Cleaning shaders..." "$YELLOW"
        if [ -f "shaders/compile_shaders.sh" ]; then
            bash shaders/compile_shaders.sh --clean
        fi
    fi

    # Compile shaders (unless skipped)
    if [ "$skip_shaders" = false ]; then
        compile_shaders
    fi

    # Build the game
    if [ "$debug_build" = true ]; then
        print_color "üî® Building hex (debug mode)..." "$YELLOW"
        if zig build -Doptimize=Debug; then
            print_color "‚úÖ Debug build successful" "$GREEN"
        else
            print_color "‚ùå Build failed" "$RED"
            exit 1
        fi
    else
        build_game
    fi

    # Run the game with any remaining arguments
    run_game "${game_args[@]}"
}

# Run main function with all arguments
main "$@"