{
  "spec": {
    "title": "Scalable Vector Graphics (SVG) 2",
    "url": "https://svgwg.org/svg2-draft/"
  },
  "algorithms": [
    {
      "html": "When a <a href=\"https://svgwg.org/svg2-draft/styling.html#TermPresentationAttribute\">presentation attribute</a>\ndefined using the CSS Value Definition Syntax is parsed, this is done as\nfollows:",
      "rationale": "let",
      "steps": [
        {
          "html": "Let <var>value</var> be the value of the attribute."
        },
        {
          "html": "Let <var>grammar</var> be the grammar given in the attribute definition\n  table's Value column."
        },
        {
          "html": "Replace all instances of <a href=\"https://www.w3.org/TR/css3-values/#lengths\">&lt;length&gt;</a> in <var>grammar</var> with\n  [<a href=\"https://www.w3.org/TR/css3-values/#lengths\">&lt;length&gt;</a> | <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a>]."
        },
        {
          "html": "Replace all instances of <a href=\"https://www.w3.org/TR/css-values/#typedef-length-percentage\">&lt;length-percentage&gt;</a> in <var>grammar</var> with\n    [<a href=\"https://www.w3.org/TR/css-values/#typedef-length-percentage\">&lt;length-percentage&gt;</a> | <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a>]."
        },
        {
          "html": "Replace all instances of <a href=\"https://www.w3.org/TR/css-values/#angles\">&lt;angle&gt;</a> in <var>grammar</var> with\n  [<a href=\"https://www.w3.org/TR/css-values/#angles\">&lt;angle&gt;</a> | <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a>]."
        },
        {
          "html": "Return the result of\n  <a href=\"http://dev.w3.org/csswg/css-syntax/#parse-grammar\">parsing\n  <var>value</var> with <var>grammar</var></a>."
        }
      ]
    },
    {
      "name": "synchronized",
      "href": "https://svgwg.org/svg2-draft/types.html#TermSynchronize",
      "html": "Whenever a reflected content attribute's base value changes,\nthen the reflecting object must be <dfn id=\"TermSynchronize\" data-dfn-type=\"dfn\" data-export=\"\">synchronized</dfn>,\nimmediately after the value changed, by running the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the reflecting object is a <a href=\"https://svgwg.org/svg2-draft/types.html#TermListInterface\">list interface</a> object,\n  then run the steps for <a href=\"https://svgwg.org/svg2-draft/types.html#TermSynchronizeList\">synchronizing\n  a list interface object</a>."
        },
        {
          "html": "Otherwise, update the object's value to be the base value of the reflected\n  content attribute (using the attribute's <a href=\"https://svgwg.org/svg2-draft/types.html#TermInitialValue\">initial value</a> if it is not\n  present or invalid)."
        }
      ]
    },
    {
      "name": "reserialized",
      "href": "https://svgwg.org/svg2-draft/types.html#TermReserialize",
      "html": "When a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> content attribute is to be\n<dfn id=\"TermReserialize\" data-dfn-type=\"dfn\" data-export=\"\">reserialized</dfn>, optionally using a\nspecific value, the following steps must be performed:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var> be the specific value given, or\n  the value of the content attribute's reflecting IDL attribute\n  if a specific value was not provided."
        },
        {
          "html": "Depending on <var>value</var>'s type:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "SVGAnimatedBoolean",
                  "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">Reserialize</a> the content attribute using\n      <var>value</var>'s baseVal member."
                },
                {
                  "case": "SVGAnimatedNumber",
                  "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">Reserialize</a> the content attribute using\n      <var>value</var>'s baseVal member."
                },
                {
                  "case": "SVGAnimatedLength",
                  "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">Reserialize</a> the content attribute using\n      <var>value</var>'s baseVal member."
                },
                {
                  "case": "SVGAnimatedAngle",
                  "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">Reserialize</a> the content attribute using\n      <var>value</var>'s baseVal member."
                },
                {
                  "case": "SVGAnimatedRect",
                  "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">Reserialize</a> the content attribute using\n      <var>value</var>'s baseVal member."
                },
                {
                  "case": "SVGAnimatedString",
                  "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">Reserialize</a> the content attribute using\n      <var>value</var>'s baseVal member."
                },
                {
                  "case": "SVGAnimatedNumberList",
                  "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">Reserialize</a> the content attribute using\n      <var>value</var>'s baseVal member."
                },
                {
                  "case": "SVGAnimatedLengthList",
                  "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">Reserialize</a> the content attribute using\n      <var>value</var>'s baseVal member."
                },
                {
                  "case": "SVGAnimatedTransformList",
                  "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">Reserialize</a> the content attribute using\n      <var>value</var>'s baseVal member."
                },
                {
                  "case": "SVGAnimatedEnumeration",
                  "html": "",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "Let <var>number</var> be the value of <var>value</var>'s\n          baseVal member."
                    },
                    {
                      "html": "Let <var>keyword</var> be the content attribute's keyword\n          value corresponding to <var>number</var>, or the empty string\n          if <var>number</var> is 0."
                    },
                    {
                      "html": "Set the content attribute to <var>keyword</var>."
                    }
                  ]
                },
                {
                  "case": "boolean",
                  "html": "Set the content attribute to \"true\" if <var>value</var> is true,\n      and \"false\" otherwise."
                },
                {
                  "case": "float",
                  "html": "Set the content attribute to an implementation specific string\n      that, if parsed as a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax,\n      would return the number value closest to <var>value</var>, given\n      the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                },
                {
                  "case": "double",
                  "html": "Set the content attribute to an implementation specific string\n      that, if parsed as a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax,\n      would return the number value closest to <var>value</var>, given\n      the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                },
                {
                  "case": "SVGLength",
                  "html": "Set the content attribute to the value that would be returned\n      from getting <var>value</var>'s <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__valueAsString\">valueAsString</a>\n      member."
                },
                {
                  "case": "SVGAngle",
                  "html": "Set the content attribute to the value that would be returned\n      from getting <var>value</var>'s <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAngle__valueAsString\">valueAsString</a>\n      member."
                },
                {
                  "case": "DOMRect",
                  "html": "",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "Let <var>components</var> be a list of four values, being the values of the\n          <a href=\"https://www.w3.org/TR/2014/WD-geometry-1-20140522/#dom-domrectreadonly-domrect-x\">x</a>,\n          <a href=\"https://www.w3.org/TR/2014/WD-geometry-1-20140522/#dom-domrectreadonly-domrect-y\">y</a>,\n          <a href=\"https://www.w3.org/TR/2014/WD-geometry-1-20140522/#dom-domrectreadonly-domrect-width\">width</a> and\n          <a href=\"https://www.w3.org/TR/2014/WD-geometry-1-20140522/#dom-domrectreadonly-domrect-height\">height</a>\n          members of <var>value</var>."
                    },
                    {
                      "html": "Let <var>serialized components</var> be a list of four strings,\n          where each is an implementation specific string that, if parsed\n          as a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return the number\n          value closest to the corresponding value in <var>components</var>, given\n          the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                    },
                    {
                      "html": "Set the content attribute to a string consisting of the strings in\n          <var>serialized components</var> joined and separated by single\n          U+0020 SPACE characters."
                    }
                  ]
                },
                {
                  "case": "DOMString",
                  "html": "Set the content attribute to <var>value</var>."
                },
                {
                  "case": "SVGNumberList",
                  "html": "",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "Let <var>elements</var> be the list of values in <var>value</var>."
                    },
                    {
                      "html": "Let <var>serialized elements</var> be a list of strings, where each\n          string is formed based on the corresponding value in <var>elements</var>\n          and its type:",
                      "rationale": ".switch",
                      "steps": [
                        {
                          "operation": "switch",
                          "steps": [
                            {
                              "case": "an SVGNumber object",
                              "html": "The string is an implementation specific string that, if parsed\n              as a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return the number\n              value closest to the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGNumber\">SVGNumber</a> object's\n              <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGNumber__value\">value</a> member, given\n              the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                            },
                            {
                              "case": "an SVGLength object",
                              "html": "The string is the value that would be returned\n              from getting the value's <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__valueAsString\">valueAsString</a>\n              member."
                            },
                            {
                              "case": "a DOMPoint object",
                              "html": "The string value is computed as follows:",
                              "rationale": "let",
                              "steps": [
                                {
                                  "html": "Let <var>string</var> be an empty string."
                                },
                                {
                                  "html": "Let <var>x</var> and <var>y</var> be the values of the\n                  <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a> object's x and y coordinates, respectively."
                                },
                                {
                                  "html": "Append to <var>string</var> an implementation specific string\n                  that, if parsed as <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return the number\n                  value closest to <var>x</var>, given\n                  the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                                },
                                {
                                  "html": "Append a single U+002C COMMA character to <var>string</var>."
                                },
                                {
                                  "html": "Append to <var>string</var> an implementation specific string\n                  that, if parsed as <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return the number\n                  value closest to <var>y</var>, given\n                  the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                                },
                                {
                                  "html": "The string is <var>string</var>."
                                }
                              ]
                            },
                            {
                              "case": "a SVGTransform object",
                              "html": "The string is the <a href=\"https://drafts.csswg.org/css-transforms-1/#serialization-of-transform-functions\">serialization</a>\n              of the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object's <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMatrixObject\">matrix object</a>."
                            },
                            {
                              "case": "a DOMString",
                              "html": "The string is the <b>DOMString</b>'s value itself."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "html": "Set the content attribute to a string consisting of the strings in\n          <var>serialized elements</var> joined and separated by single\n          U+0020 SPACE characters."
                    }
                  ]
                },
                {
                  "case": "SVGLengthList",
                  "html": "",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "Let <var>elements</var> be the list of values in <var>value</var>."
                    },
                    {
                      "html": "Let <var>serialized elements</var> be a list of strings, where each\n          string is formed based on the corresponding value in <var>elements</var>\n          and its type:",
                      "rationale": ".switch",
                      "steps": [
                        {
                          "operation": "switch",
                          "steps": [
                            {
                              "case": "an SVGNumber object",
                              "html": "The string is an implementation specific string that, if parsed\n              as a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return the number\n              value closest to the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGNumber\">SVGNumber</a> object's\n              <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGNumber__value\">value</a> member, given\n              the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                            },
                            {
                              "case": "an SVGLength object",
                              "html": "The string is the value that would be returned\n              from getting the value's <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__valueAsString\">valueAsString</a>\n              member."
                            },
                            {
                              "case": "a DOMPoint object",
                              "html": "The string value is computed as follows:",
                              "rationale": "let",
                              "steps": [
                                {
                                  "html": "Let <var>string</var> be an empty string."
                                },
                                {
                                  "html": "Let <var>x</var> and <var>y</var> be the values of the\n                  <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a> object's x and y coordinates, respectively."
                                },
                                {
                                  "html": "Append to <var>string</var> an implementation specific string\n                  that, if parsed as <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return the number\n                  value closest to <var>x</var>, given\n                  the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                                },
                                {
                                  "html": "Append a single U+002C COMMA character to <var>string</var>."
                                },
                                {
                                  "html": "Append to <var>string</var> an implementation specific string\n                  that, if parsed as <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return the number\n                  value closest to <var>y</var>, given\n                  the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                                },
                                {
                                  "html": "The string is <var>string</var>."
                                }
                              ]
                            },
                            {
                              "case": "a SVGTransform object",
                              "html": "The string is the <a href=\"https://drafts.csswg.org/css-transforms-1/#serialization-of-transform-functions\">serialization</a>\n              of the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object's <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMatrixObject\">matrix object</a>."
                            },
                            {
                              "case": "a DOMString",
                              "html": "The string is the <b>DOMString</b>'s value itself."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "html": "Set the content attribute to a string consisting of the strings in\n          <var>serialized elements</var> joined and separated by single\n          U+0020 SPACE characters."
                    }
                  ]
                },
                {
                  "case": "SVGPointList",
                  "html": "",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "Let <var>elements</var> be the list of values in <var>value</var>."
                    },
                    {
                      "html": "Let <var>serialized elements</var> be a list of strings, where each\n          string is formed based on the corresponding value in <var>elements</var>\n          and its type:",
                      "rationale": ".switch",
                      "steps": [
                        {
                          "operation": "switch",
                          "steps": [
                            {
                              "case": "an SVGNumber object",
                              "html": "The string is an implementation specific string that, if parsed\n              as a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return the number\n              value closest to the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGNumber\">SVGNumber</a> object's\n              <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGNumber__value\">value</a> member, given\n              the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                            },
                            {
                              "case": "an SVGLength object",
                              "html": "The string is the value that would be returned\n              from getting the value's <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__valueAsString\">valueAsString</a>\n              member."
                            },
                            {
                              "case": "a DOMPoint object",
                              "html": "The string value is computed as follows:",
                              "rationale": "let",
                              "steps": [
                                {
                                  "html": "Let <var>string</var> be an empty string."
                                },
                                {
                                  "html": "Let <var>x</var> and <var>y</var> be the values of the\n                  <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a> object's x and y coordinates, respectively."
                                },
                                {
                                  "html": "Append to <var>string</var> an implementation specific string\n                  that, if parsed as <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return the number\n                  value closest to <var>x</var>, given\n                  the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                                },
                                {
                                  "html": "Append a single U+002C COMMA character to <var>string</var>."
                                },
                                {
                                  "html": "Append to <var>string</var> an implementation specific string\n                  that, if parsed as <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return the number\n                  value closest to <var>y</var>, given\n                  the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                                },
                                {
                                  "html": "The string is <var>string</var>."
                                }
                              ]
                            },
                            {
                              "case": "a SVGTransform object",
                              "html": "The string is the <a href=\"https://drafts.csswg.org/css-transforms-1/#serialization-of-transform-functions\">serialization</a>\n              of the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object's <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMatrixObject\">matrix object</a>."
                            },
                            {
                              "case": "a DOMString",
                              "html": "The string is the <b>DOMString</b>'s value itself."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "html": "Set the content attribute to a string consisting of the strings in\n          <var>serialized elements</var> joined and separated by single\n          U+0020 SPACE characters."
                    }
                  ]
                },
                {
                  "case": "SVGTransformList",
                  "html": "",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "Let <var>elements</var> be the list of values in <var>value</var>."
                    },
                    {
                      "html": "Let <var>serialized elements</var> be a list of strings, where each\n          string is formed based on the corresponding value in <var>elements</var>\n          and its type:",
                      "rationale": ".switch",
                      "steps": [
                        {
                          "operation": "switch",
                          "steps": [
                            {
                              "case": "an SVGNumber object",
                              "html": "The string is an implementation specific string that, if parsed\n              as a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return the number\n              value closest to the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGNumber\">SVGNumber</a> object's\n              <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGNumber__value\">value</a> member, given\n              the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                            },
                            {
                              "case": "an SVGLength object",
                              "html": "The string is the value that would be returned\n              from getting the value's <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__valueAsString\">valueAsString</a>\n              member."
                            },
                            {
                              "case": "a DOMPoint object",
                              "html": "The string value is computed as follows:",
                              "rationale": "let",
                              "steps": [
                                {
                                  "html": "Let <var>string</var> be an empty string."
                                },
                                {
                                  "html": "Let <var>x</var> and <var>y</var> be the values of the\n                  <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a> object's x and y coordinates, respectively."
                                },
                                {
                                  "html": "Append to <var>string</var> an implementation specific string\n                  that, if parsed as <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return the number\n                  value closest to <var>x</var>, given\n                  the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                                },
                                {
                                  "html": "Append a single U+002C COMMA character to <var>string</var>."
                                },
                                {
                                  "html": "Append to <var>string</var> an implementation specific string\n                  that, if parsed as <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return the number\n                  value closest to <var>y</var>, given\n                  the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                                },
                                {
                                  "html": "The string is <var>string</var>."
                                }
                              ]
                            },
                            {
                              "case": "a SVGTransform object",
                              "html": "The string is the <a href=\"https://drafts.csswg.org/css-transforms-1/#serialization-of-transform-functions\">serialization</a>\n              of the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object's <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMatrixObject\">matrix object</a>."
                            },
                            {
                              "case": "a DOMString",
                              "html": "The string is the <b>DOMString</b>'s value itself."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "html": "Set the content attribute to a string consisting of the strings in\n          <var>serialized elements</var> joined and separated by single\n          U+0020 SPACE characters."
                    }
                  ]
                },
                {
                  "case": "SVGStringList",
                  "html": "",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "Let <var>elements</var> be the list of values in <var>value</var>."
                    },
                    {
                      "html": "Let <var>serialized elements</var> be a list of strings, where each\n          string is formed based on the corresponding value in <var>elements</var>\n          and its type:",
                      "rationale": ".switch",
                      "steps": [
                        {
                          "operation": "switch",
                          "steps": [
                            {
                              "case": "an SVGNumber object",
                              "html": "The string is an implementation specific string that, if parsed\n              as a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return the number\n              value closest to the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGNumber\">SVGNumber</a> object's\n              <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGNumber__value\">value</a> member, given\n              the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                            },
                            {
                              "case": "an SVGLength object",
                              "html": "The string is the value that would be returned\n              from getting the value's <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__valueAsString\">valueAsString</a>\n              member."
                            },
                            {
                              "case": "a DOMPoint object",
                              "html": "The string value is computed as follows:",
                              "rationale": "let",
                              "steps": [
                                {
                                  "html": "Let <var>string</var> be an empty string."
                                },
                                {
                                  "html": "Let <var>x</var> and <var>y</var> be the values of the\n                  <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a> object's x and y coordinates, respectively."
                                },
                                {
                                  "html": "Append to <var>string</var> an implementation specific string\n                  that, if parsed as <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return the number\n                  value closest to <var>x</var>, given\n                  the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                                },
                                {
                                  "html": "Append a single U+002C COMMA character to <var>string</var>."
                                },
                                {
                                  "html": "Append to <var>string</var> an implementation specific string\n                  that, if parsed as <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return the number\n                  value closest to <var>y</var>, given\n                  the implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
                                },
                                {
                                  "html": "The string is <var>string</var>."
                                }
                              ]
                            },
                            {
                              "case": "a SVGTransform object",
                              "html": "The string is the <a href=\"https://drafts.csswg.org/css-transforms-1/#serialization-of-transform-functions\">serialization</a>\n              of the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object's <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMatrixObject\">matrix object</a>."
                            },
                            {
                              "case": "a DOMString",
                              "html": "The string is the <b>DOMString</b>'s value itself."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "html": "Set the content attribute to a string consisting of the strings in\n          <var>serialized elements</var> joined and separated by single\n          U+0020 SPACE characters."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGGraphicsElement__getCTM\">getCTM</b> method is used to\nget the matrix that transforms the current element's coordinate system to\nits SVG viewport's coordinate system.  When getCTM() is called, the following\nsteps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the current element is not in the document, then return null."
        },
        {
          "html": "If the current element is a <a href=\"https://svgwg.org/svg2-draft/render.html#TermNonRenderedElement\">non-rendered element</a>, and the UA\n    is not able to resolve the style of the element, then return null."
        },
        {
          "html": "Let <var>ctm</var> be a matrix determined based on what the\n  current element is:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "the current element is the outermost svg element",
                  "html": "<var>ctm</var> is a matrix that transforms the coordinate\n      space of the <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> (including its <a class=\"property\" href=\"https://svgwg.org/svg2-draft/coords.html#TransformProperty\">transform</a> property)\n      to the coordinate space of the document's viewport.  The matrix includes the\n      transforms produced by the <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/coords.html#ViewBoxAttribute\"><span>viewBox</span></a>’</span> and <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/coords.html#PreserveAspectRatioAttribute\"><span>preserveAspectRatio</span></a>’</span>\n      attributes, the <a class=\"property\" href=\"https://svgwg.org/svg2-draft/coords.html#TransformProperty\">transform</a> property, and any transform\n      due to <a href=\"https://svgwg.org/svg2-draft/struct.html#__svg__SVGSVGElement__currentScale\">currentScale</a>\n      and <a href=\"https://svgwg.org/svg2-draft/struct.html#__svg__SVGSVGElement__currentTranslate\">currentTranslate</a>\n      properties on the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/struct.html#InterfaceSVGSVGElement\">SVGSVGElement</a>."
                },
                {
                  "case": "any other element",
                  "html": "<var>ctm</var> is a matrix that transforms the coordinate\n      space of the current element (including its <a class=\"property\" href=\"https://svgwg.org/svg2-draft/coords.html#TransformProperty\">transform</a>\n      property) to the coordinate space of its closest ancestor\n      viewport-establishing element (also including its <a class=\"property\" href=\"https://svgwg.org/svg2-draft/coords.html#TransformProperty\">transform</a>\n      property)."
                }
              ]
            }
          ]
        },
        {
          "html": "Return a newly created, <a href=\"https://svgwg.org/svg2-draft/coords.html#MatrixMode\">detached</a>\n  <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#DOMMatrix\">DOMMatrix</a> object that represents the same matrix as <var>ctm</var>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGGraphicsElement__getScreenCTM\">getScreenCTM</b> method\nis used to get the matrix that transforms the current element's coordinate\nsystem to the coordinate system of the SVG viewport for the SVG document fragment.\nWhen getScreenCTM() is called, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the current element is not in the document, then return null."
        },
        {
          "html": "If the current element is a <a href=\"https://svgwg.org/svg2-draft/render.html#TermNonRenderedElement\">non-rendered element</a>, and the UA\n    is not able to resolve the style of the element, then return null."
        },
        {
          "html": "Let <var>ctm</var> be a matrix that transforms the coordinate\n  space of the current element (including its <a class=\"property\" href=\"https://svgwg.org/svg2-draft/coords.html#TransformProperty\">transform</a> property)\n  to the coordinate space of the document's viewport."
        },
        {
          "html": "Return a newly created, <a href=\"https://svgwg.org/svg2-draft/coords.html#MatrixMode\">detached</a>\n  <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#DOMMatrix\">DOMMatrix</a> object that represents the same matrix as <var>ctm</var>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGGeometryElement__getPointAtLength\">getPointAtLength</b> method\nis used to return the point at a given distance along the path.  When\ngetPointAtLength(<var>distance</var>) is called, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If current element is a <a href=\"https://svgwg.org/svg2-draft/render.html#TermNonRenderedElement\">non-rendered element</a>, and the UA is not able to\n    compute the total length of the path, then throw an <a href=\"https://heycam.github.io/webidl/#invalidstateerror\">InvalidStateError</a>."
        },
        {
          "html": "Let <var>length</var> be the user agent's computed value for the total\n  length of the path, in user units."
        },
        {
          "html": "Clamp <var>distance</var> to [0, <var>length</var>]."
        },
        {
          "html": "Let (<var>x</var>, <var>y</var>) be the point on the path at distance\n  <var>distance</var>."
        },
        {
          "html": "Return a newly created, <a href=\"https://svgwg.org/svg2-draft/shapes.html#PointMode\">detached</a>\n  <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a> object representing the point\n  (<var>x</var>, <var>y</var>)."
        }
      ]
    },
    {
      "html": "On setting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGNumber__value\">value</a>, the following\nsteps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGNumber\">SVGNumber</a> is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyNumber\">read only</a>, then\n  <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGNumber\">SVGNumber</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#NumberValue\">value</a> to the\n  value being assigned to the <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGNumber__value\">value</a>\n  member."
        },
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGNumber\">SVGNumber</a> <a href=\"https://svgwg.org/svg2-draft/types.html#NumberMode\">reflects an element of the\n  base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute, then <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a>\n  the reflected attribute."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGLength__unitType\">unitType</b> IDL attribute represents\nthe type of value that the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#LengthValue\">value</a> is.\nOn getting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__unitType\">unitType</a>, the following steps\nare run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#LengthValue\">value</a> is a unitless\n  <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a>, a <a href=\"https://www.w3.org/TR/css3-values/#percentages\">&lt;percentage&gt;</a>, or a <a href=\"https://www.w3.org/TR/css3-values/#lengths\">&lt;length&gt;</a>\n  with an\n  <span class=\"prop-value\">em</span>,\n  <span class=\"prop-value\">ex</span>,\n  <span class=\"prop-value\">px</span>,\n  <span class=\"prop-value\">cm</span>,\n  <span class=\"prop-value\">mm</span>,\n  <span class=\"prop-value\">in</span>,\n  <span class=\"prop-value\">pt</span> or\n  <span class=\"prop-value\">pc</span> unit, then return the corresponding constant\n  value from the length unit type table above."
        },
        {
          "html": "Otherwise, return <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__SVG_LENGTHTYPE_UNKNOWN\">SVG_LENGTHTYPE_UNKNOWN</a>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGLength__value\">value</b> IDL attribute represents\nthe <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#LengthValue\">value</a> in user units.\nOn getting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__value\">value</a>, the following steps\nare run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var> be the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#LengthValue\">value</a>."
        },
        {
          "html": "If <var>value</var> is a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a>, return that number."
        },
        {
          "html": "Let <var>viewport size</var> be a basis to resolve percentages against, based on the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s\n  <a href=\"https://svgwg.org/svg2-draft/#LengthAssociatedElement\">associated element</a> and\n  <a href=\"https://svgwg.org/svg2-draft/#LengthAssociatedElement\">directionality</a>:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "has no associated element",
                  "html": "<var>size</var> is 100"
                },
                {
                  "case": "has an associated element and horizontal directionality",
                  "html": "<var>size</var> is the width of the <a href=\"https://svgwg.org/svg2-draft/types.html#LengthAssociatedElement\">associated element</a>'s SVG viewport"
                },
                {
                  "case": "has an associated element and vertical directionality",
                  "html": "<var>size</var> is the height of the <a href=\"https://svgwg.org/svg2-draft/types.html#LengthAssociatedElement\">associated element</a>'s SVG viewport"
                },
                {
                  "case": "has an associated element and unspecified directionality",
                  "html": "<var>size</var> is the length of the <a href=\"https://svgwg.org/svg2-draft/types.html#LengthAssociatedElement\">associated element</a>'s SVG viewport\n      diagonal (see <a href=\"https://svgwg.org/svg2-draft/coords.html#Units\">Units</a>)"
                }
              ]
            }
          ]
        },
        {
          "html": "Let <var>font size</var> be a basis to resolve font size values against,\n  based on the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/#LengthAssociatedElement\">associated element</a>:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "has no associated element",
                  "html": "<var>font size</var> is the absolute length of the initial value of the <a class=\"property\" href=\"https://www.w3.org/TR/css-fonts-3/#font-size-prop\">font-size</a> property"
                },
                {
                  "case": "has an associated element",
                  "html": "<var>size</var> is the computed value of the <a href=\"https://svgwg.org/svg2-draft/types.html#LengthAssociatedElement\">associated element</a>'s <a class=\"property\" href=\"https://www.w3.org/TR/css-fonts-3/#font-size-prop\">font-size</a> property"
                }
              ]
            }
          ]
        },
        {
          "html": "Return the result of converting <var>value</var> to an absolute length,\n  using <var>viewport size</var> and <var>font size</var> as percentage and font size\n  bases.  If the conversion is not possible due to the lack of an\n  <a href=\"https://svgwg.org/svg2-draft/types.html#LengthAssociatedElement\">associated element</a>, return 0."
        }
      ]
    },
    {
      "html": "On setting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__value\">value</a>, the following steps\nare run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a> object is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyLength\">read only</a>, then\n  <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "Let <var>value</var> be the value being assigned to\n  <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__value\">value</a>."
        },
        {
          "html": "Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#LengthValue\">value</a> to a\n  <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> whose value is <var>value</var>."
        },
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>\n  <a href=\"https://svgwg.org/svg2-draft/types.html#LengthMode\">reflects the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute,\n  <a href=\"https://svgwg.org/svg2-draft/types.html#LengthMode\">reflects a presentation attribute</a>, or\n  <a href=\"https://svgwg.org/svg2-draft/types.html#LengthMode\">reflects an element of the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute,\n  then <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the reflected attribute."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGLength__valueInSpecifiedUnits\">valueInSpecifiedUnits</b> IDL attribute represents\nthe numeric factor of the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#LengthValue\">value</a>.\nOn getting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__valueInSpecifiedUnits\">valueInSpecifiedUnits</a>, the following steps\nare run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var> be the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#LengthValue\">value</a>."
        },
        {
          "html": "If <var>value</var> is a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a>, return that number."
        },
        {
          "html": "Otherwise, if <var>value</var> is a <a href=\"https://www.w3.org/TR/css3-values/#percentages\">&lt;percentage&gt;</a> or any scalar <a href=\"https://www.w3.org/TR/css3-values/#lengths\">&lt;length&gt;</a>\n  value, return the numeric factor before its unit."
        },
        {
          "html": "Otherwise, return 0."
        }
      ]
    },
    {
      "html": "On setting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__valueInSpecifiedUnits\">valueInSpecifiedUnits</a>, the following steps\nare run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a> object is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyLength\">read only</a>, then\n  <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "Let <var>value</var> be the value being assigned to\n  <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__valueInSpecifiedUnits\">valueInSpecifiedUnits</a>."
        },
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#LengthValue\">value</a> is a\n  <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a>, then update its value to <var>value</var>."
        },
        {
          "html": "Otherwise, if the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#LengthValue\">value</a>\n  is a <a href=\"https://www.w3.org/TR/css3-values/#percentages\">&lt;percentage&gt;</a> or a scalar-valued <a href=\"https://www.w3.org/TR/css3-values/#lengths\">&lt;length&gt;</a>,\n  then update its numeric factor to <var>value</var>."
        },
        {
          "html": "Otherwise, the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#LengthValue\">value</a>\n  is of some other type.  Set it to a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a>\n  whose value is <var>value</var>."
        },
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>\n  <a href=\"https://svgwg.org/svg2-draft/types.html#LengthMode\">reflects the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute or\n  <a href=\"https://svgwg.org/svg2-draft/types.html#LengthMode\">reflects an element of the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute,\n  then <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the reflected attribute."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGLength__valueAsString\">valueAsString</b> IDL attribute represents\nthe <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#LengthValue\">value</a> as a string.\nOn getting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__valueAsString\">valueAsString</a>, the following steps\nare run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var> be the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#LengthValue\">value</a>."
        },
        {
          "html": "Let <var>string</var> be an empty string."
        },
        {
          "html": "If <var>value</var> is a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a>, <a href=\"https://www.w3.org/TR/css3-values/#percentages\">&lt;percentage&gt;</a>\n  or scalar <a href=\"https://www.w3.org/TR/css3-values/#lengths\">&lt;length&gt;</a> value, then:",
          "rationale": "let",
          "steps": [
            {
              "html": "Let <var>factor</var> be <var>value</var>'s numeric factor,\n      if it is a <a href=\"https://www.w3.org/TR/css3-values/#percentages\">&lt;percentage&gt;</a> or <a href=\"https://www.w3.org/TR/css3-values/#lengths\">&lt;length&gt;</a>,\n      or <var>value</var> itself it is a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a>."
            },
            {
              "html": "Append to <var>string</var> an implementation\n      specific string that, if parsed as a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax,\n      would return the number value closest to <var>factor</var>, given the\n      implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
            },
            {
              "html": "If <var>value</var> is a <a href=\"https://www.w3.org/TR/css3-values/#percentages\">&lt;percentage&gt;</a> then append to\n      <var>string</var> a single U+0025 PERCENT SIGN character."
            },
            {
              "html": "Otherwise, if <var>value</var> is a <a href=\"https://www.w3.org/TR/css3-values/#lengths\">&lt;length&gt;</a>,\n      then append to <var>string</var> the canonical spelling of\n      <var>value</var>'s unit."
            },
            {
              "html": "Return <var>string</var>."
            }
          ]
        },
        {
          "html": "Otherwise, return an implementation specific string that,\n  if parsed as a <a href=\"https://www.w3.org/TR/css3-values/#lengths\">&lt;length&gt;</a>, would return the closest\n  length value to <var>value</var>, given the\n  implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
        }
      ]
    },
    {
      "html": "On setting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__valueAsString\">valueAsString</a>, the following steps\nare run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a> object is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyLength\">read only</a>, then\n  <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "Let <var>value</var> be the value being assigned to\n  <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__valueAsString\">valueAsString</a>."
        },
        {
          "html": "Parse <var>value</var> using the CSS syntax\n  [ <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> | <a href=\"https://www.w3.org/TR/css3-values/#lengths\">&lt;length&gt;</a> | <a href=\"https://www.w3.org/TR/css3-values/#percentages\">&lt;percentage&gt;</a> ]."
        },
        {
          "html": "If parsing failed, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#syntaxerror\">SyntaxError</a>."
        },
        {
          "html": "Otherwise, parsing succeeded.  Set <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#LengthValue\">value</a>\n  to the parsed value."
        },
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>\n  <a href=\"https://svgwg.org/svg2-draft/types.html#LengthMode\">reflects the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute or\n  <a href=\"https://svgwg.org/svg2-draft/types.html#LengthMode\">reflects an element of the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute,\n  then <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the reflected attribute."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGLength__newValueSpecifiedUnits\">newValueSpecifiedUnits</b>\nmethod is used to set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s value in a typed manner.  When\nnewValueSpecifiedUnits(unitType, valueInSpecifiedUnits) is called, the following\nsteps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a> object is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyLength\">read only</a>, then\n  <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "If <var>unitType</var> is\n  <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__SVG_LENGTHTYPE_UNKNOWN\">SVG_LENGTHTYPE_UNKNOWN</a>\n  or is a value that does not appear in the length unit type table above,\n  then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#notsupportederror\">NotSupportedError</a>."
        },
        {
          "html": "Set <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/#LengthValue\">value</a> depending\n  on the value of <var>unitType</var>:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "SVG_LENGTHTYPE_NUMBER",
                  "html": "a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> whose value is <var>valueInSpecifiedUnits</var>"
                },
                {
                  "case": "SVG_LENGTHTYPE_PERCENTAGE",
                  "html": "a <a href=\"https://www.w3.org/TR/css3-values/#percentages\">&lt;percentage&gt;</a> whose numeric factor is <var>valueInSpecifiedUnits</var>"
                },
                {
                  "case": "anything else",
                  "html": "a <a href=\"https://www.w3.org/TR/css3-values/#lengths\">&lt;length&gt;</a> whose numeric factor is <var>valueInSpecifiedUnits</var>\n      and whose unit is as indicated by the length unit type table above"
                }
              ]
            }
          ]
        },
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>\n  <a href=\"https://svgwg.org/svg2-draft/types.html#LengthMode\">reflects the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute or\n  <a href=\"https://svgwg.org/svg2-draft/types.html#LengthMode\">reflects an element of the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute,\n  then <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the reflected attribute."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGLength__convertToSpecifiedUnits\">convertToSpecifiedUnits</b>\nmethod is used to convert the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s value to a specific type.\nWhen convertToSpecifiedUnits(unitType) is called, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a> object is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyLength\">read only</a>, then\n  <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "If <var>unitType</var> is\n  <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__SVG_LENGTHTYPE_UNKNOWN\">SVG_LENGTHTYPE_UNKNOWN</a>\n  or is a value that does not appear in the length unit type table above,\n  then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#notsupportederror\">NotSupportedError</a>."
        },
        {
          "html": "Let <var>absolute</var> be the value that would be returned from the\n  <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__value\">value</a> member."
        },
        {
          "html": "If <var>unitType</var> is <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__SVG_LENGTHTYPE_NUMBER\">SVG_LENGTHTYPE_NUMBER</a>, then:",
          "rationale": "set",
          "steps": [
            {
              "html": "Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#LengthValue\">value</a> to a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a>\n      whose value is <var>absolute</var>."
            }
          ]
        },
        {
          "html": "Otherwise, if <var>unitType</var> is <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__SVG_LENGTHTYPE_PERCENTAGE\">SVG_LENGTHTYPE_PERCENTAGE</a>, then:",
          "rationale": "let",
          "steps": [
            {
              "html": "Let <var>viewport size</var> be a basis to resolve percentages against, based on the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s\n      <a href=\"https://svgwg.org/svg2-draft/#LengthAssociatedElement\">associated element</a> and\n      <a href=\"https://svgwg.org/svg2-draft/#LengthAssociatedElement\">directionality</a>:",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "has no associated element",
                      "html": "<var>size</var> is 100"
                    },
                    {
                      "case": "has an associated element and horizontal directionality",
                      "html": "<var>size</var> is the width of the <a href=\"https://svgwg.org/svg2-draft/types.html#LengthAssociatedElement\">associated element</a>'s SVG viewport"
                    },
                    {
                      "case": "has an associated element and vertical directionality",
                      "html": "<var>size</var> is the height of the <a href=\"https://svgwg.org/svg2-draft/types.html#LengthAssociatedElement\">associated element</a>'s SVG viewport"
                    },
                    {
                      "case": "has an associated element and unspecified directionality",
                      "html": "<var>size</var> is the length of the <a href=\"https://svgwg.org/svg2-draft/types.html#LengthAssociatedElement\">associated element</a>'s SVG viewport\n          diagonal (see <a href=\"https://svgwg.org/svg2-draft/coords.html#Units\">Units</a>)"
                    }
                  ]
                }
              ]
            },
            {
              "html": "Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#LengthValue\">value</a> to the result of\n      converting <var>absolute</var> to a <a href=\"https://www.w3.org/TR/css3-values/#percentages\">&lt;percentage&gt;</a>, using <var>viewport size</var>\n      as the percentage basis."
            }
          ]
        },
        {
          "html": "Otherwise, if <var>unitType</var> is <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__SVG_LENGTHTYPE_EMS\">SVG_LENGTHTYPE_EMS</a>\n  or <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGLength__SVG_LENGTHTYPE_EXS\">SVG_LENGTHTYPE_EXS</a>, then:",
          "rationale": "let",
          "steps": [
            {
              "html": "Let <var>font size</var> be a basis to resolve font size values against,\n      based on the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/#LengthAssociatedElement\">associated element</a>:",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "has no associated element",
                      "html": "<var>font size</var> is the absolute length of the initial value of the <a class=\"property\" href=\"https://www.w3.org/TR/css-fonts-3/#font-size-prop\">font-size</a> property"
                    },
                    {
                      "case": "has an associated element",
                      "html": "<var>size</var> is the computed value of the <a href=\"https://svgwg.org/svg2-draft/types.html#LengthAssociatedElement\">associated element</a>'s <a class=\"property\" href=\"https://www.w3.org/TR/css-fonts-3/#font-size-prop\">font-size</a> property"
                    }
                  ]
                }
              ]
            },
            {
              "html": "Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#LengthValue\">value</a> to the result of\n      converting <var>absolute</var> to a <a href=\"https://www.w3.org/TR/css3-values/#lengths\">&lt;length&gt;</a> with an <span class=\"prop-value\">em</span>\n      or <span class=\"prop-value\">ex</span> unit (depending on <var>unitType</var>),\n      using <var>font size</var> as the <a class=\"property\" href=\"https://www.w3.org/TR/css-fonts-3/#font-size-prop\">font-size</a> basis."
            }
          ]
        },
        {
          "html": "Otherwise:",
          "rationale": "set",
          "steps": [
            {
              "html": "Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#LengthValue\">value</a> to the result of\n      converting <var>absolute</var> to a <a href=\"https://www.w3.org/TR/css3-values/#lengths\">&lt;length&gt;</a> with the unit\n      found by looking up <var>unitType</var> in the length unit type table above."
            }
          ]
        },
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>\n  <a href=\"https://svgwg.org/svg2-draft/types.html#LengthMode\">reflects the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute or\n  <a href=\"https://svgwg.org/svg2-draft/types.html#LengthMode\">reflects an element of the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute,\n  then <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the reflected attribute."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGAngle__unitType\">unitType</b> IDL attribute represents\nthe type of value that the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#AngleValue\">value</a> is.\nOn getting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAngle__unitType\">unitType</a>, the following steps\nare run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#AngleValue\">value</a> is a unitless\n  <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> or a <a href=\"https://www.w3.org/TR/css3-values/#lengths\">&lt;length&gt;</a> with a\n  <span class=\"prop-value\">deg</span>,\n  <span class=\"prop-value\">rad</span> or\n  <span class=\"prop-value\">grad</span> unit, then return the corresponding constant\n  value from the angle unit type table above."
        },
        {
          "html": "Otherwise, return <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAngle__SVG_ANGLETYPE_UNKNOWN\">SVG_ANGLETYPE_UNKNOWN</a>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGAngle__value\">value</b> IDL attribute represents\nthe <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#AngleValue\">value</a> in degrees.\nOn getting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAngle__value\">value</a>, the following steps\nare run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var> be the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#AngleValue\">value</a>."
        },
        {
          "html": "If <var>value</var> is a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a>, return that number."
        },
        {
          "html": "Return the result of converting <var>value</var> to an angle in degrees."
        }
      ]
    },
    {
      "html": "On setting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAngle__value\">value</a>, the following steps\nare run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a> object is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyAngle\">read only</a>, then\n  <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "Let <var>value</var> be the value being assigned to\n  <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAngle__value\">value</a>."
        },
        {
          "html": "Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#AngleValue\">value</a> to a\n  <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> whose value is <var>value</var>."
        },
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>\n  <a href=\"https://svgwg.org/svg2-draft/types.html#AngleMode\">reflects the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute,\n  then <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the reflected attribute."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGAngle__valueInSpecifiedUnits\">valueInSpecifiedUnits</b> IDL attribute represents\nthe numeric factor of the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#AngleValue\">value</a>.\nOn getting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAngle__valueInSpecifiedUnits\">valueInSpecifiedUnits</a>, the following steps\nare run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var> be the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#AngleValue\">value</a>."
        },
        {
          "html": "If <var>value</var> is a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a>, return that number."
        },
        {
          "html": "Otherwise, <var>value</var> is an <a href=\"https://www.w3.org/TR/css-values/#angles\">&lt;angle&gt;</a> value.  Return\n  the numeric factor before its unit."
        }
      ]
    },
    {
      "html": "On setting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAngle__valueInSpecifiedUnits\">valueInSpecifiedUnits</a>, the following steps\nare run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a> object is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyAngle\">read only</a>, then\n  <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "Let <var>value</var> be the value being assigned to\n  <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAngle__valueInSpecifiedUnits\">valueInSpecifiedUnits</a>."
        },
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#AngleValue\">value</a> is a\n  <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a>, then update its value to <var>value</var>."
        },
        {
          "html": "Otherwise, if the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#AngleValue\">value</a>\n  is an <a href=\"https://www.w3.org/TR/css-values/#angles\">&lt;angle&gt;</a>,\n  then update its numeric factor to <var>value</var>."
        },
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>\n  <a href=\"https://svgwg.org/svg2-draft/types.html#AngleMode\">reflects the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute or\n  <a href=\"https://svgwg.org/svg2-draft/types.html#AngleMode\">reflects an element of the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute,\n  then <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the reflected attribute."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGAngle__valueAsString\">valueAsString</b> IDL attribute represents\nthe <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#AngleValue\">value</a> as a string.\nOn getting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAngle__valueAsString\">valueAsString</a>, the following steps\nare run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var> be the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#AngleValue\">value</a>."
        },
        {
          "html": "Let <var>string</var> be an empty string."
        },
        {
          "html": "Let <var>factor</var> be <var>value</var>'s numeric factor,\n  if it is an <a href=\"https://www.w3.org/TR/css-values/#angles\">&lt;angle&gt;</a>,\n  or <var>value</var> itself it is a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a>."
        },
        {
          "html": "Append to <var>string</var> an implementation\n  specific string that, if parsed as a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax,\n  would return the number value closest to <var>factor</var>, given the\n  implementation's supported <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">real number precision</a>."
        },
        {
          "html": "If <var>value</var> is an <a href=\"https://www.w3.org/TR/css-values/#angles\">&lt;angle&gt;</a>,\n  then append to <var>string</var> the canonical spelling of\n  <var>value</var>'s unit."
        },
        {
          "html": "Return <var>string</var>."
        }
      ]
    },
    {
      "html": "On setting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAngle__valueAsString\">valueAsString</a>, the following steps\nare run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a> object is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyAngle\">read only</a>, then\n  <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "Let <var>value</var> be the value being assigned to\n  <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAngle__valueAsString\">valueAsString</a>."
        },
        {
          "html": "Parse <var>value</var> using the CSS syntax\n  [ <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> | <a href=\"https://www.w3.org/TR/css-values/#angles\">&lt;angle&gt;</a> ]."
        },
        {
          "html": "If parsing failed, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#syntaxerror\">SyntaxError</a>."
        },
        {
          "html": "Otherwise, parsing succeeded.  Set <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#AngleValue\">value</a>\n  to the parsed value."
        },
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>\n  <a href=\"https://svgwg.org/svg2-draft/types.html#AngleMode\">reflects the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute or\n  <a href=\"https://svgwg.org/svg2-draft/types.html#AngleMode\">reflects an element of the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute,\n  then <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the reflected attribute."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGAngle__newValueSpecifiedUnits\">newValueSpecifiedUnits</b>\nmethod is used to set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>'s value in a typed manner.  When\nnewValueSpecifiedUnits(unitType, valueInSpecifiedUnits) is called, the following\nsteps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a> object is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyAngle\">read only</a>, then\n  <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "If <var>unitType</var> is\n  <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAngle__SVG_ANGLETYPE_UNKNOWN\">SVG_ANGLETYPE_UNKNOWN</a>\n  or is a value that does not appear in the angle unit type table above,\n  then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#notsupportederror\">NotSupportedError</a>."
        },
        {
          "html": "Set <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>'s <a href=\"https://svgwg.org/svg2-draft/#AngleValue\">value</a> depending\n  on the value of <var>unitType</var>:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "SVG_ANGLETYPE_UNSPECIFIED",
                  "html": "a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> whose value is <var>valueInSpecifiedUnits</var>"
                },
                {
                  "case": "anything else",
                  "html": "an <a href=\"https://www.w3.org/TR/css-values/#angles\">&lt;angle&gt;</a> whose numeric factor is <var>valueInSpecifiedUnits</var>\n      and whose unit is as indicated by the angle unit type table above"
                }
              ]
            }
          ]
        },
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>\n  <a href=\"https://svgwg.org/svg2-draft/types.html#AngleMode\">reflects the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute or\n  <a href=\"https://svgwg.org/svg2-draft/types.html#AngleMode\">reflects an element of the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute,\n  then <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the reflected attribute."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGAngle__convertToSpecifiedUnits\">convertToSpecifiedUnits</b>\nmethod is used to convert the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>'s value to a specific type.\nWhen convertToSpecifiedUnits(unitType) is called, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a> object is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyAngle\">read only</a>, then\n  <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "If <var>unitType</var> is\n  <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAngle__SVG_ANGLETYPE_UNKNOWN\">SVG_ANGLETYPE_UNKNOWN</a>\n  or is a value that does not appear in the angle unit type table above,\n  then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#notsupportederror\">NotSupportedError</a>."
        },
        {
          "html": "Let <var>degrees</var> be the value that would be returned from the\n  <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAngle__value\">value</a> member."
        },
        {
          "html": "If <var>unitType</var> is <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAngle__SVG_ANGLETYPE_UNSPECIFIED\">SVG_ANGLETYPE_UNSPECIFIED</a>, then:",
          "rationale": "set",
          "steps": [
            {
              "html": "Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#AngleValue\">value</a> to a <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a>\n      whose value is <var>degrees</var>."
            }
          ]
        },
        {
          "html": "Otherwise:",
          "rationale": "set",
          "steps": [
            {
              "html": "Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>'s <a href=\"https://svgwg.org/svg2-draft/types.html#AngleValue\">value</a> to the result of\n      converting <var>degrees</var> to an <a href=\"https://www.w3.org/TR/css-values/#angles\">&lt;angle&gt;</a> with the unit\n      found by looking up <var>unitType</var> in the angle unit type table above."
            }
          ]
        },
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAngle\">SVGAngle</a>\n  <a href=\"https://svgwg.org/svg2-draft/types.html#AngleMode\">reflects the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute or\n  <a href=\"https://svgwg.org/svg2-draft/types.html#AngleMode\">reflects an element of the base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute,\n  then <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the reflected attribute."
        }
      ]
    },
    {
      "name": "synchronized",
      "href": "https://svgwg.org/svg2-draft/types.html#TermSynchronizeList",
      "html": "A <a href=\"https://svgwg.org/svg2-draft/types.html#TermListInterface\">list interface</a> object\nis <dfn id=\"TermSynchronizeList\" data-dfn-type=\"dfn\" data-export=\"\">synchronized</dfn> by running\nthe following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var> be the base value of the\n    reflected content attribute (using the attribute's <a href=\"https://svgwg.org/svg2-draft/types.html#TermInitialValue\">initial value</a>\n    if it is not present or invalid)."
        },
        {
          "html": "Let <var>length</var> be the number of items in the list."
        },
        {
          "html": "Let <var>new length</var> be the number of values in <var>value</var>.\n  If <var>value</var> is the keyword <span class=\"prop-value\">none</span>\n  (as supported by the <a class=\"property\" href=\"https://svgwg.org/svg2-draft/coords.html#TransformProperty\">transform</a> property), <var>new length</var>\n  is 0."
        },
        {
          "html": "If the list element type is <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGNumber\">SVGNumber</a>, <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a>, <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a> or <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a>, then:",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>length</var> &gt; <var>new length</var>, then:",
              "rationale": "set",
              "steps": [
                {
                  "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermDetach\">Detach</a> each object in the list at an index\n          greater than or equal to <var>new length</var>."
                },
                {
                  "html": "Truncate the list to length <var>new length</var>."
                },
                {
                  "html": "Set <var>length</var> to <var>new length</var>."
                }
              ]
            },
            {
              "html": "While <var>length</var> &lt; <var>new length</var>:",
              "rationale": "let",
              "steps": [
                {
                  "html": "Let <var>item</var> be a newly created\n          object of the list element type."
                },
                {
                  "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermAttach\">Attach</a> <var>item</var> to this <a href=\"https://svgwg.org/svg2-draft/types.html#TermListInterface\">list interface</a>\n          object."
                },
                {
                  "html": "Append <var>item</var> to the list."
                },
                {
                  "html": "Set <var>length</var> to <var>length</var> + 1."
                }
              ]
            },
            {
              "html": "Let <var>index</var> be 0."
            },
            {
              "html": "While <var>index</var> &lt; <var>length</var>:",
              "rationale": "let",
              "steps": [
                {
                  "html": "Let <var>item</var> be the object in the list at index\n          <var>index</var>."
                },
                {
                  "html": "Let <var>v</var> be the value in <var>value</var> at index\n          <var>index</var>."
                },
                {
                  "html": "Set <var>item</var>'s value to <var>v</var>."
                },
                {
                  "html": "If <var>item</var> is an <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object, then\n          set the components of its <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMatrixObject\">matrix object</a>\n          to match the new transform function value."
                },
                {
                  "html": "Set <var>index</var> to <var>index</var> + 1."
                }
              ]
            }
          ]
        },
        {
          "html": "Otherwise, the list element type is <b>DOMString</b>:",
          "rationale": "replace",
          "steps": [
            {
              "html": "Replace the list with a new list consisting\n      of the values in <var>value</var>."
            }
          ]
        }
      ]
    },
    {
      "name": "detached",
      "href": "https://svgwg.org/svg2-draft/types.html#TermDetach",
      "html": "Whenever a list element object is to be <dfn id=\"TermDetach\" data-dfn-type=\"dfn\" data-export=\"\">detached</dfn>,\nthe following steps are run, depending on the list element type:",
      "rationale": ".switch",
      "steps": [
        {
          "operation": "switch",
          "steps": [
            {
              "case": "SVGNumber",
              "html": "Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGNumber\">SVGNumber</a> to no longer be\n    <a href=\"https://svgwg.org/svg2-draft/types.html#NumberAssociatedElement\">associated</a> with any element.\n    If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGNumber\">SVGNumber</a> is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyNumber\">read only</a>,\n    set it to be no longer read only."
            },
            {
              "case": "SVGLength",
              "html": "Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a> to no longer be\n    <a href=\"https://svgwg.org/svg2-draft/types.html#LengthAssociatedElement\">associated</a> with any element.\n    If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a> is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyLength\">read only</a>,\n    set it to be no longer read only.  Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a> to have\n    unspecified <a href=\"https://svgwg.org/svg2-draft/types.html#LengthAssociatedElement\">directionality</a>."
            },
            {
              "case": "DOMPoint",
              "html": "Set the <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a> to no longer be\n    <a href=\"https://svgwg.org/svg2-draft/shapes.html#PointAssociatedElement\">associated</a> with any element.\n    If the <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a> is <a href=\"https://svgwg.org/svg2-draft/shapes.html#ReadOnlyPoint\">read only</a>,\n    set it to be no longer read only."
            },
            {
              "case": "SVGTransform",
              "html": "Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> to no longer be\n    <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformAssociatedElement\">associated</a> with any element.\n    If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> is <a href=\"https://svgwg.org/svg2-draft/coords.html#ReadOnlyTransform\">read only</a>,\n    set it to be no longer read only."
            },
            {
              "case": "DOMString",
              "html": "Nothing is done."
            }
          ]
        }
      ]
    },
    {
      "html": "",
      "rationale": ".switch",
      "steps": [
        {
          "operation": "switch",
          "steps": [
            {
              "case": "SVGNumber",
              "html": "<a href=\"https://svgwg.org/svg2-draft/#NumberAssociatedElement\">Associate</a> the\n    <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGNumber\">SVGNumber</a> with the element that the <a href=\"https://svgwg.org/svg2-draft/types.html#TermListInterface\">list interface</a>\n    object is associated with.  Additionally, depending on which IDL attribute\n    the <a href=\"https://svgwg.org/svg2-draft/types.html#TermListInterface\">list interface</a> object is reflected through:",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "baseVal",
                      "html": "Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGNumber\">SVGNumber</a> to <a href=\"https://svgwg.org/svg2-draft/types.html#NumberMode\">reflect an\n        element of the base value</a>."
                    },
                    {
                      "case": "animVal",
                      "html": "Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGNumber\">SVGNumber</a> to <a href=\"https://svgwg.org/svg2-draft/types.html#NumberMode\">reflect an\n        element of the base value</a>."
                    }
                  ]
                }
              ]
            },
            {
              "case": "SVGLength",
              "html": "<a href=\"https://svgwg.org/svg2-draft/#LengthAssociatedElement\">Associate</a> the\n    <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a> with the element that the <a href=\"https://svgwg.org/svg2-draft/types.html#TermListInterface\">list interface</a>\n    object is associated with and set its\n    <a href=\"https://svgwg.org/svg2-draft/#LengthAssociatedElement\">directionality</a> to that\n    specified by the attribute being reflected.\n    Additionally, depending on which IDL attribute the <a href=\"https://svgwg.org/svg2-draft/types.html#TermListInterface\">list interface</a>\n    object is reflected through:",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "baseVal",
                      "html": "Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a> to <a href=\"https://svgwg.org/svg2-draft/types.html#LengthMode\">reflect an\n        element of the base value</a>."
                    },
                    {
                      "case": "animVal",
                      "html": "Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a> to <a href=\"https://svgwg.org/svg2-draft/types.html#LengthMode\">reflect an\n        element of the base value</a>. Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGLength\">SVGLength</a> to be\n        <em>read only</em>."
                    }
                  ]
                }
              ]
            },
            {
              "case": "DOMPoint",
              "html": "<a href=\"https://svgwg.org/svg2-draft/shapes.html#PointAssociatedElement\">Associate</a> the\n    <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a> with the element that the <a href=\"https://svgwg.org/svg2-draft/types.html#TermListInterface\">list interface</a>\n    object is associated with.\n    Additionally, depending on which IDL attribute the <a href=\"https://svgwg.org/svg2-draft/types.html#TermListInterface\">list interface</a>\n    object is reflected through:",
              "rationale": ".switch",
              "steps": [
                {
                  "operation": "switch",
                  "steps": [
                    {
                      "case": "baseVal",
                      "html": "Set the <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a> to <a href=\"https://svgwg.org/svg2-draft/shapes.html#PointMode\">reflect an\n        element of the base value</a>."
                    },
                    {
                      "case": "animVal",
                      "html": "Set the <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a> to <a href=\"https://svgwg.org/svg2-draft/shapes.html#PointMode\">reflect an\n        element of the base value</a>."
                    }
                  ]
                }
              ]
            },
            {
              "case": "SVGTransform",
              "html": "<a href=\"https://svgwg.org/svg2-draft/coords.html#TransformAssociatedElement\">Associate</a> the\n    <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> with the element that the <a href=\"https://svgwg.org/svg2-draft/types.html#TermListInterface\">list interface</a>\n    object is associated with.\n    Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> to <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMode\">reflect an\n    element of a presentation attribute value</a>."
            },
            {
              "case": "DOMString",
              "html": "Nothing is done."
            }
          ]
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGNameList__clear\">clear</b> method is used to\nremove all items in the list.  When clear() is called, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the list is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyList\">read only</a>, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a\n  <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermDetach\">Detach</a> and then remove all elements in the list."
        },
        {
          "html": "If the list <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflects</a> an attribute, or represents the\n  base value of an object that <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflects</a> an attribute, then\n  <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the reflected attribute."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGNameList__initialize\">initialize</b> method\nis used to clear the list and add a single, specified value to it.\nWhen initialize(<var>newItem</var>) is called, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the list is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyList\">read only</a>, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a\n  <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermDetach\">Detach</a> and then remove all elements in the list."
        },
        {
          "html": "If <var>newItem</var> is an object type, and <var>newItem</var>\n  is not a detached object,  then set <var>newItem</var> to be\n  a newly created object of the same type as <var>newItem</var>\n  and which has the same (number or length) value."
        },
        {
          "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermAttach\">Attach</a> <var>newItem</var> to the <a href=\"https://svgwg.org/svg2-draft/types.html#TermListInterface\">list interface</a> object."
        },
        {
          "html": "Append <var>newItem</var> to this list."
        },
        {
          "html": "If the list <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflects</a> an attribute, or represents the\n  base value of an object that <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflects</a> an attribute, then\n  <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the reflected attribute."
        },
        {
          "html": "Return <var>newItem</var>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGNameList__getItem\">getItem</b> method is used\nto get an item from the list at the specified position.  When\ngetItem(<var>index</var>) is called, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>index</var> is greater than or equal to the length\n  of the list, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> an <a href=\"https://heycam.github.io/webidl/#indexsizeerror\">IndexSizeError</a>."
        },
        {
          "html": "Return the element in the list at position <var>index</var>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGNameList__insertItemBefore\">insertItemBefore</b>\nmethod is used to insert an element into the list at a specific position.\nWhen insertItemBefore(<var>newItem</var>, <var>index</var>) is called,\nthe following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the list is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyList\">read only</a>, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a\n  <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "If <var>newItem</var> is an object type, and <var>newItem</var>\n  is not a detached object,  then set <var>newItem</var> to be\n  a newly created object of the same type as <var>newItem</var>\n  and which has the same (number or length) value."
        },
        {
          "html": "If <var>index</var> is greater than the length of the list, then\n  set <var>index</var> to be the list length."
        },
        {
          "html": "Insert <var>newItem</var> into the list at index <var>index</var>."
        },
        {
          "html": "Attach <var>newItem</var> to the <a href=\"https://svgwg.org/svg2-draft/types.html#TermListInterface\">list interface</a> object."
        },
        {
          "html": "If the list <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflects</a> an attribute, or represents the\n  base value of an object that <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflects</a> an attribute, then\n  <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the reflected attribute."
        },
        {
          "html": "Return <var>newItem</var>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGNameList__replaceItem\">replaceItem</b> method\nis used to replace an existing item in the list with a new item.\nWhen replaceItem(<var>newItem</var>, <var>index</var>) is called, the\nfollowing steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the list is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyList\">read only</a>, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a\n  <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "If <var>index</var> is greater than or equal to the length of\n  the list, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> an <a href=\"https://heycam.github.io/webidl/#indexsizeerror\">IndexSizeError</a>."
        },
        {
          "html": "If <var>newItem</var> is an object type, and <var>newItem</var>\n  is not a detached object, then set <var>newItem</var> to be\n  a newly created object of the same type as <var>newItem</var>\n  and which has the same (number or length) value."
        },
        {
          "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermDetach\">Detach</a> the element in the list at index <var>index</var>."
        },
        {
          "html": "Replace the element in the list at index <var>index</var>\n  with <var>newItem</var>."
        },
        {
          "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermAttach\">Attach</a> <var>newItem</var> to the <a href=\"https://svgwg.org/svg2-draft/types.html#TermListInterface\">list interface</a> object."
        },
        {
          "html": "If the list <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflects</a> an attribute, or represents the\n  base value of an object that <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflects</a> an attribute, then\n  <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the reflected attribute."
        },
        {
          "html": "Return <var>newItem</var>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGNameList__removeItem\">removeItem</b> method\nis used to remove an item from the list.  When removeItem(<var>index</var>)\nis called, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the list is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyList\">read only</a>, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a\n  <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "If <var>index</var> is greater than or equal to the length of\n  the list, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> an <a href=\"https://heycam.github.io/webidl/#indexsizeerror\">IndexSizeError</a> with code."
        },
        {
          "html": "Let <var>item</var> be the list element at index <var>index</var>."
        },
        {
          "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermDetach\">Detach</a> <var>item</var>."
        },
        {
          "html": "Remove the list element at index <var>index</var>."
        },
        {
          "html": "Return <var>item</var>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGNameList__appendItem\">appendItem</b> method\nis used to append an item to the end of the list.  When appendItem(<var>newItem</var>)\nis called, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the list is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyList\">read only</a>, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a\n  <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "If <var>newItem</var> is an object type, and <var>newItem</var>\n  is not a detached object, then set <var>newItem</var> to be\n  a newly created object of the same type as <var>newItem</var>\n  and which has the same (number or length) value."
        },
        {
          "html": "Let <var>index</var> be the length of the list."
        },
        {
          "html": "Append <var>newItem</var> to the end of the list."
        },
        {
          "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermAttach\">Attach</a> <var>newItem</var> to the <a href=\"https://svgwg.org/svg2-draft/types.html#TermListInterface\">list interface</a> object."
        },
        {
          "html": "If the list <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflects</a> an attribute, or represents the\n  base value of an object that <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflects</a> an attribute, then\n  <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the reflected attribute."
        },
        {
          "html": "Return <var>newItem</var>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGAnimatedBoolean__baseVal\">baseVal</b> and\n<b id=\"__svg__SVGAnimatedBoolean__animVal\">animVal</b> IDL attributes\nboth represent the current non-animated value of the reflected attribute.\nOn getting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedBoolean__baseVal\">baseVal</a>\nor <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedBoolean__animVal\">animVal</a>,\nthe following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var> be the value of the reflected attribute,\n  or the empty string if it is not present."
        },
        {
          "html": "If <var>value</var> is not \"true\" or \"false\", then set <var>value</var>\n  to the reflected attribute's <a href=\"https://svgwg.org/svg2-draft/types.html#TermInitialValue\">initial value</a>."
        },
        {
          "html": "Return true if <var>value</var> is \"true\", and false otherwise."
        }
      ]
    },
    {
      "name": "numeric type value",
      "href": "https://svgwg.org/svg2-draft/types.html#TermNumericTypeValue",
      "html": "For <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAnimatedEnumeration\">SVGAnimatedEnumeration</a> objects that <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflect</a> an\nanimatable attribute that takes only a keyword value, the\n<b id=\"__svg__SVGAnimatedEnumeration__baseVal\">baseVal</b> and\n<b id=\"__svg__SVGAnimatedEnumeration__animVal\">animVal</b> IDL attributes\nrepresents the current non-animated value of the reflected attribute.\nFor <a href=\"https://svgwg.org/svg2-draft/painting.html#__svg__SVGMarkerElement__orientType\">orientType</a>,\nthey represent the type of the current non-animated value of the\nreflected <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/painting.html#OrientAttribute\"><span>orient</span></a>’</span> attribute.  On getting\n<a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedEnumeration__baseVal\">baseVal</a> or\n<a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedEnumeration__animVal\">animVal</a>, the\nfollowing steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var> be the value of the reflected attribute\n  (using the attribute's <a href=\"https://svgwg.org/svg2-draft/types.html#TermInitialValue\">initial value</a> if it is not present\n  or invalid)."
        },
        {
          "html": "Return the <dfn id=\"TermNumericTypeValue\" data-dfn-type=\"dfn\" data-export=\"\">numeric type value</dfn>\n  for <var>value</var>, according to the reflecting IDL attribute's\n  definition."
        }
      ]
    },
    {
      "html": "On setting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedEnumeration__baseVal\">baseVal</a>,\nthe following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var> be the value being assigned to\n  <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedEnumeration__baseVal\">baseVal</a>."
        },
        {
          "html": "If <var>value</var> is 0 or is not the <a href=\"https://svgwg.org/svg2-draft/types.html#TermNumericTypeValue\">numeric type value</a>\n  for any value of the reflected attribute, then throw a <a href=\"https://heycam.github.io/webidl/#exceptiondef-typeerror\">TypeError</a>."
        },
        {
          "html": "Otherwise, if the reflecting IDL attribute is\n  <a href=\"https://svgwg.org/svg2-draft/painting.html#__svg__SVGMarkerElement__orientType\">orientType</a>\n  and <var>value</var> is <a href=\"https://svgwg.org/svg2-draft/painting.html#__svg__SVGMarkerElement__SVG_MARKER_ORIENT_ANGLE\">SVG_MARKER_ORIENT_ANGLE</a>,\n  then set the reflected attribute to the string \"0\"."
        },
        {
          "html": "Otherwise, <var>value</var> is the <a href=\"https://svgwg.org/svg2-draft/types.html#TermNumericTypeValue\">numeric type value</a>\n  for a specific, single keyword value for the reflected attribute.\n  Set the reflected attribute to that value."
        }
      ]
    },
    {
      "html": "For <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAnimatedInteger\">SVGAnimatedInteger</a> objects that <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflect</a>\nan animatable attribute that takes a single integer value, the\n<b id=\"__svg__SVGAnimatedInteger__baseVal\">baseVal</b> and\n<b id=\"__svg__SVGAnimatedInteger__animVal\">animVal</b> IDL attributes\nrepresent the current non-animated value of the reflected attribute.\nFor those that reflect one integer of an attribute that takes an\ninteger followed by an optional second integer, they represent the\ncurrent non-animated value of one of the two integers.  On getting\n<a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedInteger__baseVal\">baseVal</a> or\n<a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedInteger__animVal\">animVal</a>, the\nfollowing steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var> be the value of the reflected attribute\n  (using the attribute's <a href=\"https://svgwg.org/svg2-draft/types.html#TermInitialValue\">initial value</a> if it is not present\n  or invalid)."
        },
        {
          "html": "If the reflected attribute is defined to take an integer\n  followed by an optional second integer, then:",
          "rationale": "if",
          "steps": [
            {
              "html": "If this <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAnimatedInteger\">SVGAnimatedInteger</a> object reflects the\n      first integer, then return the first value in <var>value</var>."
            },
            {
              "html": "Otherwise, this <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAnimatedInteger\">SVGAnimatedInteger</a> object reflects the\n      second integer.  Return the second value in <var>value</var> if it has been\n      explicitly specified, and if not, return the implicit value\n      as described in the definition of the attribute."
            }
          ]
        },
        {
          "html": "Otherwise, the reflected attribute is defined to take a single\n  integer value.  Return <var>value</var>."
        }
      ]
    },
    {
      "html": "On setting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedInteger__baseVal\">baseVal</a>,\nthe following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var> be the value being assigned to\n  <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedInteger__baseVal\">baseVal</a>."
        },
        {
          "html": "Let <var>new</var> be a list of integers."
        },
        {
          "html": "If the reflected attribute is defined to take an integer\n  followed by an optional second integer, then:",
          "rationale": "let",
          "steps": [
            {
              "html": "Let <var>current</var> be the value of the reflected attribute\n      (using the attribute's <a href=\"https://svgwg.org/svg2-draft/types.html#TermInitialValue\">initial value</a> if it is not present\n      or invalid)."
            },
            {
              "html": "Let <var>first</var> be the first integer in <var>current</var>."
            },
            {
              "html": "Let <var>second</var> be the second integer in <var>current</var>\n      if it has been explicitly specified, and if not, the implicit value\n      as described in the definition of the attribute."
            },
            {
              "html": "If this <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAnimatedInteger\">SVGAnimatedInteger</a> object reflects the\n      first integer, then set <var>first</var> to <var>value</var>.\n      Otherwise, set <var>second</var> to <var>value</var>."
            },
            {
              "html": "Append <var>first</var> to <var>new</var>."
            },
            {
              "html": "Append <var>second</var> to <var>new</var>."
            }
          ]
        },
        {
          "html": "Otherwise, the reflected attribute is defined to take a single\n  integer value.  Append <var>value</var> to <var>new</var>."
        },
        {
          "html": "Set the content attribute to a string consisting of each integer\n  in <var>new</var> serialized to an implementation specific string that,\n  if parsed as an <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return that\n  integer, joined and separated by a single U+0020 SPACE character."
        }
      ]
    },
    {
      "html": "For <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAnimatedNumber\">SVGAnimatedNumber</a> objects that <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflect</a>\nan animatable attribute that takes a single number value, the\n<b id=\"__svg__SVGAnimatedNumber__baseVal\">baseVal</b> and\n<b id=\"__svg__SVGAnimatedNumber__animVal\">animVal</b> IDL attributes\nrepresent the current non-animated value of the reflected attribute.\nFor those that reflect one number of an attribute that takes a\nnumber followed by an optional second number, they represent the\ncurrent non-animated value of one of the two numbers.  On getting\n<a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedNumber__baseVal\">baseVal</a> or\n<a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedNumber__animVal\">animVal</a>, the\nfollowing steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var> be the value of the reflected attribute\n  (using the attribute's <a href=\"https://svgwg.org/svg2-draft/types.html#TermInitialValue\">initial value</a> if it is not present\n  or invalid)."
        },
        {
          "html": "If the reflected attribute is defined to take an number\n  followed by an optional second number, then:",
          "rationale": "if",
          "steps": [
            {
              "html": "If this <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAnimatedNumber\">SVGAnimatedNumber</a> object reflects the\n      first number, then return the first value in <var>value</var>."
            },
            {
              "html": "Otherwise, this <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAnimatedNumber\">SVGAnimatedNumber</a> object reflects the\n      second number.  Return the second value in <var>value</var> if it has been\n      explicitly specified, and if not, return the implicit value\n      as described in the definition of the attribute."
            }
          ]
        },
        {
          "html": "Otherwise, the reflected attribute is defined to take a single\n  number value.  Return <var>value</var>."
        }
      ]
    },
    {
      "html": "On setting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedNumber__baseVal\">baseVal</a>,\nthe following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var> be the value being assigned to\n  <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedNumber__baseVal\">baseVal</a>."
        },
        {
          "html": "Let <var>new</var> be a list of numbers."
        },
        {
          "html": "If the reflected attribute is defined to take an number\n  followed by an optional second number, then:",
          "rationale": "let",
          "steps": [
            {
              "html": "Let <var>current</var> be the value of the reflected attribute\n      (using the attribute's <a href=\"https://svgwg.org/svg2-draft/types.html#TermInitialValue\">initial value</a> if it is not present\n      or invalid)."
            },
            {
              "html": "Let <var>first</var> be the first number in <var>current</var>."
            },
            {
              "html": "Let <var>second</var> be the second number in <var>current</var>\n      if it has been explicitly specified, and if not, the implicit value\n      as described in the definition of the attribute."
            },
            {
              "html": "If this <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAnimatedNumber\">SVGAnimatedNumber</a> object reflects the\n      first number, then set <var>first</var> to <var>value</var>.\n      Otherwise, set <var>second</var> to <var>value</var>."
            },
            {
              "html": "Append <var>first</var> to <var>new</var>."
            },
            {
              "html": "Append <var>second</var> to <var>new</var>."
            }
          ]
        },
        {
          "html": "Otherwise, the reflected attribute is defined to take a single\n  number value.  Append <var>value</var> to <var>new</var>."
        },
        {
          "html": "Set the content attribute to a string consisting of each number\n  in <var>new</var> serialized to an implementation specific string that,\n  if parsed as an <a href=\"https://www.w3.org/TR/css3-values/#numbers\">&lt;number&gt;</a> using CSS syntax, would return the\n  value closest to the number (given the implementation's supported\n  <a href=\"https://svgwg.org/svg2-draft/types.html#Precision\">Precision</a>real number precision),\n  joined and separated by a single U+0020 SPACE character."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGAnimatedString__baseVal\">baseVal</b>\nand <b id=\"__svg__SVGAnimatedString__animVal\">animVal</b> IDL attributes\nrepresent the current non-animated value of the reflected attribute.\nOn getting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedString__baseVal\">baseVal</a>\nor <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedString__animVal\">animVal</a>,\nthe following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the reflected attribute is not present, then:",
          "rationale": "if",
          "steps": [
            {
              "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAnimatedString\">SVGAnimatedString</a> object is defined to additionally\n      reflect a second, deprecated attribute, and that attribute is present,\n      then return its value."
            },
            {
              "html": "Otherwise, if the reflected attribute has an <a href=\"https://svgwg.org/svg2-draft/types.html#TermInitialValue\">initial value</a>,\n      then return it."
            },
            {
              "html": "Otherwise, return the empty string."
            }
          ]
        },
        {
          "html": "Otherwise, the reflected attribute is present.  Return its value."
        }
      ]
    },
    {
      "html": "On setting <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedString__baseVal\">baseVal</a>,\nthe following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the reflected attribute is not present,\n  the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/types.html#InterfaceSVGAnimatedString\">SVGAnimatedString</a> object is defined to additionally reflect\n  a second, deprecated attribute, and that deprecated attribute is present,\n  then set that deprecated attribute to the specified value."
        },
        {
          "html": "Otherwise, set the reflected attribute to the specified value."
        }
      ]
    },
    {
      "html": "Upon creation of the <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedRect__baseVal\">baseVal</a>\nor <a href=\"https://svgwg.org/svg2-draft/types.html#__svg__SVGAnimatedRect__animVal\">animVal</a>\n<a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#DOMRect\">DOMRect</a> objects, and afterwards whenever the reflected content attribute\nis added, removed, or changed, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var> be the value of the reflected attribute\n  (using the attribute's <a href=\"https://svgwg.org/svg2-draft/types.html#TermInitialValue\">initial value</a> if it is not present\n  or invalid)."
        },
        {
          "html": "Let <var>x</var>, <var>y</var>, <var>width</var> and <var>height</var>\n  be those corresponding components of <var>value</var>."
        },
        {
          "html": "Set the <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#DOMRect\">DOMRect</a> object's\n  <a href=\"https://www.w3.org/TR/2014/WD-geometry-1-20140522/#x-coordinate\">x coordinate</a>,\n  <a href=\"https://www.w3.org/TR/2014/WD-geometry-1-20140522/#y-coordinate\">y coordinate</a>,\n  <a href=\"https://www.w3.org/TR/2014/WD-geometry-1-20140522/#width\">width</a> and\n  <a href=\"https://www.w3.org/TR/2014/WD-geometry-1-20140522/#height\">height</a>\n  to <var>x</var>, <var>y</var>, <var>width</var> and <var>height</var>,\n  respectively."
        }
      ]
    },
    {
      "html": "On getting <a href=\"https://svgwg.org/svg2-draft/struct.html#__svg__SVGSVGElement__currentScale\">currentScale</a>,\nthe following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the current <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> element is not the <a href=\"https://svgwg.org/svg2-draft/struct.html#TermOutermostSVGElement\">outermost svg element</a>,\n  then return 1."
        },
        {
          "html": "Let [<var>a</var> <var>b</var> <var>c</var> <var>d</var> <var>e</var> <var>f</var>]\n  be the 2x3 matrix that represents the document's magnification and panning\n  transform."
        },
        {
          "html": "Return <var>a</var>."
        }
      ]
    },
    {
      "html": "On setting <a href=\"https://svgwg.org/svg2-draft/struct.html#__svg__SVGSVGElement__currentScale\">currentScale</a>,\nthe following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the current <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> element is not the <a href=\"https://svgwg.org/svg2-draft/struct.html#TermOutermostSVGElement\">outermost svg element</a>,\n  then return."
        },
        {
          "html": "Let <var>scale</var> be the value being assigned to\n  <a href=\"https://svgwg.org/svg2-draft/struct.html#__svg__SVGSVGElement__currentScale\">currentScale</a>."
        },
        {
          "html": "Let [<var>a</var> <var>b</var> <var>c</var> <var>d</var> <var>e</var> <var>f</var>]\n  be the 2x3 matrix that represents the document's magnification and panning\n  transform."
        },
        {
          "html": "Set the document's magnification and panning transform to\n  [<var>scale</var> 0 0 <var>scale</var> <var>e</var> <var>f</var>]."
        }
      ]
    },
    {
      "html": "Whenever the document's magnification and panning transform changes\nin response to user interaction or whenever the <a href=\"https://svgwg.org/svg2-draft/struct.html#TermOutermostSVGElement\">outermost svg element</a>\nchanges, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let [<var>a</var> <var>b</var> <var>c</var> <var>d</var> <var>e</var> <var>f</var>]\n  be the 2x3 matrix that represents the document's magnification and panning\n  transform."
        },
        {
          "html": "Let <var>element</var> be the <a href=\"https://svgwg.org/svg2-draft/struct.html#TermOutermostSVGElement\">outermost svg element</a>."
        },
        {
          "html": "Update the x and y components of <var>element</var>'s\n  <a href=\"https://svgwg.org/svg2-draft/struct.html#CurrentTranslatePointObject\">current translate point object</a>\n  to <var>e</var> and <var>f</var>, respectively."
        }
      ]
    },
    {
      "name": "find the intersecting or enclosed descendants",
      "href": "https://svgwg.org/svg2-draft/struct.html#TermFindIntersectingOrEnclosedDescendants",
      "html": "To <dfn id=\"TermFindIntersectingOrEnclosedDescendants\" data-dfn-type=\"dfn\" data-export=\"\">find the intersecting\nor enclosed descendants</dfn> of a given element <var>element</var>\nwith a given rectangle <var>rectangle</var> using <var>ancestor</var>\nas the element in whose coordinate space <var>rectangle</var> is\nto be interpreted, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>result</var> be an initially empty list."
        },
        {
          "html": "If <var>element</var> is not displayed, due to having a <a class=\"property\" href=\"https://svgwg.org/svg2-draft/render.html#VisibilityControl\">display</a> value\n  of <span class=\"prop-value\">none</span> or being in a subtree that has\n  failing <a href=\"https://svgwg.org/svg2-draft/struct.html#TermConditionalProcessingAttribute\">conditional processing attributes</a> or a failing branch\n  of a <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SwitchElement\"><span>switch</span></a>’</span>, then return <var>result</var>."
        },
        {
          "html": "For each child element <var>child</var> of <var>element</var>, in document order:",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>child</var> is an <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> or <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#GElement\"><span>g</span></a>’</span> element, then:",
              "rationale": "let",
              "steps": [
                {
                  "html": "Let <var>descendants</var> be the result of\n          <a href=\"https://svgwg.org/svg2-draft/struct.html#TermFindIntersectingOrEnclosedDescendants\">finding the\n          intersecting (or enclosed) descendants</a> of <var>child</var> with\n          <var>rectangle</var> in <var>ancestor</var>'s coordinate space."
                },
                {
                  "html": "Append to <var>result</var> all the elements of <var>descendants</var>."
                }
              ]
            },
            {
              "html": "Otherwise, if <var>child</var> is a <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#UseElement\"><span>use</span></a>’</span> element, then:",
              "rationale": "let",
              "steps": [
                {
                  "html": "Let <var>root</var> be the root of the <var>child</var>'s shadow tree."
                },
                {
                  "html": "Let <var>descendants</var> be the result of\n          <a href=\"https://svgwg.org/svg2-draft/struct.html#TermFindIntersectingOrEnclosedDescendants\">finding the\n          intersecting (or enclosed) descendants</a> of <var>root</var> with\n          <var>rectangle</var> in <var>ancestor</var>'s coordinate space."
                },
                {
                  "html": "If <var>descendants</var> is not empty, then append <var>child</var>\n          to <var>result</var>."
                }
              ]
            },
            {
              "html": "Otherwise, if <var>child</var> is a <a href=\"https://svgwg.org/svg2-draft/struct.html#TermGraphicsElement\">graphics element</a>, then:",
              "rationale": "let",
              "steps": [
                {
                  "html": "Let <var>region</var> be the shape in <var>child</var>'s coordinate\n          system that is sensitive to hit detection, taking into account the\n          rules for interpreting <var>child</var>'s <a class=\"property\" href=\"https://svgwg.org/svg2-draft/interact.html#PointerEventsProperty\">pointer-events</a> value."
                },
                {
                  "html": "Transform <var>region</var> into <var>ancestor</var>'s coordinate system."
                },
                {
                  "html": "If we are finding intersecting descendants and <var>region</var> lies partially\n          or fully within <var>rectangle</var>, then append <var>child</var> to <var>result</var>."
                },
                {
                  "html": "Otherwise, we are finding enclosed descendants.  If <var>region</var> lies\n          fully within <var>rectangle</var>, then append <var>child</var> to <var>result</var>."
                }
              ]
            }
          ]
        },
        {
          "html": "Return <var>result</var>."
        }
      ]
    },
    {
      "name": "find the non-container graphics elements",
      "href": "https://svgwg.org/svg2-draft/struct.html#TermFindNonContainerGraphicsElements",
      "html": "To <dfn id=\"TermFindNonContainerGraphicsElements\" data-dfn-type=\"dfn\" data-export=\"\">find the non-container\ngraphics elements</dfn> within a given element <var>element</var>, the following\nsteps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>result</var> be an initially empty list."
        },
        {
          "html": "If <var>element</var> is an <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> or <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#GElement\"><span>g</span></a>’</span> element,\n  then for each child element <var>child</var> of <var>element</var>,\n  in document order:",
          "rationale": "let",
          "steps": [
            {
              "html": "Let <var>descendants</var> be the result of\n      <a href=\"https://svgwg.org/svg2-draft/struct.html#TermFindNonContainerGraphicsElements\">finding the non-container\n      graphics elements</a> within <var>child</var>."
            },
            {
              "html": "Append to <var>result</var> all the elements of <var>descendants</var>."
            }
          ]
        },
        {
          "html": "Otherwise, if <var>element</var> is a <a href=\"https://svgwg.org/svg2-draft/struct.html#TermGraphicsElement\">graphics element</a> then\n  append <var>element</var> to <var>result</var>."
        },
        {
          "html": "Return <var>result</var>."
        }
      ]
    },
    {
      "html": "When getIntersectionList(<var>rect</var>, <var>referenceElement</var>) or\ngetEnclosureList(<var>rect</var>, <var>referenceElement</var>) is called,\nthe following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>descendants</var> be a list, depending on what method we are in:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "getIntersectionList",
                  "html": "<var>descendants</var> is the result of\n      <a href=\"https://svgwg.org/svg2-draft/struct.html#TermFindIntersectingOrEnclosedDescendants\">finding the intersecting descendants</a>\n      of the current <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> element with rectangle <var>rect</var>\n      in the current <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> element's coordinate system."
                },
                {
                  "case": "getEnclosureList",
                  "html": "<var>descendants</var> is the result of\n      <a href=\"https://svgwg.org/svg2-draft/struct.html#TermFindIntersectingOrEnclosedDescendants\">finding the enclosed descendants</a>\n      of the current <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> element with rectangle <var>rect</var>\n      in the current <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> element's coordinate system."
                }
              ]
            }
          ]
        },
        {
          "html": "If <var>referenceElement</var> is not null, then remove from\n  <var>descendants</var> any element that does not have <var>referenceElement</var>\n  as an ancestor."
        },
        {
          "html": "Return a <a href=\"https://www.w3.org/TR/dom/#concept-collection-static\">static</a>\n  <a class=\"idlinterface\" href=\"https://dom.spec.whatwg.org/#interface-nodelist\">NodeList</a> that contains all of the elements in <var>descendants</var>.\n  ([<a href=\"https://svgwg.org/svg2-draft/refs.html#ref-dom\">DOM</a>], section 5.2.7)"
        }
      ]
    },
    {
      "html": "When checkIntersection(<var>element</var>, <var>rect</var>) or\ncheckEnclosure(<var>element</var>, <var>rect</var>) is called,\nthe following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>descendants</var> be a list, depending on what method we are in:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "getIntersectionList",
                  "html": "<var>descendants</var> is the result of\n      <a href=\"https://svgwg.org/svg2-draft/struct.html#TermFindIntersectingOrEnclosedDescendants\">finding the intersecting descendants</a>\n      of the current <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> element with rectangle <var>rect</var>\n      in the current <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> element's coordinate system."
                },
                {
                  "case": "getEnclosureList",
                  "html": "<var>descendants</var> is the result of\n      <a href=\"https://svgwg.org/svg2-draft/struct.html#TermFindIntersectingOrEnclosedDescendants\">finding the enclosed descendants</a>\n      of the current <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> element with rectangle <var>rect</var>\n      in the current <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> element's coordinate system."
                }
              ]
            }
          ]
        },
        {
          "html": "Let <var>elements</var> be the result of\n  <a href=\"https://svgwg.org/svg2-draft/struct.html#TermFindNonContainerGraphicsElements\">finding the non-container\n  graphics elements</a> within <var>element</var>."
        },
        {
          "html": "If <var>elements</var> is empty, then return false."
        },
        {
          "html": "If any element in <var>elements</var> is not also in <var>descendants</var>,\n  then return false."
        },
        {
          "html": "Return true."
        }
      ]
    },
    {
      "html": "This process converts the min-x, min-y, width and height values of a viewBox attribute,\nthe position and size of the element on which the viewBox attribute is defined,\nand the value of the preserveAspectRatio attribute on that element into a translation and\na scale that is applied to content contained by the element.",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>vb-x</var>, <var>vb-y</var>, <var>vb-width</var>, <var>vb-height</var> be\n  the min-x, min-y, width and height values of the viewBox attribute respectively."
        },
        {
          "html": "Let <var>e-x</var>, <var>e-y</var>, <var>e-width</var>, <var>e-height</var> be\n  the position and size of the element respectively."
        },
        {
          "html": "Let <var>align</var> be the align value of preserveAspectRatio, or 'xMidYMid' if\n  preserveAspectRatio is not defined."
        },
        {
          "html": "Let <var>meetOrSlice</var> be the meetOrSlice value of preserveAspectRatio, or 'meet'\n  if preserveAspectRatio is not defined or if meetOrSlice is missing from this value."
        },
        {
          "html": "Initialize <var>scale-x</var> to <var>e-width</var>/<var>vb-width</var>."
        },
        {
          "html": "Initialize <var>scale-y</var> to <var>e-height</var>/<var>vb-height</var>."
        },
        {
          "html": "If <var>align</var> is not 'none' and <var>meetOrSlice</var> is 'meet', set\n  the larger of <var>scale-x</var> and <var>scale-y</var> to the smaller."
        },
        {
          "html": "Otherwise, if <var>align</var> is not 'none' and <var>meetOrSlice</var> is 'slice',\n  set the smaller of <var>scale-x</var> and <var>scale-y</var> to the larger."
        },
        {
          "html": "Initialize <var>translate-x</var> to <var>e-x</var> - (<var>vb-x</var> * scale-x)."
        },
        {
          "html": "Initialize <var>translate-y</var> to <var>e-y</var> - (<var>vb-y</var> * scale-y)"
        },
        {
          "html": "If <var>align</var> contains 'xMid', add\n  (<var>e-width</var> - <var>vb-width</var> * <var>scale-x</var>) / 2 to <var>translate-x</var>."
        },
        {
          "html": "If <var>align</var> contains 'xMax', add\n  (<var>e-width</var> - <var>vb-width</var> * <var>scale-x</var>) to <var>translate-x</var>."
        },
        {
          "html": "If <var>align</var> contains 'yMid', add\n  (<var>e-height</var> - <var>vb-height</var> * <var>scale-y</var>) / 2 to <var>translate-y</var>."
        },
        {
          "html": "If <var>align</var> contains 'yMax', add\n  (<var>e-height</var> - <var>vb-height</var> * <var>scale-y</var>) to <var>translate-y.</var>"
        }
      ]
    },
    {
      "html": "The algorithm to compute the bounding box is as follows, depending on the type of <var>element</var>:",
      "rationale": ".switch",
      "steps": [
        {
          "operation": "switch",
          "steps": [
            {
              "case": "a shape",
              "html": "",
              "rationale": ".algorithm",
              "steps": [
                {
                  "html": "Let <var>box</var> be a rectangle initialized to (0, 0, 0, 0)."
                },
                {
                  "html": "Let <var>fill-shape</var> be the <a href=\"https://svgwg.org/svg2-draft/paths.html#TermEquivalentPath\">equivalent path</a> of <var>element</var>\n      if it is a <a href=\"https://svgwg.org/svg2-draft/shapes.html#TermShapeElement\">shape</a>, or a shape that includes each of the glyph cells corresponding\n      to the text within the elements otherwise."
                },
                {
                  "html": "If <var>fill</var> is true, then set <var>box</var> to the tightest rectangle\n      in the coordinate system <var>space</var> that contains <var>fill-shape</var>."
                },
                {
                  "html": "If <var>stroke</var> is true and the element's <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeProperty\">stroke</a> is anything other than\n      <span class=\"prop-value\">none</span>, then set <var>box</var> to be the union of <var>box</var> and the\n      tightest rectangle in coordinate system <var>space</var> that contains the <a href=\"https://svgwg.org/svg2-draft/painting.html#StrokeShape\">stroke shape</a> of the\n      element, with the assumption that the element has no dash pattern."
                },
                {
                  "html": "If <var>markers</var> is true, then for each marker <var>marker</var> rendered on the element:",
                  "rationale": "for",
                  "steps": [
                    {
                      "html": "For each descendant <a href=\"https://svgwg.org/svg2-draft/struct.html#TermGraphicsElement\">graphics element</a> <var>child</var> of the <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/painting.html#MarkerElement\"><span>marker</span></a>’</span> element\n          that defines <var>marker</var>'s content:",
                      "rationale": "if",
                      "steps": [
                        {
                          "html": "If <var>child</var> has an ancestor element within the <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/painting.html#MarkerElement\"><span>marker</span></a>’</span> that is\n              <span class=\"prop-value\">'display: none'</span>, has a failing <a href=\"https://svgwg.org/svg2-draft/struct.html#TermConditionalProcessingAttribute\">conditional processing attribute</a>,\n              or is not an <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/linking.html#AElement\"><span>a</span></a>’</span>, <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#GElement\"><span>g</span></a>’</span>, <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> or <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SwitchElement\"><span>switch</span></a>’</span> element, then\n              continue to the next descendant <a href=\"https://svgwg.org/svg2-draft/struct.html#TermGraphicsElement\">graphics element</a>."
                        },
                        {
                          "html": "Otherwise, set <var>box</var> to be the union of <var>box</var> and the result of invoking the\n              algorithm to compute a bounding box with <var>child</var> as the element,\n              <var>space</var> as the target coordinate space, true for <var>fill</var>,\n              <var>stroke</var> and <var>markers</var>, and <var>clipped</var> for <var>clipped</var>."
                        }
                      ]
                    }
                  ]
                },
                {
                  "html": "If <var>clipped</var> is true and the value of <a class=\"property\" href=\"https://drafts.fxtf.org/css-masking-1/#the-clip-path\">clip-path</a> on <var>element</var> is not\n      <span class=\"prop-value\">none</span>, then set <var>box</var> to be the tightest rectangle\n      in coordinate system <var>space</var> that contains the intersection of <var>box</var> and the clipping path."
                },
                {
                  "html": "Return <var>box</var>."
                }
              ]
            },
            {
              "case": "a text content element",
              "html": "",
              "rationale": ".algorithm",
              "steps": [
                {
                  "html": "Let <var>box</var> be a rectangle initialized to (0, 0, 0, 0)."
                },
                {
                  "html": "Let <var>fill-shape</var> be the <a href=\"https://svgwg.org/svg2-draft/paths.html#TermEquivalentPath\">equivalent path</a> of <var>element</var>\n      if it is a <a href=\"https://svgwg.org/svg2-draft/shapes.html#TermShapeElement\">shape</a>, or a shape that includes each of the glyph cells corresponding\n      to the text within the elements otherwise."
                },
                {
                  "html": "If <var>fill</var> is true, then set <var>box</var> to the tightest rectangle\n      in the coordinate system <var>space</var> that contains <var>fill-shape</var>."
                },
                {
                  "html": "If <var>stroke</var> is true and the element's <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeProperty\">stroke</a> is anything other than\n      <span class=\"prop-value\">none</span>, then set <var>box</var> to be the union of <var>box</var> and the\n      tightest rectangle in coordinate system <var>space</var> that contains the <a href=\"https://svgwg.org/svg2-draft/painting.html#StrokeShape\">stroke shape</a> of the\n      element, with the assumption that the element has no dash pattern."
                },
                {
                  "html": "If <var>markers</var> is true, then for each marker <var>marker</var> rendered on the element:",
                  "rationale": "for",
                  "steps": [
                    {
                      "html": "For each descendant <a href=\"https://svgwg.org/svg2-draft/struct.html#TermGraphicsElement\">graphics element</a> <var>child</var> of the <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/painting.html#MarkerElement\"><span>marker</span></a>’</span> element\n          that defines <var>marker</var>'s content:",
                      "rationale": "if",
                      "steps": [
                        {
                          "html": "If <var>child</var> has an ancestor element within the <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/painting.html#MarkerElement\"><span>marker</span></a>’</span> that is\n              <span class=\"prop-value\">'display: none'</span>, has a failing <a href=\"https://svgwg.org/svg2-draft/struct.html#TermConditionalProcessingAttribute\">conditional processing attribute</a>,\n              or is not an <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/linking.html#AElement\"><span>a</span></a>’</span>, <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#GElement\"><span>g</span></a>’</span>, <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> or <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SwitchElement\"><span>switch</span></a>’</span> element, then\n              continue to the next descendant <a href=\"https://svgwg.org/svg2-draft/struct.html#TermGraphicsElement\">graphics element</a>."
                        },
                        {
                          "html": "Otherwise, set <var>box</var> to be the union of <var>box</var> and the result of invoking the\n              algorithm to compute a bounding box with <var>child</var> as the element,\n              <var>space</var> as the target coordinate space, true for <var>fill</var>,\n              <var>stroke</var> and <var>markers</var>, and <var>clipped</var> for <var>clipped</var>."
                        }
                      ]
                    }
                  ]
                },
                {
                  "html": "If <var>clipped</var> is true and the value of <a class=\"property\" href=\"https://drafts.fxtf.org/css-masking-1/#the-clip-path\">clip-path</a> on <var>element</var> is not\n      <span class=\"prop-value\">none</span>, then set <var>box</var> to be the tightest rectangle\n      in coordinate system <var>space</var> that contains the intersection of <var>box</var> and the clipping path."
                },
                {
                  "html": "Return <var>box</var>."
                }
              ]
            },
            {
              "case": "an ‘a’ element within a text content element",
              "html": "",
              "rationale": ".algorithm",
              "steps": [
                {
                  "html": "Let <var>box</var> be a rectangle initialized to (0, 0, 0, 0)."
                },
                {
                  "html": "Let <var>fill-shape</var> be the <a href=\"https://svgwg.org/svg2-draft/paths.html#TermEquivalentPath\">equivalent path</a> of <var>element</var>\n      if it is a <a href=\"https://svgwg.org/svg2-draft/shapes.html#TermShapeElement\">shape</a>, or a shape that includes each of the glyph cells corresponding\n      to the text within the elements otherwise."
                },
                {
                  "html": "If <var>fill</var> is true, then set <var>box</var> to the tightest rectangle\n      in the coordinate system <var>space</var> that contains <var>fill-shape</var>."
                },
                {
                  "html": "If <var>stroke</var> is true and the element's <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeProperty\">stroke</a> is anything other than\n      <span class=\"prop-value\">none</span>, then set <var>box</var> to be the union of <var>box</var> and the\n      tightest rectangle in coordinate system <var>space</var> that contains the <a href=\"https://svgwg.org/svg2-draft/painting.html#StrokeShape\">stroke shape</a> of the\n      element, with the assumption that the element has no dash pattern."
                },
                {
                  "html": "If <var>markers</var> is true, then for each marker <var>marker</var> rendered on the element:",
                  "rationale": "for",
                  "steps": [
                    {
                      "html": "For each descendant <a href=\"https://svgwg.org/svg2-draft/struct.html#TermGraphicsElement\">graphics element</a> <var>child</var> of the <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/painting.html#MarkerElement\"><span>marker</span></a>’</span> element\n          that defines <var>marker</var>'s content:",
                      "rationale": "if",
                      "steps": [
                        {
                          "html": "If <var>child</var> has an ancestor element within the <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/painting.html#MarkerElement\"><span>marker</span></a>’</span> that is\n              <span class=\"prop-value\">'display: none'</span>, has a failing <a href=\"https://svgwg.org/svg2-draft/struct.html#TermConditionalProcessingAttribute\">conditional processing attribute</a>,\n              or is not an <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/linking.html#AElement\"><span>a</span></a>’</span>, <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#GElement\"><span>g</span></a>’</span>, <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> or <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SwitchElement\"><span>switch</span></a>’</span> element, then\n              continue to the next descendant <a href=\"https://svgwg.org/svg2-draft/struct.html#TermGraphicsElement\">graphics element</a>."
                        },
                        {
                          "html": "Otherwise, set <var>box</var> to be the union of <var>box</var> and the result of invoking the\n              algorithm to compute a bounding box with <var>child</var> as the element,\n              <var>space</var> as the target coordinate space, true for <var>fill</var>,\n              <var>stroke</var> and <var>markers</var>, and <var>clipped</var> for <var>clipped</var>."
                        }
                      ]
                    }
                  ]
                },
                {
                  "html": "If <var>clipped</var> is true and the value of <a class=\"property\" href=\"https://drafts.fxtf.org/css-masking-1/#the-clip-path\">clip-path</a> on <var>element</var> is not\n      <span class=\"prop-value\">none</span>, then set <var>box</var> to be the tightest rectangle\n      in coordinate system <var>space</var> that contains the intersection of <var>box</var> and the clipping path."
                },
                {
                  "html": "Return <var>box</var>."
                }
              ]
            },
            {
              "case": "a container element",
              "html": "",
              "rationale": ".algorithm",
              "steps": [
                {
                  "html": "Let <var>box</var> be a rectangle initialized to (0, 0, 0, 0)."
                },
                {
                  "html": "Let <var>parent</var> be the <a href=\"https://svgwg.org/svg2-draft/struct.html#TermContainerElement\">container element</a> if it is one, or the\n      root of the <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#UseElement\"><span>use</span></a>’</span> element's shadow tree otherwise."
                },
                {
                  "html": "For each descendant <a href=\"https://svgwg.org/svg2-draft/struct.html#TermGraphicsElement\">graphics element</a> <var>child</var> of <var>parent</var>:",
                  "rationale": "if",
                  "steps": [
                    {
                      "html": "If <var>child</var> is <a href=\"https://svgwg.org/svg2-draft/render.html#Rendered-vs-NonRendered\">not rendered</a> then\n          continue to the next descendant <a href=\"https://svgwg.org/svg2-draft/struct.html#TermGraphicsElement\">graphics element</a>."
                    },
                    {
                      "html": "Otherwise, set <var>box</var> to be the union of <var>box</var> and the result of invoking the\n          algorithm to compute a bounding box with <var>child</var> as the element\n          and the same values for <var>space</var>, <var>fill</var>, <var>stroke</var>,\n          <var>markers</var> and <var>clipped</var> as the corresponding algorithm input values."
                    }
                  ]
                },
                {
                  "html": "If <var>clipped</var> is true:\n        <ul>\n          <li>If the value of <a class=\"property\" href=\"https://drafts.fxtf.org/css-masking-1/#the-clip-path\">clip-path</a> on <var>element</var> is not\n          <span class=\"prop-value\">none</span>,\n          then set <var>box</var> to be the tightest rectangle\n          in coordinate system <var>space</var> that contains the intersection of <var>box</var> and the clipping path.</li>\n          <li>If the <a class=\"property\" href=\"https://svgwg.org/svg2-draft/render.html#OverflowAndClipProperties\">overflow</a> property applies to the <var>element</var>\n          and does not have a value of <span class=\"prop-value\">visible</span>,\n          then set <var>box</var> to be the tightest rectangle\n          in coordinate system <var>space</var> that contains the intersection of <var>box</var> and the element's overflow bounds.</li>\n          <li>If the <a class=\"property\" href=\"https://drafts.fxtf.org/css-masking-1/#propdef-clip\">clip</a> property applies to the <var>element</var>\n          and does not have a value of <span class=\"prop-value\">auto</span>,\n          then set <var>box</var> to be the tightest rectangle\n          in coordinate system <var>space</var> that contains the intersection of <var>box</var> and the rectangle specified by <a class=\"property\" href=\"https://drafts.fxtf.org/css-masking-1/#propdef-clip\">clip</a>.</li>\n        </ul>"
                },
                {
                  "html": "Return <var>box</var>."
                }
              ]
            },
            {
              "case": "‘use’",
              "html": "",
              "rationale": ".algorithm",
              "steps": [
                {
                  "html": "Let <var>box</var> be a rectangle initialized to (0, 0, 0, 0)."
                },
                {
                  "html": "Let <var>parent</var> be the <a href=\"https://svgwg.org/svg2-draft/struct.html#TermContainerElement\">container element</a> if it is one, or the\n      root of the <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#UseElement\"><span>use</span></a>’</span> element's shadow tree otherwise."
                },
                {
                  "html": "For each descendant <a href=\"https://svgwg.org/svg2-draft/struct.html#TermGraphicsElement\">graphics element</a> <var>child</var> of <var>parent</var>:",
                  "rationale": "if",
                  "steps": [
                    {
                      "html": "If <var>child</var> is <a href=\"https://svgwg.org/svg2-draft/render.html#Rendered-vs-NonRendered\">not rendered</a> then\n          continue to the next descendant <a href=\"https://svgwg.org/svg2-draft/struct.html#TermGraphicsElement\">graphics element</a>."
                    },
                    {
                      "html": "Otherwise, set <var>box</var> to be the union of <var>box</var> and the result of invoking the\n          algorithm to compute a bounding box with <var>child</var> as the element\n          and the same values for <var>space</var>, <var>fill</var>, <var>stroke</var>,\n          <var>markers</var> and <var>clipped</var> as the corresponding algorithm input values."
                    }
                  ]
                },
                {
                  "html": "If <var>clipped</var> is true:\n        <ul>\n          <li>If the value of <a class=\"property\" href=\"https://drafts.fxtf.org/css-masking-1/#the-clip-path\">clip-path</a> on <var>element</var> is not\n          <span class=\"prop-value\">none</span>,\n          then set <var>box</var> to be the tightest rectangle\n          in coordinate system <var>space</var> that contains the intersection of <var>box</var> and the clipping path.</li>\n          <li>If the <a class=\"property\" href=\"https://svgwg.org/svg2-draft/render.html#OverflowAndClipProperties\">overflow</a> property applies to the <var>element</var>\n          and does not have a value of <span class=\"prop-value\">visible</span>,\n          then set <var>box</var> to be the tightest rectangle\n          in coordinate system <var>space</var> that contains the intersection of <var>box</var> and the element's overflow bounds.</li>\n          <li>If the <a class=\"property\" href=\"https://drafts.fxtf.org/css-masking-1/#propdef-clip\">clip</a> property applies to the <var>element</var>\n          and does not have a value of <span class=\"prop-value\">auto</span>,\n          then set <var>box</var> to be the tightest rectangle\n          in coordinate system <var>space</var> that contains the intersection of <var>box</var> and the rectangle specified by <a class=\"property\" href=\"https://drafts.fxtf.org/css-masking-1/#propdef-clip\">clip</a>.</li>\n        </ul>"
                },
                {
                  "html": "Return <var>box</var>."
                }
              ]
            },
            {
              "case": "‘foreignObject’",
              "html": "",
              "rationale": ".algorithm",
              "steps": [
                {
                  "html": "Let <var>box</var> be the tightest rectangle in coordinate space <var>space</var> that\n      contains the <a href=\"https://svgwg.org/svg2-draft/embedded.html#TermPositioningRectangle\">positioning rectangle</a> defined by the\n      <span class=\"attr-name\">‘x’</span>,\n      <span class=\"attr-name\">‘y’</span>,\n      <span class=\"attr-name\">‘width’</span> and\n      <span class=\"attr-name\">‘height’</span> geometric properties of the element."
                },
                {
                  "html": "If <var>clipped</var> is true and the value of <a class=\"property\" href=\"https://drafts.fxtf.org/css-masking-1/#the-clip-path\">clip-path</a> on <var>element</var> is not\n      <span class=\"prop-value\">none</span>, then set <var>box</var> to be the tightest rectangle\n      in coordinate system <var>space</var> that contains the intersection of <var>box</var> and the clipping path."
                },
                {
                  "html": "Return <var>box</var>."
                }
              ]
            },
            {
              "case": "‘image’",
              "html": "",
              "rationale": ".algorithm",
              "steps": [
                {
                  "html": "Let <var>box</var> be the tightest rectangle in coordinate space <var>space</var> that\n      contains the <a href=\"https://svgwg.org/svg2-draft/embedded.html#TermPositioningRectangle\">positioning rectangle</a> defined by the\n      <span class=\"attr-name\">‘x’</span>,\n      <span class=\"attr-name\">‘y’</span>,\n      <span class=\"attr-name\">‘width’</span> and\n      <span class=\"attr-name\">‘height’</span> geometric properties of the element."
                },
                {
                  "html": "If <var>clipped</var> is true and the value of <a class=\"property\" href=\"https://drafts.fxtf.org/css-masking-1/#the-clip-path\">clip-path</a> on <var>element</var> is not\n      <span class=\"prop-value\">none</span>, then set <var>box</var> to be the tightest rectangle\n      in coordinate system <var>space</var> that contains the intersection of <var>box</var> and the clipping path."
                },
                {
                  "html": "Return <var>box</var>."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "html": "The <a href=\"https://www.w3.org/TR/css3-images#intrinsic-aspect-ratio\">intrinsic aspect ratio</a> must be calculated using the following\nalgorithm. If the algorithm returns null, then there is no intrinsic aspect ratio.",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#Sizing\">width</a> and <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#Sizing\">height</a> sizing properties on the\n    <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> element are both absolute values:",
          "rationale": "return",
          "steps": [
            {
              "html": "return width / height"
            }
          ]
        },
        {
          "html": "If an <a href=\"https://svgwg.org/svg2-draft/linking.html#LinksIntoSVG\">SVG View</a> is active:",
          "rationale": "let",
          "steps": [
            {
              "html": "let <var>viewbox</var> be the viewbox defined by the active SVG View"
            },
            {
              "html": "return <var>viewbox</var>.width / <var>viewbox</var>.height"
            }
          ]
        },
        {
          "html": "If the <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/coords.html#ViewBoxAttribute\"><span>viewBox</span></a>’</span> on the <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> element is correctly specified:",
          "rationale": "let",
          "steps": [
            {
              "html": "let <var>viewbox</var> be the viewbox defined by the <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/coords.html#ViewBoxAttribute\"><span>viewBox</span></a>’</span>\n            attribute on the <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> element"
            },
            {
              "html": "return <var>viewbox</var>.width / <var>viewbox</var>.height"
            }
          ]
        },
        {
          "html": "return null"
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGTransform__type\">type</b> IDL attribute represents\nthe type of transform item that the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a>'s <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformValue\">value</a> is.\nOn getting <a href=\"https://svgwg.org/svg2-draft/coords.html#__svg__SVGTransform__type\">type</a>, the following steps\nare run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a>'s <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformValue\">value</a>\n  is a\n  <span class=\"prop-value\">matrix(…)</span>,\n  <span class=\"prop-value\">translate(…)</span>,\n  <span class=\"prop-value\">scale(…)</span>,\n  <span class=\"prop-value\">rotate(…)</span>,\n  <span class=\"prop-value\">skewX(…)</span> or\n  <span class=\"prop-value\">skewY(…)</span> function,\n  then return the corresponding constant\n  value from the transform type table above."
        },
        {
          "html": "Otherwise, return <a href=\"https://svgwg.org/svg2-draft/coords.html#__svg__SVGTransform__SVG_TRANSFORM_UNKNOWN\">SVG_TRANSFORM_UNKNOWN</a>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGTransform__angle\">angle</b> IDL attribute\nrepresents the angle parameter of a\n<span class=\"prop-value\">rotate(…)</span>,\n<span class=\"prop-value\">skewX(…)</span> or\n<span class=\"prop-value\">skewY(…)</span> transform function.\nOn getting, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object's <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformValue\">value</a>\n  is a <span class=\"prop-value\">rotate(…)</span>,\n  <span class=\"prop-value\">skewX(…)</span> or\n  <span class=\"prop-value\">skewY(…)</span> function,\n  return its angle argument in degrees."
        },
        {
          "html": "Otherwise, return 0."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGTransform__setMatrix\">setMatrix</b> method is used\nto set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> to a given matrix value.  When\nsetMatrix(<var>matrix</var>) is called, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object is <a href=\"https://svgwg.org/svg2-draft/coords.html#ReadOnlyTransform\">read only</a>, then\n  <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "Let <var>newMatrix</var> be the result of <code><a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dommatrixreadonly\">DOMMatrixReadOnly</a>.fromMatrix(<var>matrix</var>)</code>,\n  including the <a href=\"https://drafts.fxtf.org/geometry/#dommatrixinit-dictionary\">validate and fix-up</a> steps for missing values.\n  If that method throws an error, then re-throw that error and abort these steps."
        },
        {
          "html": "If <var>newMatrix</var>.is2D() would return true,\n  then set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object's\n  <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformValue\">value</a> to a <span class=\"prop-value\">matrix(…)</span>\n  value that represents the same matrix as <var>newMatrix</var>."
        },
        {
          "html": "Otherwise, set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object's\n  <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformValue\">value</a> to a <span class=\"prop-value\">matrix3d(…)</span>\n  value that represents the same matrix as <var>newMatrix</var>."
        },
        {
          "html": "In either case, <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMatrixObject\">matrix object</a> gets synchronized\n  to the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object's <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformValue\">value</a>."
        },
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object\n  <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMode\">reflects a presentation attribute value of an element</a>,\n  then <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the reflected attribute."
        }
      ]
    },
    {
      "html": "The\n<b id=\"__svg__SVGTransform__setTranslate\">setTranslate</b>,\n<b id=\"__svg__SVGTransform__setScale\">setScale</b>,\n<b id=\"__svg__SVGTransform__setRotate\">setRotate</b>,\n<b id=\"__svg__SVGTransform__setSkewX\">setSkewX</b> and\n<b id=\"__svg__SVGTransform__setSkewY\">setSkewY</b> methods are used\nto set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> to a new transform function\nvalue.  When one of these methods is called,\nthe following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object is <a href=\"https://svgwg.org/svg2-draft/coords.html#ReadOnlyTransform\">read only</a>, then\n  <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "Set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object's\n  <a href=\"https://svgwg.org/svg2-draft/#TransformValue\">value</a> to a new transform function\n  value, depending on which method was called:",
          "rationale": ".switch",
          "steps": [
            {
              "operation": "switch",
              "steps": [
                {
                  "case": "setTranslate(tx, ty)",
                  "html": "the new transform function value is <span class=\"prop-value\">translate(<var>tx</var>, <var>ty</var>)</span>"
                },
                {
                  "case": "setScale(sx, sy)",
                  "html": "the new transform function value is <span class=\"prop-value\">scale(<var>sx</var>, <var>sy</var>)</span>"
                },
                {
                  "case": "setRotate(angle, cx, cy)",
                  "html": "the new transform function value is <span class=\"prop-value\">rotate(<var>angle</var>, <var>cx</var>, <var>cy</var>)</span>"
                },
                {
                  "case": "setSkewX(angle)",
                  "html": "the new transform function value is <span class=\"prop-value\">skewX(<var>angle</var>)</span>"
                },
                {
                  "case": "setSkewY(angle)",
                  "html": "the new transform function value is <span class=\"prop-value\">skewY(<var>angle</var>)</span>"
                }
              ]
            }
          ]
        },
        {
          "html": "Set the components of the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object's\n  <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMatrixObject\">matrix object</a> to\n  match the new transform function <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformValue\">value</a>."
        },
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object\n  <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMode\">reflects an element of a\n  presentation attribute value</a>, then <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the\n  reflected attribute."
        }
      ]
    },
    {
      "html": "When assigning to any of a writable <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#DOMMatrix\">DOMMatrix</a>'s\nIDL attributes, or when invoking any of its mutable transform methods,\nthe following steps are run after updating the internal matrix value:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#DOMMatrix\">DOMMatrix</a> <a href=\"https://svgwg.org/svg2-draft/#MatrixMode\">reflects an SVGTransform</a>,\n  then:",
          "rationale": "if",
          "steps": [
            {
              "html": "If the <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#DOMMatrix\">DOMMatrix</a> would return true from its\n      <a href=\"https://www.w3.org/TR/2014/WD-geometry-1-20140522/#dom-dommatrixreadonly-is2d\">is2d</a>\n      method, then set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object's\n      <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformValue\">value</a> to a <span class=\"prop-value\">matrix(…)</span>\n      value that represents the same matrix as the <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#DOMMatrix\">DOMMatrix</a>."
            },
            {
              "html": "Otherwise, set the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object's\n      <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformValue\">value</a> to a <span class=\"prop-value\">matrix3d(…)</span>\n      value that represents the same matrix as the <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#DOMMatrix\">DOMMatrix</a>."
            },
            {
              "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object\n      <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMode\">reflects an element of a\n      presentation attribute value</a>, then <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the\n      reflected attribute."
            }
          ]
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGTransformList__createSVGTransformFromMatrix\">createSVGTransformFromMatrix</b>\nmethod is used to create a new <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object from a matrix object.\nWhen the createSVGTransformFromMatrix(<var>matrix</var>) method is called,\nthe following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>transform</var> be a newly created <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> object\n  that is <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMode\">detached</a>."
        },
        {
          "html": "Follow the steps that would be run if the <a href=\"https://svgwg.org/svg2-draft/coords.html#__svg__SVGTransform__setMatrix\">setMatrix</a>\n  method on <var>transform</var> were called, passing <var>matrix</var>\n  as its argument."
        },
        {
          "html": "Return <var>transform</var>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGTransformList__consolidate\">consolidate</b>\nmethod is used to convert the transform list into an equivalent\ntransformation using a single transform function.  When the\nconsolidate() method is called, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransformList\">SVGTransformList</a> object is <a href=\"https://svgwg.org/svg2-draft/types.html#ReadOnlyList\">read only</a>,\n  then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "If the list is empty, return null."
        },
        {
          "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermDetach\">Detach</a> and then remove all elements in the list."
        },
        {
          "html": "Let <var>transform</var> be a newly created <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a>\n  object."
        },
        {
          "html": "Let <var>matrix</var> be the matrix value obtained by beginning\n  with an identity matrix, and then post-multiplying the\n  value of the <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMatrixObject\">matrix object</a> for each\n  <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransform\">SVGTransform</a> in the list, in order."
        },
        {
          "html": "Set the components of <var>transform</var>'s\n  <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMatrixObject\">matrix object</a> to the component values in\n  <var>matrix</var>."
        },
        {
          "html": "If <var>transform</var>'s\n  <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMatrixObject\">matrix object</a> would return true from its\n  <a href=\"https://www.w3.org/TR/2014/WD-geometry-1-20140522/#dom-dommatrixreadonly-is2d\">is2d</a>\n  method, then set <var>transform</var>'s\n  <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformValue\">value</a> to a <span class=\"prop-value\">matrix(…)</span>\n  value that represents the same matrix as the <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMatrixObject\">matrix object</a>."
        },
        {
          "html": "Otherwise, set <var>transform</var>'s\n  <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformValue\">value</a> to a <span class=\"prop-value\">matrix3d(…)</span>\n  value that represents the same matrix as the <a href=\"https://svgwg.org/svg2-draft/coords.html#TransformMatrixObject\">matrix object</a>."
        },
        {
          "html": "<a href=\"https://svgwg.org/svg2-draft/types.html#TermAttach\">Attach</a> <var>transform</var> to this <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGTransformList\">SVGTransformList</a>."
        },
        {
          "html": "Append <var>transform</var> to this list."
        },
        {
          "html": "If the list <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflects</a> a presentation attribute, then\n  <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a> the reflected attribute."
        },
        {
          "html": "Return <var>transform</var>."
        }
      ]
    },
    {
      "html": "",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var>\n  <a href=\"https://svgwg.org/svg2-draft/coords.html#PreserveAspectRatioMode\">reflect the base value</a>\n  of a <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/coords.html#PreserveAspectRatioAttribute\"><span>preserveAspectRatio</span></a>’</span> attribute.\n  <var>value</var> is the current non-animated value of the attribute\n  (using the attribute's <a href=\"https://svgwg.org/svg2-draft/types.html#TermInitialValue\">initial value</a> if it is not present or invalid)."
        },
        {
          "html": "Return the constant value as specified in the alignment\n  constant table above for the alignment keyword in <var>value</var>."
        }
      ]
    },
    {
      "html": "On setting <a href=\"https://svgwg.org/svg2-draft/coords.html#__svg__SVGPreserveAspectRatio__align\">align</a>, the\nfollowing steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGPreserveAspectRatio\">SVGPreserveAspectRatio</a> is <a href=\"https://svgwg.org/svg2-draft/coords.html#ReadOnlyPreserveAspectRatio\">read only</a>, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "If <var>value</var> is\n  <a href=\"https://svgwg.org/svg2-draft/coords.html#__svg__SVGPreserveAspectRatio__SVG_PRESERVEASPECTRATIO_UNKNOWN\">SVG_PRESERVEASPECTRATIO_UNKNOWN</a>\n  or does not have a corresponding entry in the\n  alignment keyword table above, then throw a <a href=\"https://heycam.github.io/webidl/#exceptiondef-typeerror\">TypeError</a>."
        },
        {
          "html": "Let <var>string</var> be the corresponding keyword\n  in the alignment keyword table above for <var>value</var>."
        },
        {
          "html": "Append a single U+0020 SPACE character to <var>string</var>."
        },
        {
          "html": "Let <var>meet or slice</var> be the value that would be\n  returned from the\n  <a href=\"https://svgwg.org/svg2-draft/coords.html#__svg__SVGPreserveAspectRatio__meetOrSlice\">meetOrSlice</a>\n  member on this <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGPreserveAspectRatio\">SVGPreserveAspectRatio</a>."
        },
        {
          "html": "Append to <var>string</var> the corresponding keyword\n  in the meet-or-slice keyword table above for <var>meet or slice</var>."
        },
        {
          "html": "Set the reflected <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/coords.html#PreserveAspectRatioAttribute\"><span>preserveAspectRatio</span></a>’</span> attribute to <var>string</var>."
        }
      ]
    },
    {
      "html": "",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>value</var> be a <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/coords.html#PreserveAspectRatioAttribute\"><span>preserveAspectRatio</span></a>’</span> value that\n  <a href=\"https://svgwg.org/svg2-draft/coords.html#PreserveAspectRatioMode\">reflects the base value</a> of a <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/coords.html#PreserveAspectRatioAttribute\"><span>preserveAspectRatio</span></a>’</span>\n  attribute <var>value</var> is the current non-animated value of the attribute."
        },
        {
          "html": "If the meet-or-slice value is not present in <var>value</var>,\n  then return <a href=\"https://svgwg.org/svg2-draft/coords.html#__svg__SVGPreserveAspectRatio__SVG_MEETORSLICE_MEET\">SVG_MEETORSLICE_MEET</a>."
        },
        {
          "html": "Otherwise, the meet-or-slice value is present.  Return the constant\n  value as specified in the meet-or-slice constant table above for the meet-or-slice\n  keyword in <var>value</var>."
        }
      ]
    },
    {
      "html": "On setting <a href=\"https://svgwg.org/svg2-draft/coords.html#__svg__SVGPreserveAspectRatio__meetOrSlice\">meetOrSlice</a>, the\nfollowing steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGPreserveAspectRatio\">SVGPreserveAspectRatio</a> is <a href=\"https://svgwg.org/svg2-draft/coords.html#ReadOnlyPreserveAspectRatio\">read only</a>, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> a <a href=\"https://heycam.github.io/webidl/#nomodificationallowederror\">NoModificationAllowedError</a>."
        },
        {
          "html": "If <var>value</var> is\n  <a href=\"https://svgwg.org/svg2-draft/coords.html#__svg__SVGPreserveAspectRatio__SVG_MEETORSLICE_UNKNOWN\">SVG_MEETORSLICE_UNKNOWN</a>\n  or does not have a corresponding entry in the\n  meet-or-slice keyword table above, then throw a <a href=\"https://heycam.github.io/webidl/#exceptiondef-typeerror\">TypeError</a>."
        },
        {
          "html": "Let <var>align</var> be the value that would be\n  returned from the\n  <a href=\"https://svgwg.org/svg2-draft/coords.html#__svg__SVGPreserveAspectRatio__align\">align</a>\n  member on this <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/coords.html#InterfaceSVGPreserveAspectRatio\">SVGPreserveAspectRatio</a>."
        },
        {
          "html": "Let <var>string</var> be the corresponding keyword\n  in the alignment keyword table above for <var>align</var>."
        },
        {
          "html": "Append a single U+0020 SPACE character to <var>string</var>."
        },
        {
          "html": "Append to <var>string</var> the corresponding keyword\n  in the meet-or-slice keyword table above for <var>value</var>."
        },
        {
          "html": "Set the reflected <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/coords.html#PreserveAspectRatioAttribute\"><span>preserveAspectRatio</span></a>’</span> attribute to <var>string</var>."
        }
      ]
    },
    {
      "html": "The used values for the x- and y-axis rounded corner radii\nmay be determined implicitly from the other dimension (using the <code>auto</code> value),\nand are also subject to clamping so that the lengths of\nthe straight segments of the rectangle are never negative.\nThe used values for <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RxProperty\">rx</a> and <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RyProperty\">ry</a> are determined\nfrom the computed values by following these steps in order:",
      "rationale": "if",
      "steps": [
        {
          "html": "If both <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RxProperty\">rx</a> and <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RyProperty\">ry</a> have a computed value of <code>auto</code>\n  (since <code>auto</code> is the initial value for both properties, this will also occur if neither are specified by the author or if all author-supplied values are invalid),\n  then the used value of both <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RxProperty\">rx</a> and <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RyProperty\">ry</a> is 0.  (This will result in square corners.)"
        },
        {
          "html": "Otherwise, convert specified values to absolute values as follows:",
          "rationale": "if",
          "steps": [
            {
              "html": "If <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RxProperty\">rx</a> is set to a length value or a percentage,\n  but <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RyProperty\">ry</a> is <code>auto</code>,\n  calculate an absolute length equivalent for <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RxProperty\">rx</a>, resolving percentages against the used <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#Sizing\">width</a> of the rectangle;\n  the absolute value for <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RyProperty\">ry</a> is the same."
            },
            {
              "html": "If <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RyProperty\">ry</a> is set to a length value or a percentage,\n  but <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RxProperty\">rx</a> is <code>auto</code>,\n  calculate the absolute length equivalent for <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RyProperty\">ry</a>, resolving percentages against the used <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#Sizing\">height</a> of the rectangle;\n  the absolute value for <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RxProperty\">rx</a> is the same."
            },
            {
              "html": "If both <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RxProperty\">rx</a> and <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RyProperty\">ry</a> were set to lengths or percentages,\n  absolute values are generated individually,\n  resolving <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RxProperty\">rx</a> percentages against the used <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#Sizing\">width</a>,\n  and resolving <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RyProperty\">ry</a> percentages against the used <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#Sizing\">height</a>."
            }
          ]
        },
        {
          "html": "Finally, apply clamping to generate the used values:",
          "rationale": "if",
          "steps": [
            {
              "html": "If the absolute <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RxProperty\">rx</a> (after the above steps)\n  is greater than half of the used <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#Sizing\">width</a>,\n  then the used value of <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RxProperty\">rx</a> is half of the used <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#Sizing\">width</a>."
            },
            {
              "html": "If the absolute <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RyProperty\">ry</a> (after the above steps)\n  is greater than half of the used <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#Sizing\">height</a>,\n  then the used value of <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RyProperty\">ry</a> is half of the used <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#Sizing\">height</a>."
            },
            {
              "html": "Otherwise, the used values of <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RxProperty\">rx</a> and <a class=\"property\" href=\"https://svgwg.org/svg2-draft/geometry.html#RyProperty\">ry</a> are the absolute values computed previously."
            }
          ]
        }
      ]
    },
    {
      "html": "Mathematically, a <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/shapes.html#RectElement\"><span>rect</span></a>’</span> element is mapped to an\nequivalent <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/paths.html#PathElement\"><span>path</span></a>’</span> element as follows,\nafter generating absolute used values\n<var>x</var>, <var>y</var>, <var>width</var>, <var>height</var>,\n<var>rx</var>, and <var>rx</var>\nin user units for the user coordinate system,\nfor each of the equivalent geometric properties\nfollowing the rules specified above and in <a href=\"https://svgwg.org/svg2-draft/coords.html#Units\">Units</a>:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "perform an absolute <a href=\"https://svgwg.org/svg2-draft/paths.html#PathDataMovetoCommands\">moveto</a> operation to\n  location (<var>x+rx</var>,<var>y</var>);"
        },
        {
          "html": "perform an absolute horizontal <a href=\"https://svgwg.org/svg2-draft/paths.html#PathDataLinetoCommands\">lineto</a>\n  with parameter <var>x+width-rx</var>;"
        },
        {
          "html": "<em>if</em> both <var>rx</var> and <var>ry</var> are greater than zero,\n  perform an absolute <a href=\"https://svgwg.org/svg2-draft/paths.html#PathDataEllipticalArcCommands\">elliptical arc</a>\n  operation to coordinate (<var>x+width</var>,<var>y+ry</var>),\n  where <var>rx</var> and <var>ry</var> are used as the equivalent parameters to\n  the <a href=\"https://svgwg.org/svg2-draft/paths.html#PathDataEllipticalArcCommands\">elliptical arc</a> command,\n  the <var>x-axis-rotation</var> and <var>large-arc-flag</var> are set to zero,\n  the <var>sweep-flag</var> is set to one;"
        },
        {
          "html": "perform an absolute vertical <a href=\"https://svgwg.org/svg2-draft/paths.html#PathDataLinetoCommands\">lineto</a>\n  parameter <var>y+height-ry</var>;"
        },
        {
          "html": "<em>if</em> both <var>rx</var> and <var>ry</var> are greater than zero,\n  perform an absolute <a href=\"https://svgwg.org/svg2-draft/paths.html#PathDataEllipticalArcCommands\">elliptical arc</a>\n  operation to coordinate (<var>x+width-rx</var>,<var>y+height</var>),\n  using the same parameters as previously;"
        },
        {
          "html": "perform an absolute horizontal <a href=\"https://svgwg.org/svg2-draft/paths.html#PathDataLinetoCommands\">lineto</a>\n  parameter <var>x+rx</var>;"
        },
        {
          "html": "<em>if</em> both <var>rx</var> and <var>ry</var> are greater than zero,\n  perform an absolute <a href=\"https://svgwg.org/svg2-draft/paths.html#PathDataEllipticalArcCommands\">elliptical arc</a>\n  operation to coordinate (<var>x</var>,<var>y+height-ry</var>),\n  using the same parameters as previously;"
        },
        {
          "html": "perform an absolute vertical <a href=\"https://svgwg.org/svg2-draft/paths.html#PathDataLinetoCommands\">lineto</a>\n  parameter <var>y+ry</var>"
        },
        {
          "html": "<em>if</em> both <var>rx</var> and <var>ry</var> are greater than zero,\n  perform an absolute <a href=\"https://svgwg.org/svg2-draft/paths.html#PathDataEllipticalArcCommands\">elliptical arc</a>\n  operation with a <a href=\"https://svgwg.org/svg2-draft/paths.html#TermSegment-CompletingClosePath\">segment-completing close path</a> operation,\n  using the same parameters as previously."
        }
      ]
    },
    {
      "html": "When assigning to a writable <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a>'s\n<a href=\"https://www.w3.org/TR/2014/WD-geometry-1-20140522/#dom-dompointreadonly-dompoint-x\">x</a>,\n<a href=\"https://www.w3.org/TR/2014/WD-geometry-1-20140522/#dom-dompointreadonly-dompoint-y\">y</a>,\n<a href=\"https://www.w3.org/TR/2014/WD-geometry-1-20140522/#dom-dompointreadonly-dompoint-w\">w</a> or\n<a href=\"https://www.w3.org/TR/2014/WD-geometry-1-20140522/#dom-dompointreadonly-dompoint-z\">z</a>\nIDL attribute, the following steps are run after updating\nthe internal coordinate value:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If the <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a> <a href=\"https://svgwg.org/svg2-draft/shapes.html#PointMode\">reflects an element of the\n  base value</a> of a <a href=\"https://svgwg.org/svg2-draft/types.html#TermReflect\">reflected</a> attribute, then <a href=\"https://svgwg.org/svg2-draft/types.html#TermReserialize\">reserialize</a>\n  the reflected attribute using the <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/shapes.html#InterfaceSVGPointList\">SVGPointList</a> that reflects\n  the attribute's base value."
        },
        {
          "html": "Otherwise, if the <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a> <a href=\"https://svgwg.org/svg2-draft/#PointMode\">represents\n  the current translation</a> of an <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#SVGElement\"><span>svg</span></a>’</span> element and that\n  element is the <a href=\"https://svgwg.org/svg2-draft/struct.html#TermOutermostSVGElement\">outermost svg element</a>, then:",
          "rationale": "let",
          "steps": [
            {
              "html": "Let [<var>a</var> <var>b</var> <var>c</var> <var>d</var> <var>e</var> <var>f</var>]\n      be the 2x3 matrix that represents the document's magnification and panning\n      transform."
            },
            {
              "html": "Let <var>x</var> and <var>y</var> be the x and y coordinates of the\n      <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a> object, respectively."
            },
            {
              "html": "Set the document's magnification and panning transform to\n      [<var>a</var> 0 0 <var>d</var> <var>x</var> <var>y</var>]."
            }
          ]
        }
      ]
    },
    {
      "name": "addressable character",
      "href": "https://svgwg.org/svg2-draft/text.html#TermAddressableCharacter",
      "html": "A <a href=\"https://svgwg.org/svg2-draft/text.html#TermCharacter\">character</a> that is addressable by text positioning\n      attributes and SVG DOM text methods.\n\n      Characters discarded during layout such as\n      <a href=\"https://www.w3.org/TR/css-text-3/#white-space-phase-1\">collapsed\n      white space characters</a> are not addressable, neither are characters\n      within an element with a value of <span class=\"prop-value\">none</span> for\n      the <a class=\"property\" href=\"https://svgwg.org/svg2-draft/render.html#VisibilityControl\">display</a> property.\n\n      Addressable characters are addressed by their index. Indexes are\n      determined prior to applying any <a class=\"property\" href=\"https://www.w3.org/TR/css-text-3/#propdef-text-transform\">text-transform</a>\n      conversions, as described for the methods in the\n      <a class=\"idlinterface\" href=\"https://svgwg.org/svg2-draft/text.html#InterfaceSVGTextContentElement\">SVGTextContentElement</a> interface.\n\n      There are two methods to map an index to a character; the choice of\n      which to use depends on purpose:",
      "rationale": "for",
      "steps": [
        {
          "html": "For the purposes of mapping text positioning attributes, the\n          index is measured in Unicode code points (thus a 'u'\n          followed by the combining diaeresis ' ̈' is counted as two\n          characters while the precomposed character 'ü' is counted as\n          one character)."
        },
        {
          "html": "For the purposes of SVG DOM text methods, the index is\n          measured in UTF-16 code units (thus, a single Unicode code\n          point above U+FFFF will map to two addressable characters as\n          a UTF-16 code unit consists of 16 bits)."
        }
      ]
    },
    {
      "name": "text/x",
      "href": "https://svgwg.org/svg2-draft/text.html#TextElementXAttribute",
      "html": "If more characters exist than <a href=\"https://www.w3.org/TR/css3-values/#lengths\">&lt;length&gt;</a>s,\n    or if the attribute is not specified on a <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>tspan</span></a>’</span>,\n    then for each additional character:",
      "rationale": "if",
      "steps": [
        {
          "html": "if an ancestor <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>text</span></a>’</span> or <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>tspan</span></a>’</span> element\n        specifies an absolute X (Y) coordinate for the given character\n        via an <span class=\"attr-name\">‘x’</span>\n        (<span class=\"attr-name\">‘y’</span>) attribute\n        (nearest ancestor has precedence), then that\n        absolute X (Y) coordinate is used as the starting X (Y)\n        coordinate for that character, else"
        },
        {
          "html": "the starting X (Y) coordinate for rendering the glyphs\n        corresponding to the given character is the X (Y) coordinate\n        of the resulting <a href=\"https://svgwg.org/svg2-draft/text.html#TermCurrentTextPosition\">current text position</a> from the most\n        recently rendered glyph for the current <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>text</span></a>’</span> element."
        }
      ]
    },
    {
      "name": "text/dx",
      "href": "https://svgwg.org/svg2-draft/text.html#TextElementDXAttribute",
      "html": "If more characters exist than <a href=\"https://www.w3.org/TR/css3-values/#lengths\">&lt;length&gt;</a>s,\n        or if the attribute is not specified,\n        then for each additional character:",
      "rationale": "if",
      "steps": [
        {
          "html": "if an ancestor <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>text</span></a>’</span> or <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>tspan</span></a>’</span> element\n        specifies a relative X (Y) coordinate for the given character\n        via a <span class=\"attr-name\">‘dx’</span>\n        (<span class=\"attr-name\">‘dy’</span>) attribute\n        (nearest ancestor has precedence), then\n        the <a href=\"https://svgwg.org/svg2-draft/text.html#TermCurrentTextPosition\">current text position</a> is shifted along the x-axis\n        (y-axis) of the current user coordinate system by that amount, else"
        },
        {
          "html": "no extra shift along the x-axis (y-axis) occurs."
        }
      ]
    },
    {
      "name": "resolved descendant node",
      "href": "https://svgwg.org/svg2-draft/text.html#TermResolvedDescendantNode",
      "html": "The SVG specific text layout algorithm is as follows:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<b>Setup</b>",
          "rationale": "let",
          "steps": [
            {
              "html": "Let <var>root</var> be the result of generating\n\t  <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a> positions for the\n\t  <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>text</span></a>’</span> element and its subtree, laid out as if it\n\t  were an absolutely positioned element."
            },
            {
              "html": "Let <var>count</var> be the number of DOM <em>characters</em>\n\t  within the <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>text</span></a>’</span> element's subtree."
            },
            {
              "html": "Let <var>result</var> be an array of length <var>count</var>\n\t  whose entries contain the per-character information described\n\t  above.  Each entry is initialized as follows:\n\t  <ul>\n\t    <li>its global index number equal to its position in the array,</li>\n\t    <li>its \"x\" coordinate set to \"unspecified\",</li>\n\t    <li>its \"y\" coordinate set to \"unspecified\",</li>\n\t    <li>its \"rotate\" coordinate set to \"unspecified\",</li>\n\t    <li>its \"hidden\" flag is false,</li>\n\t    <li>its \"addressable\" flag is true,</li>\n\t    <li>its \"middle\" flag is false,</li>\n\t    <li>its \"anchored chunk\" flag is false.</li>\n\t  </ul>\n\t  If <var>result</var> is empty, then return <var>result</var>."
            },
            {
              "html": "Let <var>CSS_positions</var> be an array of length\n\t  <var>count</var> whose entries will be filled with the\n\t  <var>x</var> and <var>y</var> positions of the corresponding\n\t  <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a> in <var>root</var>. The array\n\t  entries are initialized to (0, 0)."
            },
            {
              "html": "Let \"horizontal\" be a flag, true if the writing mode of <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>text</span></a>’</span>\n\t  is horizontal, false otherwise."
            }
          ]
        },
        {
          "html": "For each array element with index <var>i</var> in\n\t<var>result</var>:",
          "rationale": "set",
          "steps": [
            {
              "html": "Set <var>addressable</var> to false if the character at index <var>i</var> was:\n          <ul>\n        <li>\n          part of the text content of a <a href=\"https://svgwg.org/svg2-draft/render.html#TermNonRenderedElement\">non-rendered element</a>\n        </li>\n\t    <li>\n\t      discarded during layout due to being a\n\t      <a href=\"https://www.w3.org/TR/css-text-3/#white-space-phase-1\">collapsed\n\t\twhite space character</a>, a soft hyphen character, or a\n\t      bidi control character; <i>or</i>\n\t    </li>\n\t    <li>\n\t      discarded during layout due to being a\n\t      <a href=\"https://www.w3.org/TR/css-text-3/#line-break-transform\">collapsed\n\t\tsegment break</a>; <i>or</i>\n\t    </li>\n\t    <li>\n\t      <a href=\"https://www.w3.org/TR/css-text-3/#white-space-phase-2\">trimmed</a>\n\t      from the start or end of a line.\n\t    </li>\n          </ul>"
            },
            {
              "html": "Set <var>middle</var> to true if the character at index <var>i</var>\n\t  is the second or later character that corresponds to a <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a>."
            },
            {
              "html": "If the character at index <var>i</var> corresponds to a <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a> at the beginning of a line, then set the \"anchored\n\t  chunk\" flag of <var>result</var>[<var>i</var>] to true."
            },
            {
              "html": "If <var>addressable</var> is true and <var>middle</var> is false then\n\t  set <var>CSS_positions</var>[<var>i</var>] to the position of the\n\t  corresponding <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a> as determined by the CSS\n\t  renderer. Otherwise, if <var>i</var> &gt; 0, then set\n\t  <var>CSS_positions</var>[<var>i</var>] =\n\t  <var>CSS_positions</var>[<var>i</var> − 1]"
            }
          ]
        },
        {
          "html": "<b>Resolve character positioning</b>",
          "rationale": "set",
          "steps": [
            {
              "html": "Set up:",
              "rationale": "let",
              "steps": [
                {
                  "html": "Let <var>resolve_x</var>, <var>resolve_y</var>,\n\t      <var>resolve_dx</var>, and <var>resolve_dy</var> be arrays of\n\t      length <var>count</var> whose entries are all initialized\n\t      to \"unspecified\"."
                },
                {
                  "html": "Set \"in_text_path\" flag false."
                },
                {
                  "html": "Call the following procedure with the <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>text</span></a>’</span> element node."
                }
              ]
            },
            {
              "html": "A recursive procedure that takes as input a <var>node</var> and\n\t    whose steps are as follows:",
              "rationale": "if",
              "steps": [
                {
                  "html": "If <var>node</var> is a <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>text</span></a>’</span> or <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>tspan</span></a>’</span> node:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "Let <var>index</var> equal the \"global index number\" of the\n\t\t  first character in the node."
                    },
                    {
                      "html": "Let <var>x</var>, <var>y</var>, <var>dx</var>, <var>dy</var>\n\t\t  and <var>rotate</var> be the lists of values from the\n\t\t  corresponding attributes on <var>node</var>, or empty\n\t\t  lists if the corresponding attribute was not specified\n\t\t  or was invalid."
                    },
                    {
                      "html": "If \"in_text_path\" flag is false:\n\t\t  <ul>\n\t\t    <li>\n\t\t      Let <var>new_chunk_count</var>\n\t\t      = max(length of <var>x</var>, length of <var>y</var>).\n\t\t    </li>\n\t\t  </ul>\n\t\t  Else:\n\t\t  <ul>\n\t\t    <li>\n\t\t      If the \"horizontal\" flag is true:\n\t\t      <ul>\n\t\t\t<li>\n\t\t\t  Let <var>new_chunk_count</var> = length of <var>x</var>.\n\t\t\t</li>\n\t\t      </ul>\n\t\t    </li>\n\t\t    <li>\n\t\t      Else:\n\t\t      <ul>\n\t\t\t<li>\n\t\t\t  Let <var>new_chunk_count</var> = length of <var>y</var>.\n\t\t\t</li>\n\t\t      </ul>\n\t\t    </li>\n\t\t  </ul>"
                    },
                    {
                      "html": "Let <var>length</var> be the number of DOM characters in the\n\t\t  subtree rooted at <var>node</var>."
                    },
                    {
                      "html": "Let <var>i</var> = 0 and <var>j</var> = 0."
                    },
                    {
                      "html": "While <var>j</var> &lt; <var>length</var>, do:",
                      "rationale": "if",
                      "steps": [
                        {
                          "html": "If the \"addressable\" flag of <var>result</var>[<var>index</var> +\n\t\t      <var>j</var>] is true, then:",
                          "rationale": "if",
                          "steps": [
                            {
                              "html": "If <var>i</var> &lt; <var>new_check_count</var>, then\n\t\t\t  set the \"anchored chunk\" flag of\n\t\t\t  <var>result</var>[<var>index</var> + <var>j</var>] to\n\t\t\t  true. Else set the flag to false."
                            },
                            {
                              "html": "If <var>i</var> &lt; length of <var>x</var>,\n\t\t\t  then set <var>resolve_x</var>[<var>index</var>\n\t\t\t  + <var>j</var>] to <var>x</var>[<var>i</var>]."
                            },
                            {
                              "html": "If \"in_text_path\" flag is true and the \"horizontal\"\n\t\t\t  flag is false, unset\n\t\t\t  <var>resolve_x</var>[<var>index</var>]."
                            },
                            {
                              "html": "If <var>i</var> &lt; length of <var>y</var>,\n\t\t\t  then set <var>resolve_y</var>[<var>index</var>\n\t\t\t  + <var>j</var>] to <var>y</var>[<var>i</var>]."
                            },
                            {
                              "html": "If \"in_text_path\" flag is true and the \"horizontal\"\n\t\t\t  flag is true, unset\n\t\t\t  <var>resolve_y</var>[<var>index</var>]."
                            },
                            {
                              "html": "If <var>i</var> &lt; length of <var>dx</var>,\n\t\t\t  then set <var>resolve_dx</var>[<var>index</var>\n\t\t\t  + <var>j</var>] to <var>dy</var>[<var>i</var>]."
                            },
                            {
                              "html": "If <var>i</var> &lt; length of <var>dy</var>,\n\t\t\t  then set <var>resolve_dy</var>[<var>index</var>\n\t\t\t  + <var>j</var>] to <var>dy</var>[<var>i</var>]."
                            },
                            {
                              "html": "If <var>i</var> &lt; length of <var>rotate</var>,\n\t\t\t  then set the angle value of <var>result</var>[<var>index</var>\n\t\t\t  + <var>j</var>] to <var>rotate</var>[<var>i</var>].\n\t\t\t  Otherwise, if <var>rotate</var> is not empty, then\n\t\t\t  set <var>result</var>[<var>index</var> + <var>j</var>]\n\t\t\t  to <var>result</var>[<var>index</var> + <var>j</var> − 1]."
                            },
                            {
                              "html": "Set <var>i</var> = <var>i</var> + 1."
                            }
                          ]
                        },
                        {
                          "html": "Set <var>j</var> = <var>j</var> + 1."
                        }
                      ]
                    }
                  ]
                },
                {
                  "html": "If <var>node</var> is a <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextPathElement\"><span>textPath</span></a>’</span> node:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "Let <var>index</var> equal the global index number of the\n\t\t  first character in the node (including descendant nodes)."
                    },
                    {
                      "html": "Set the \"anchored chunk\" flag of <var>result</var>[<var>index</var>]\n\t\t  to true."
                    },
                    {
                      "html": "Set <var>in_text_path</var> flag true."
                    }
                  ]
                },
                {
                  "html": "For each child node <var>child</var> of <var>node</var>:",
                  "rationale": "resolve",
                  "steps": [
                    {
                      "html": "<a href=\"https://svgwg.org/svg2-draft/text.html#ResolveGlyphPositioning\">Resolve glyph\n\t\t    positioning</a> of <var>child</var>."
                    }
                  ]
                },
                {
                  "html": "If <var>node</var> is a <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextPathElement\"><span>textPath</span></a>’</span> node:",
                  "rationale": "set",
                  "steps": [
                    {
                      "html": "Set \"in_text_path\" flag false."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<b>Adjust positions: dx, dy</b>",
          "rationale": "let",
          "steps": [
            {
              "html": "Let <var>shift</var> be the cumulative <var>x</var> and\n\t  <var>y</var> shifts due to <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElementXAttribute\"><span>x</span></a>’</span> and <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElementYAttribute\"><span>y</span></a>’</span>\n\t  attributes, initialized to (0,0)."
            },
            {
              "html": "For each array element with index <var>i</var> in result:",
              "rationale": "if",
              "steps": [
                {
                  "html": "If <var>resolve_x</var>[<var>i</var>] is unspecified, set it to 0.\n\t      If <var>resolve_y</var>[<var>i</var>] is unspecified, set it to 0."
                },
                {
                  "html": "Let <var>shift.x</var> = <var>shift.x</var> + <var>resolve_x</var>[<var>i</var>]\n\t      and <var>shift.y</var> = <var>shift.y</var> + <var>resolve_y</var>[<var>i</var>]."
                },
                {
                  "html": "Let <var>result</var>[<var>i</var>].x = CSS_positions[<var>i</var>].x + shift.x\n\t      and <var>result</var>[<var>i</var>].y = CSS_positions[<var>i</var>].y + shift.y."
                }
              ]
            }
          ]
        },
        {
          "html": "<b>Apply <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElementTextLengthAttribute\"><span>textLength</span></a>’</span> attribute</b>",
          "rationale": "set",
          "steps": [
            {
              "html": "Set up:",
              "rationale": "define",
              "steps": [
                {
                  "html": "Define <dfn id=\"TermResolvedDescendantNode\" data-dfn-type=\"dfn\" data-export=\"\">resolved descendant node</dfn> as a\n\t      descendant of node with a valid <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElementTextLengthAttribute\"><span>textLength</span></a>’</span>\n\t      attribute that is not itself a descendant node of a\n\t      descendant node that has a valid <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElementTextLengthAttribute\"><span>textLength</span></a>’</span>\n\t      attribute."
                },
                {
                  "html": "Call the following procedure with the <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>text</span></a>’</span> element\n\t      node."
                }
              ]
            },
            {
              "html": "A recursive procedure that takes as input\n\t    a <var>node</var> and whose steps are as follows:",
              "rationale": "for",
              "steps": [
                {
                  "html": "For each child node <var>child</var> of node:",
                  "rationale": "resolve",
                  "steps": [
                    {
                      "html": "<a href=\"https://svgwg.org/svg2-draft/text.html#ResolveTextLength\">Resolve text length</a> of child."
                    }
                  ]
                },
                {
                  "html": "If <var>node</var> is a <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>text</span></a>’</span> or <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>tspan</span></a>’</span> node\n\t      and if the node has a valid <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElementTextLengthAttribute\"><span>textLength</span></a>’</span> attribute value:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "Let <var>a</var> = +∞ and <var>b</var> = −∞."
                    },
                    {
                      "html": "Let <var>i</var> and <var>j</var> be the global\n\t\t  index of the first character and last characters\n\t\t  in <var>node</var>, respectively."
                    },
                    {
                      "html": "For each index <var>k</var> in the range\n\t\t  [<var>i</var>, <var>j</var>] where the \"addressable\" flag\n\t\t  of <var>result</var>[<var>k</var>] is true:",
                      "rationale": "if",
                      "steps": [
                        {
                          "html": "If the character at <var>k</var> is a linefeed\n\t\t      or carriage return, return. No adjustments due to\n\t\t      <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElementTextLengthAttribute\"><span>textLength</span></a>’</span> are made to a node with\n\t\t      a forced line break."
                        },
                        {
                          "html": "Let <var>pos</var> = the x coordinate of the position\n\t\t      in <var>result</var>[<var>k</var>], if the \"horizontal\"\n\t\t      flag is true, and the y coordinate otherwise."
                        },
                        {
                          "html": "Let <var>advance</var> = the advance of\n\t\t      the <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a> corresponding to\n\t\t      character <var>k</var>. [NOTE: This advance will be\n\t\t      negative for RTL horizontal text.]"
                        },
                        {
                          "html": "Set <var>a</var> =\n\t\t      min(<var>a</var>, <var>pos</var>, <var>pos</var>\n\t\t      + <var>advance</var>)."
                        },
                        {
                          "html": "Set <var>b</var> =\n\t\t      max(<var>b</var>, <var>pos</var>, <var>pos</var>\n\t\t      + <var>advance</var>)."
                        }
                      ]
                    },
                    {
                      "html": "If <var>a</var> ≠ +∞ then:",
                      "rationale": "find",
                      "steps": [
                        {
                          "html": "Find the distance <var>delta</var> = <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElementTextLengthAttribute\"><span>textLength</span></a>’</span>\n\t\t      computed value − (b − a)."
                        },
                        {
                          "html": "Find <var>n</var>, the total number of\n\t\t      <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic characters</a> in this node\n\t\t      including any descendant nodes that are not resolved\n\t\t      descendant nodes or within a resolved descendant\n\t\t      node."
                        },
                        {
                          "html": "Let <var>n</var> = <var>n</var> + number of\n\t\t      resolved descendant nodes − 1."
                        },
                        {
                          "html": "Find the per-character adjustment <var>δ</var>\n\t\t      = <var>delta</var>/<var>n</var>."
                        },
                        {
                          "html": "Let <var>shift</var> = 0."
                        },
                        {
                          "html": "For each index <var>k</var> in the range [<var>i</var>,<var>j</var>]:",
                          "rationale": "add",
                          "steps": [
                            {
                              "html": "Add shift to the <var>x</var> coordinate of the\n\t\t\t  position in result[<var>k</var>], if the \"horizontal\"\n\t\t\t  flag is true, and to the <var>y</var> coordinate\n\t\t\t  otherwise."
                            },
                            {
                              "html": "If the \"middle\" flag for result[<var>k</var>]\n\t\t\t  is not true and <var>k</var> is not a character in\n\t\t\t  a resolved descendant node other than the first\n\t\t\t  character then <var>shift</var> = <var>shift</var>\n\t\t\t  + <var>δ</var>."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<b>Adjust positions: x, y</b>",
          "rationale": "let",
          "steps": [
            {
              "html": "Let <var>shift</var> be the current adjustment due to\n\t  the <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElementXAttribute\"><span>x</span></a>’</span> and <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElementYAttribute\"><span>y</span></a>’</span> attributes,\n\t  initialized to (0,0)."
            },
            {
              "html": "Set <var>index</var> = 1."
            },
            {
              "html": "While <var>index</var> &lt; <var>count</var>:",
              "rationale": "if",
              "steps": [
                {
                  "html": "If <var>resolved_x</var>[<var>index</var>] is set, then let\n\t      <var>shift.x</var> =\n\t      <var>resolved_x</var>[<var>index</var>] −\n\t      <var>result.x</var>[<var>index</var>]."
                },
                {
                  "html": "If <var>resolved_y</var>[<var>index</var>] is set, then let\n\t      <var>shift.y</var> =\n\t      <var>resolved_y</var>[<var>index</var>] −\n\t      <var>result.y</var>[<var>index</var>]."
                },
                {
                  "html": "Let <var>result.x</var>[<var>index</var>] =\n\t        <var>result.x</var>[<var>index</var>] + shift.x\n\t      and <var>result.y</var>[<var>index</var>] =\n\t\t<var>result.y</var>[<var>index</var>] + shift.y."
                },
                {
                  "html": "If the \"middle\" and \"anchored chunk\" flags\n\t      of <var>result</var>[<var>index</var>] are both true, then:",
                  "rationale": "set",
                  "steps": [
                    {
                      "html": "Set the \"anchored chunk\" flag\n\t\t  of <var>result</var>[<var>index</var>] to false."
                    },
                    {
                      "html": "If <var>index</var> + 1 &lt; <var>count</var>, then set\n\t\t  the \"anchored chunk\" flag\n\t\t  of <var>result</var>[<var>index</var> + 1] to true."
                    }
                  ]
                },
                {
                  "html": "Set <var>index</var> to <var>index</var> + 1."
                }
              ]
            }
          ]
        },
        {
          "html": "<b>Apply anchoring</b>",
          "rationale": "for",
          "steps": [
            {
              "html": "For each slice <var>result</var>[<var>i</var>..<var>j</var>]\n\t  (inclusive of both <var>i</var> and <var>j</var>), where:\n\t  <ul>\n\t    <li>\n\t      the \"anchored chunk\" flag of <var>result</var>[<var>i</var>]\n\t      is true,\n\t    </li>\n\t    <li>\n\t      the \"anchored chunk\" flags\n\t      of <var>result</var>[<var>k</var>] where <var>i</var>\n\t      &lt; <var>k</var> ≤ <var>j</var> are false, and\n\t    </li>\n\t    <li>\n\t      <var>j</var> = <var>count</var> − 1 or the \"anchored\n\t      chunk\" flag of <var>result</var>[<var>j</var> + 1] is\n\t      true;\n\t    </li>\n\t  </ul>\n\t  do:",
              "rationale": "let",
              "steps": [
                {
                  "html": "Let <var>a</var> = +∞ and <var>b</var> = −∞."
                },
                {
                  "html": "For each index <var>k</var> in the range\n\t      [<var>i</var>, <var>j</var>] where the \"addressable\" flag\n\t      of <var>result</var>[<var>k</var>] is true:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "Let <var>pos</var> = the x coordinate of the position\n\t\t  in <var>result</var>[<var>k</var>], if the \"horizontal\" flag\n\t\t  is true, and the y coordinate otherwise."
                    },
                    {
                      "html": "Let <var>advance</var> = the advance of\n\t\t  the <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a> corresponding to\n\t\t  character <var>k</var>. [NOTE: This advance will be\n\t\t  negative for RTL horizontal text.]"
                    },
                    {
                      "html": "Set <var>a</var> =\n\t\t  min(<var>a</var>, <var>pos</var>, <var>pos</var>\n\t\t  + <var>advance</var>)."
                    },
                    {
                      "html": "Set <var>b</var> =\n\t\t  max(<var>b</var>, <var>pos</var>, <var>pos</var>\n\t\t  + <var>advance</var>)."
                    }
                  ]
                },
                {
                  "html": "If <var>a</var> ≠ +∞, then:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "Let <var>shift</var> be the x coordinate of\n\t\t  <var>result</var>[<var>i</var>], if the \"horizontal\" flag\n\t\t  is true, and the y coordinate otherwise."
                    },
                    {
                      "html": "Adjust shift based on the value of <a class=\"property\" href=\"https://svgwg.org/svg2-draft/text.html#TextAnchorProperty\">text-anchor</a>\n\t\t  and <a class=\"property\" href=\"https://svgwg.org/svg2-draft/text.html#DirectionProperty\">direction</a> of the element the character at\n\t\t  index <var>i</var> is in:",
                      "rationale": ".switch",
                      "steps": [
                        {
                          "operation": "switch",
                          "steps": [
                            {
                              "case": "(start, ltr) or (end, rtl)",
                              "html": "Set <var>shift</var> = <var>shift</var> − <var>a</var>."
                            },
                            {
                              "case": "(start, rtl) or (end, ltr)",
                              "html": "Set <var>shift</var> = <var>shift</var> − <var>b</var>."
                            },
                            {
                              "case": "(middle, ltr) or (middle, rtl)",
                              "html": "Set <var>shift</var> = <var>shift</var> − (<var>a</var> + <var>b</var>) / 2."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "html": "For each index <var>k</var> in the range [<var>i</var>, <var>j</var>]:",
                      "rationale": "add",
                      "steps": [
                        {
                          "html": "Add <var>shift</var> to the x coordinate of the position\n\t\t      in <var>result</var>[<var>k</var>], if the \"horizontal\"\n\t\t      flag is true, and to the y coordinate otherwise."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "<b>Position on path</b>",
          "rationale": "set",
          "steps": [
            {
              "html": "Set <var>index</var> = 0."
            },
            {
              "html": "Set the \"in path\" flag to false."
            },
            {
              "html": "Set the \"after path\" flag to false."
            },
            {
              "html": "Let <var>path_end</var> be an offset for characters that follow\n\t  a <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextPathElement\"><span>textPath</span></a>’</span> element. Set <var>path_end</var> to (0,0)."
            },
            {
              "html": "While <var>index</var> &lt; <var>count</var>:",
              "rationale": "if",
              "steps": [
                {
                  "html": "If the character at index <var>i</var> is within a\n\t      <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextPathElement\"><span>textPath</span></a>’</span> element and corresponds to a <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a>, then:",
                  "rationale": "set",
                  "steps": [
                    {
                      "html": "Set \"in path\" flag to true."
                    },
                    {
                      "html": "If the \"middle\" flag of\n\t\t  <var>result</var>[<var>index</var>] is false, then:",
                      "rationale": "let",
                      "steps": [
                        {
                          "html": "Let <var>path</var> be the <a href=\"https://svgwg.org/svg2-draft/paths.html#TermEquivalentPath\">equivalent path</a> of\n\t\t      the <a href=\"https://svgwg.org/svg2-draft/shapes.html#TermBasicShapeElement\">basic shape</a> element referenced by\n\t\t      the <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextPathElement\"><span>textPath</span></a>’</span> element, or an empty path if\n\t\t      the reference is invalid."
                        },
                        {
                          "html": "If the <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextPathElementSideAttribute\"><span>side</span></a>’</span> attribute of\n\t\t      the <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextPathElement\"><span>textPath</span></a>’</span> element is\n\t\t      <span class=\"attr-value\">'right'</span>, then\n\t\t      reverse <var>path</var>."
                        },
                        {
                          "html": "Let <var>length</var> be the length\n\t\t      of <var>path</var>."
                        },
                        {
                          "html": "Let <var>offset</var> be the value of the\n\t\t      <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextPathElement\"><span>textPath</span></a>’</span> element's\n\t\t      <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextPathElementStartOffsetAttribute\"><span>startOffset</span></a>’</span> attribute, adjusted\n\t\t      due to any <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/paths.html#PathLengthAttribute\"><span>pathLength</span></a>’</span> attribute on the\n\t\t      referenced element."
                        },
                        {
                          "html": "Let <var>advance</var> = the advance of\n\t\t      the <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a> corresponding\n\t\t      to character <var>k</var>. [NOTE: This advance will\n\t\t      be negative for RTL horizontal text.]"
                        },
                        {
                          "html": "Let (<var>x</var>, <var>y</var>)\n\t\t      and <var>angle</var> be the position and angle\n\t\t      in <var>result</var>[<var>index</var>]."
                        },
                        {
                          "html": "Let <var>mid</var> be a coordinate value depending\n\t\t      on the value of the \"horizontal\" flag:",
                          "rationale": ".switch",
                          "steps": [
                            {
                              "operation": "switch",
                              "steps": [
                                {
                                  "case": "true",
                                  "html": "<var>mid</var> is <var>x</var> + <var>advance</var> / 2\n\t\t\t  + <var>offset</var>"
                                },
                                {
                                  "case": "false",
                                  "html": "<var>mid</var> is <var>y</var> + <var>advance</var> / 2\n\t\t\t  + <var>offset</var>"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "html": "If <var>path</var> is not a <a href=\"https://svgwg.org/svg2-draft/paths.html#TermOpenSubpath\">closed subpath</a> and\n\t\t      <var>mid</var> &lt; 0 or <var>mid</var> &gt; <var>length</var>,\n\t\t      set the \"hidden\" flag of <var>result</var>[<var>index</var>] to true."
                        },
                        {
                          "html": "If <var>path</var> is a <a href=\"https://svgwg.org/svg2-draft/paths.html#TermOpenSubpath\">closed subpath</a> depending on\n\t\t      the values of <a class=\"property\" href=\"https://svgwg.org/svg2-draft/text.html#TextAnchorProperty\">text-anchor</a> and <a class=\"property\" href=\"https://svgwg.org/svg2-draft/text.html#DirectionProperty\">direction</a> of\n\t\t      the element the character at <var>index</var> is in:",
                          "rationale": ".switch",
                          "steps": [
                            {
                              "operation": "switch",
                              "steps": [
                                {
                                  "case": "(start, ltr) or (end, rtl)",
                                  "html": "If <var>mid</var>−<var>offset</var> &lt; 0\n\t\t\t  or <var>mid</var>−<var>offset</var> &gt; <var>length</var>,\n\t\t\t  set the \"hidden\" flag of <var>result</var>[<var>index</var>] to true."
                                },
                                {
                                  "case": "(middle, ltr) or (middle, rtl)",
                                  "html": "If <var>mid</var>−<var>offset</var> &lt; −<var>length</var>/2\n\t\t\t  or <var>mid</var>−<var>offset</var> &gt;  <var>length</var>/2,\n\t\t\t  set the \"hidden\" flag of <var>result</var>[<var>index</var>] to true."
                                },
                                {
                                  "case": "(start, rtl) or (end, ltr)",
                                  "html": "If <var>mid</var>−<var>offset</var> &lt; −<var>length</var>\n\t\t\t  or <var>mid</var>−<var>offset</var> &gt; 0,\n\t\t\t  set the \"hidden\" flag of <var>result</var>[<var>index</var>] to true."
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "html": "If the <var>hidden</var> flag is false:",
                          "rationale": "let",
                          "steps": [
                            {
                              "html": "Let <var>point</var> be the position and\n\t\t\t  <var>t</var> be the unit vector tangent to\n\t\t\t  the point <var>mid</var> distance\n\t\t\t  along <var>path</var>."
                            },
                            {
                              "html": "If the \"horizontal\" flag is",
                              "rationale": ".switch",
                              "steps": [
                                {
                                  "operation": "switch",
                                  "steps": [
                                    {
                                      "case": "true",
                                      "html": "",
                                      "rationale": "let",
                                      "steps": [
                                        {
                                          "html": "Let <var>n</var> be the normal unit vector\n\t\t\t\t  pointing in the direction <var>t</var> + 90°."
                                        },
                                        {
                                          "html": "Let <var>o</var> be the horizontal distance from the\n\t\t\t\t  vertical center line of the glyph to the alignment point."
                                        },
                                        {
                                          "html": "Then set the position in\n\t\t\t\t  <var>result</var>[<var>index</var>] to\n\t\t\t\t  <var>point</var> -\n\t\t\t\t  <var>o</var>×<var>t</var> +\n\t\t\t\t  <var>y</var>×<var>n</var>."
                                        },
                                        {
                                          "html": "Let <var>r</var> be the angle from\n\t\t\t\t  the positive x-axis to the tangent."
                                        },
                                        {
                                          "html": "Set the angle value\n\t\t\t\t  in <var>result</var>[<var>index</var>]\n\t\t\t\t  to <var>angle</var> + <var>r</var>."
                                        }
                                      ]
                                    },
                                    {
                                      "case": "false",
                                      "html": "",
                                      "rationale": "let",
                                      "steps": [
                                        {
                                          "html": "Let <var>n</var> be the normal unit vector\n\t\t\t\t  pointing in the direction <var>t</var> - 90°."
                                        },
                                        {
                                          "html": "Let <var>o</var> be the vertical distance from the\n\t\t\t\t  horizontal center line of the glyph to the alignment point."
                                        },
                                        {
                                          "html": "Then set the position in\n\t\t\t\t  <var>result</var>[<var>index</var>] to\n\t\t\t\t  <var>point</var> -\n\t\t\t\t  <var>o</var>×<var>t</var> +\n\t\t\t\t  <var>x</var>×<var>n</var>."
                                        },
                                        {
                                          "html": "Let <var>r</var> be the angle from\n\t\t\t\t  the positive y-axis to the tangent."
                                        },
                                        {
                                          "html": "Set the angle value\n\t\t\t\t  in <var>result</var>[<var>index</var>]\n\t\t\t\t  to <var>angle</var> + <var>r</var>."
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "html": "Otherwise, the \"middle\" flag\n\t\t  of <var>result</var>[<var>index</var>] is true:",
                      "rationale": "set",
                      "steps": [
                        {
                          "html": "Set the position and angle values\n\t\t      of <var>result</var>[<var>index</var>] to those\n\t\t      in <var>result</var>[<var>index</var> − 1]."
                        }
                      ]
                    }
                  ]
                },
                {
                  "html": "If the character at index <var>i</var> is not within a\n\t      <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextPathElement\"><span>textPath</span></a>’</span> element and corresponds to a <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a>, then:",
                  "rationale": "if",
                  "steps": [
                    {
                      "html": "If the \"in path\" flag is true:",
                      "rationale": "set",
                      "steps": [
                        {
                          "html": "Set the \"in path\" flag to false."
                        },
                        {
                          "html": "Set the \"after path\" flag to true."
                        },
                        {
                          "html": "Set <var>path_end</var> equal to the end point of the path\n\t\t      referenced by <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextPathElement\"><span>textPath</span></a>’</span> − the position of\n\t\t      <var>result</var>[<var>index</var>]."
                        }
                      ]
                    },
                    {
                      "html": "If the \"after path\" is true.",
                      "rationale": "if",
                      "steps": [
                        {
                          "html": "If <var>anchored chunk</var> of\n\t\t      <var>result</var>[<var>index</var>] is true, set the\n\t\t      \"after path\" flag to false."
                        },
                        {
                          "html": "Else,\n\t\t      let <var>result.x</var>[<var>index</var>] =\n\t\t      <var>result.x</var>[<var>index</var>] + <var>path_end.x</var>\n\t\t      and <var>result.y</var>[<var>index</var>] =\n\t\t      <var>result.y</var>[<var>index</var>] + <var>path_end.y</var>."
                        }
                      ]
                    }
                  ]
                },
                {
                  "html": "Set <var>index</var> = <var>index</var> + 1."
                }
              ]
            }
          ]
        },
        {
          "html": "<b>Return <var>result</var></b>"
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGTextContentElement__getNumberOfChars\">getNumberOfChars</b>\nmethod returns the total number of <a href=\"https://svgwg.org/svg2-draft/text.html#TermAddressableCharacter\">addressable characters</a> available for\nrendering within the current element, regardless of whether they will be rendered.\nWhen getNumberOfChars() is called, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>node</var> be the element or node upon which this method was called"
        },
        {
          "html": "If <var>node</var> is a DOM text node, return the length of the text content of\n    <var>node</var>, after normalizing whitespace according to the value of the\n    <a class=\"property\" href=\"https://www.w3.org/TR/css-text-3/#white-space-property\">white-space</a> property on its parent element."
        },
        {
          "html": "If <var>node</var> is an <a class=\"idlinterface\" href=\"https://dom.spec.whatwg.org/#interface-element\">Element</a>:\n  <ul>\n  <li>If the element is <a href=\"https://svgwg.org/svg2-draft/render.html#Rendered-vs-NonRendered\">not rendered</a>\n    (e.g., because the <a class=\"property\" href=\"https://svgwg.org/svg2-draft/render.html#VisibilityControl\">display</a> property has the used value\n    <span class=\"prop-value\">none</span>), then return 0;</li>\n  <li>Otherwise, set <var>count</var> to 0, and for each child of <var>node</var>:\n    <ul>\n      <li>Recursively call this algorithm and add the returned value to <var>count</var>.</li>\n    </ul>\n    Return <var>count</var>.\n  </li>\n  </ul>"
        },
        {
          "html": "For all other node types (e.g., DOM comments), return 0."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGTextContentElement__getComputedTextLength\">getComputedTextLength</b>\nmethod is used to compute a \"length\" for the text within the element.\nWhen getComputedTextLength() is called, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>count</var> be the value that would be returned if\n  the <a href=\"https://svgwg.org/svg2-draft/text.html#__svg__SVGTextContentElement__getNumberOfChars\">getNumberOfChars</a>\n  method were called on this element."
        },
        {
          "html": "Let <var>length</var> be the value that would be returned\n  if the <a href=\"https://svgwg.org/svg2-draft/text.html#__svg__SVGTextContentElement__getSubStringLength\">getSubStringLength</a>\n  method were called on this element, passing 0 and <var>count</var> as arguments."
        },
        {
          "html": "Return <var>length</var>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGTextContentElement__getSubStringLength\">getSubStringLength</b>\nmethod is used to compute the formatted text advance distance for a substring of text within the\nelement.  When getSubStringLength(<var>charnum</var>, <var>nchars</var>)\nis called, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Assign an index to each <a href=\"https://svgwg.org/svg2-draft/text.html#TermAddressableCharacter\">addressable character</a> in the DOM within this element,\n  where the first character has index 0."
        },
        {
          "html": "If <var>charnum</var> is greater than the highest index assigned\n  to a character or if <var>nchars</var> is negative, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> an <a href=\"https://heycam.github.io/webidl/#indexsizeerror\">IndexSizeError</a>."
        },
        {
          "html": "Let <var>length</var> be a length in user units, initialized to 0."
        },
        {
          "html": "For each <a href=\"https://svgwg.org/svg2-draft/text.html#TermAddressableCharacter\">addressable character</a> in the DOM within this element that has an\n    index such that\n    <var>charnum</var> ≤ index &lt; (<var>charnum</var> + <var>nchars</var>):",
          "rationale": "if",
          "steps": [
            {
              "html": "If the character corresponds to a <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a> and it is the first character\n      in document order to correspond to that <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a>, then:",
              "rationale": "add",
              "steps": [
                {
                  "html": "Add the advance of the <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a> to <var>length</var>,\n            adjusted for any font kerning in effect."
                },
                {
                  "html": "If the <a class=\"property\" href=\"https://www.w3.org/TR/css-text-3/#letter-spacing-property\">letter-spacing</a> or <a class=\"property\" href=\"https://www.w3.org/TR/css-text-3/#word-spacing-property\">word-spacing</a> properties\n          contributed space just after the <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a>, then add that space\n          to <var>length</var>."
                }
              ]
            }
          ]
        },
        {
          "html": "Return <var>length</var>."
        }
      ]
    },
    {
      "name": "find the typographic character for a character",
      "href": "https://svgwg.org/svg2-draft/text.html#TermFindTypographicCharacterForCharacter",
      "html": "To <dfn id=\"TermFindTypographicCharacterForCharacter\" data-dfn-type=\"dfn\" data-export=\"\">find the typographic\ncharacter for a character</dfn> at index <var>index</var> within an\nelement <var>element</var>, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Assign an index to each <a href=\"https://svgwg.org/svg2-draft/text.html#TermAddressableCharacter\">addressable character</a> in the DOM within this element,\n  where the first character has index 0."
        },
        {
          "html": "Let <var>last</var> be the highest index assigned to a character."
        },
        {
          "html": "While <var>charnum</var> &lt; <var>last</var> and\n    the character at index <var>charnum</var> does not correspond to\n    a <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a>:",
          "rationale": "set",
          "steps": [
            {
              "html": "Set <var>charnum</var> to <var>charnum</var> + 1."
            }
          ]
        },
        {
          "html": "If <var>charnum</var> is greater than the highest index assigned\n  to a character or, then return null."
        },
        {
          "html": "Otherwise, return the <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a> that corresponds to\n  <var>charnum</var>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGTextContentElement__getStartPositionOfChar\">getStartPositionOfChar</b>\nmethod is used to get the position of a <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a> after text\nlayout has been performed.  When getStartPositionOfChar(<var>charnum</var>) is\ncalled, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>cluster</var> be the result of\n  <a href=\"https://svgwg.org/svg2-draft/text.html#TermFindTypographicCharacterForCharacter\">finding the typographic\n  character for the character</a> at index <var>charnum</var> within\n  the current element."
        },
        {
          "html": "If <var>cluster</var> is null, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> an\n  <a href=\"https://heycam.github.io/webidl/#indexsizeerror\">IndexSizeError</a>."
        },
        {
          "html": "Let <var>p</var> be the\n  <a href=\"https://svgwg.org/svg2-draft/text.html#TermAlignmentPoint\">alignment point</a> of the <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a>\n  that correspond to the character at index <var>charnum</var>,\n  in the coordinate system of the current element."
        },
        {
          "html": "Return a newly created, <a href=\"https://svgwg.org/svg2-draft/shapes.html#PointMode\">detached</a>\n  <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a> object representing the point <var>p</var>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGTextContentElement__getEndPositionOfChar\">getEndPositionOfChar</b>\nmethod is used to get the trailing position of a <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a> after text\nlayout has been performed.  When getEndPositionOfChar(<var>charnum</var>) is\ncalled, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>cluster</var> be the result of\n  <a href=\"https://svgwg.org/svg2-draft/text.html#TermFindTypographicCharacterForCharacter\">finding the typographic\n  character for the character</a> at index <var>charnum</var> within\n  the current element."
        },
        {
          "html": "If <var>cluster</var> is null, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> an\n  <a href=\"https://heycam.github.io/webidl/#indexsizeerror\">IndexSizeError</a>."
        },
        {
          "html": "Let <var>p</var> be the\n  <a href=\"https://svgwg.org/svg2-draft/text.html#TermAlignmentPoint\">alignment point</a> of <var>cluster</var>\n  that correspond to the character at index <var>charnum</var>,\n  in the coordinate system of the current element."
        },
        {
          "html": "Let <var>direction</var> be a unit vector in the direction of\n  the <var>cluster</var>'s advance.  This direction takes into account\n  the writing mode being used, the direction of the character,\n  the <a class=\"property\" href=\"https://www.w3.org/TR/css3-writing-modes/#text-orientation\">text-orientation</a>, <a class=\"property\" href=\"https://svgwg.org/svg2-draft/text.html#GlyphOrientationHorizontalProperty\">glyph-orientation-horizontal</a>\n  and <a class=\"property\" href=\"https://svgwg.org/svg2-draft/text.html#GlyphOrientationVerticalProperty\">glyph-orientation-vertical</a> properties,\n  any <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElementRotateAttribute\"><span>rotate</span></a>’</span> value that applies to <var>cluster</var>,\n  and any rotation applied to due a <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextPathElement\"><span>textPath</span></a>’</span>."
        },
        {
          "html": "Let <var>advance</var> be <var>cluster</var>'s advance."
        },
        {
          "html": "Set <var>p</var> to <var>p</var> + <var>advance</var> · <var>direction</var>."
        },
        {
          "html": "Return a newly created, <a href=\"https://svgwg.org/svg2-draft/shapes.html#PointMode\">detached</a>\n  <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#dom-dompoint\">DOMPoint</a> object representing the point <var>p</var>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGTextContentElement__getExtentOfChar\">getExtentOfChar</b>\nmethod is used to compute a tight bounding box of the glyph cell\nthat corresponds to a given <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a>.  When getExtentOfChar(<var>charnum</var>)\nis called, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>cluster</var> be the result of\n  <a href=\"https://svgwg.org/svg2-draft/text.html#TermFindTypographicCharacterForCharacter\">finding the typographic\n  character for the character</a> at index <var>charnum</var> within\n  the current element."
        },
        {
          "html": "If <var>cluster</var> is null, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> an\n  <a href=\"https://heycam.github.io/webidl/#indexsizeerror\">IndexSizeError</a>."
        },
        {
          "html": "Let <var>quad</var> be the potentially rotated rectangle in\n  the current element's coordinate system that\n  is the glyph cell for <var>cluster</var>."
        },
        {
          "html": "Let <var>rect</var> be the rectangle that forms the tightest\n  bounding box around <var>quad</var> in the current element's\n  coordinate system."
        },
        {
          "html": "Return a newly created <a class=\"idlinterface\" href=\"https://www.w3.org/TR/geometry-1/#DOMRect\">DOMRect</a> object representing the\n  rectangle <var>rect</var>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGTextContentElement__getRotationOfChar\">getRotationOfChar</b>\nmethod is used to get the rotation of <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a>.  When\ngetRotationOfChar(<var>charnum</var>) is called, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>cluster</var> be the result of\n  <a href=\"https://svgwg.org/svg2-draft/text.html#TermFindTypographicCharacterForCharacter\">finding the typograhic\n  character for the character</a> at index <var>charnum</var> within\n  the current element."
        },
        {
          "html": "If <var>cluster</var> is null, then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> an\n  <a href=\"https://heycam.github.io/webidl/#indexsizeerror\">IndexSizeError</a>."
        },
        {
          "html": "Let <var>direction</var> be the angle in degrees that represents\n  the direction of the <var>cluster</var>'s advance.\n  This direction takes into account\n  the writing mode being used, the direction of the character,\n  the <a class=\"property\" href=\"https://www.w3.org/TR/css3-writing-modes/#text-orientation\">text-orientation</a>, <a class=\"property\" href=\"https://svgwg.org/svg2-draft/text.html#GlyphOrientationHorizontalProperty\">glyph-orientation-horizontal</a>\n  and <a class=\"property\" href=\"https://svgwg.org/svg2-draft/text.html#GlyphOrientationVerticalProperty\">glyph-orientation-vertical</a> properties,\n  any <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElementRotateAttribute\"><span>rotate</span></a>’</span> value that applies to <var>cluster</var>,\n  and any rotation applied to due a <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextPathElement\"><span>textPath</span></a>’</span>."
        },
        {
          "html": "Return <var>direction</var>."
        }
      ]
    },
    {
      "html": "The <b id=\"__svg__SVGTextContentElement__getCharNumAtPosition\">getCharNumAtPosition</b>\nmethod is used to find which character caused a text glyph to\nbe rendered at a given position in the coordinate system.\nBecause the relationship between characters and glyphs is not one-to-one,\nonly the first character of the relevant <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a> is returned\nWhen getCharNumAtPosition(<var>point</var>)\nis called, the following steps are run:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Assign an index to each character in the DOM within this element,\n  where the first character has index 0."
        },
        {
          "html": "Let <var>last</var> be the highest index assigned to a character."
        },
        {
          "html": "Let <var>charnum</var> be 0."
        },
        {
          "html": "Let <var>result</var> be -1."
        },
        {
          "html": "While <var>charnum</var> &lt; <var>last</var>:",
          "rationale": "if",
          "steps": [
            {
              "html": "If the character at index <var>charnum</var> corresponds\n      to a <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a> and it is the first character\n      in document order to correspond to that <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a>,\n      and <var>point</var> in this element's coordinate system\n      is within the glyph cell for the <a href=\"https://svgwg.org/svg2-draft/text.html#TermTypographicCharacterUnit\">typographic character</a>, then\n      set <var>result</var> to <var>charnum</var>."
            }
          ]
        },
        {
          "html": "Return <var>result</var>."
        }
      ]
    },
    {
      "html": "Selects a substring of the text in this element, beginning at character\nindex <var>charnum</var> and extending forwards <var>nchars</var>\ncharacters.  The following steps must be followed when this method is called:",
      "rationale": "let",
      "steps": [
        {
          "html": "Let <var>node</var> be this text content element."
        },
        {
          "html": "Let <var>count</var> be the number of characters in this text content element."
        },
        {
          "html": "Let <var>end</var> = <var>charnum</var> + <var>nchars</var>."
        },
        {
          "html": "If <var>charnum</var> ≥ <var>count</var> or <var>end</var> ≥ <var>count</var>,\n  then <a href=\"https://heycam.github.io/webidl/#dfn-throw\">throw</a> an <a href=\"https://heycam.github.io/webidl/#indexsizeerror\">IndexSizeError</a>."
        },
        {
          "html": "Remove all <a href=\"https://www.w3.org/TR/2014/WD-dom-20140204/#concept-range\">ranges</a>\n  from the document's <a href=\"http://w3c.github.io/selection-api/#dfn-selection\">selection</a>. [<a href=\"https://svgwg.org/svg2-draft/refs.html#ref-dom\">DOM</a>][<a href=\"https://svgwg.org/svg2-draft/refs.html#ref-editing\">EDITING</a>]"
        },
        {
          "html": "Set the <a href=\"http://w3c.github.io/selection-api/#dfn-selection\">selection</a>'s\n  <a href=\"http://w3c.github.io/selection-api/#dfn-direction\">direction</a> to\n  forwards."
        },
        {
          "html": "Add to the <a href=\"http://w3c.github.io/selection-api/#dfn-selection\">selection</a>\n  a new <a href=\"https://www.w3.org/TR/2014/WD-dom-20140204/#concept-range\">range</a> whose\n  <a href=\"https://www.w3.org/TR/2014/WD-dom-20140204/#concept-range-start\">start</a> is the\n  <a href=\"https://www.w3.org/TR/2014/WD-dom-20140204/#concept-range-bp\">boundary point</a>\n  tuple (<var>node</var>, <var>charnum</var>) and <a href=\"https://www.w3.org/TR/2014/WD-dom-20140204/#concept-range-end\">end</a>\n  is the <a href=\"https://www.w3.org/TR/2014/WD-dom-20140204/#concept-range-bp\">boundary point</a>\n  tuple (<var>node</var>, <var>end</var>)."
        }
      ]
    },
    {
      "html": "<a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeDasharrayProperty\">stroke-dasharray</a> values are <a href=\"https://drafts.csswg.org/css-values-4/#not-additive\">not additive</a>. For interpolation,\n<a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeDasharrayProperty\">stroke-dasharray</a> values are combined as follows:",
      "rationale": ".switch",
      "steps": [
        {
          "operation": "switch",
          "steps": [
            {
              "case": "If either start or end compute to none or are invalid",
              "html": "<var>start</var> or <var>end</var> are combined using the discrete animation type."
            },
            {
              "case": "Otherwise",
              "html": "repeat both dash patterns of <var>start</var> and <var>end</var> value list until the length of elements in\n    both value lists match. Each item is then combined by computed value."
            }
          ]
        }
      ]
    },
    {
      "name": "stroke shape",
      "href": "https://svgwg.org/svg2-draft/#TermStrokeShape",
      "html": "<h3 id=\"StrokeShape\" class=\"heading\">13.5.7. Computing the shape of the stroke<a class=\"self-link\" href=\"https://svgwg.org/svg2-draft/#StrokeShape\"></a></h3>\n\n\n\n<div class=\"ready-for-wider-review\">\n<p>The <dfn id=\"TermStrokeShape\" data-dfn-type=\"dfn\" data-export=\"\">stroke shape</dfn> of an element is the\nshape that is filled by the <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeProperty\">stroke</a> property.  Since <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>text</span></a>’</span>\nelements can be rendered in multiple chunks, each chunk has its own\n<a href=\"https://svgwg.org/svg2-draft/painting.html#TermStrokeShape\">stroke shape</a>.  The following algorithm describes the ideal stroke shape\nof a <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/paths.html#PathElement\"><span>path</span></a>’</span>, <a href=\"https://svgwg.org/svg2-draft/shapes.html#TermBasicShapeElement\">basic shape</a> or individual <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>text</span></a>’</span> chunk is,\ntaking into account the stroking properties above. The ideal stroke shape\ndescribed defines a best case implementation, but implementations are given some\nleeway to deviate from this description for performance reasons.</p>\n\n\n</div> \n\nThe ideal stroke shape is determined as follows:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>shape</var> be an empty shape."
        },
        {
          "html": "If <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeWidthProperty\">stroke-width</a> &gt; 0, then:",
          "rationale": "let",
          "steps": [
            {
              "html": "Let <var>scale</var> be a scale factor for the dash pattern.  If we are\n      computing the stroke shape of a <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>text</span></a>’</span> chunk,\n      or if the <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/paths.html#PathLengthAttribute\"><span>pathLength</span></a>’</span> attribute is not present on the element,\n      then <var>scale</var> is 1.  Otherwise, it is determined as follows:",
              "rationale": "let",
              "steps": [
                {
                  "html": "Let <var>length</var> be the user agent's computed length of the\n          <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/paths.html#PathElement\"><span>path</span></a>’</span> or <a href=\"https://svgwg.org/svg2-draft/paths.html#TermEquivalentPath\">equivalent path</a> for a <a href=\"https://svgwg.org/svg2-draft/shapes.html#TermBasicShapeElement\">basic shape</a>."
                },
                {
                  "html": "Let <var>authorlength</var> be the value of the <span class=\"attr-name\">‘<a href=\"https://svgwg.org/svg2-draft/paths.html#PathLengthAttribute\"><span>pathLength</span></a>’</span>\n          attribute on the <a href=\"https://svgwg.org/svg2-draft/shapes.html#TermShapeElement\">shape</a>."
                },
                {
                  "html": "<var>scale</var> is <var>authorlength</var> / <var>length</var>."
                }
              ]
            },
            {
              "html": "Let <var>path</var> be the <a href=\"https://svgwg.org/svg2-draft/paths.html#TermEquivalentPath\">equivalent path</a> of the element (or the individual\n      chunk of a <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/text.html#TextElement\"><span>text</span></a>’</span> element)."
            },
            {
              "html": "For each subpath of <var>path</var>:",
              "rationale": "let",
              "steps": [
                {
                  "html": "Let <var>positions</var> be the <a href=\"https://svgwg.org/svg2-draft/painting.html#TermDashPositions\">dash positions</a> for the subpath."
                },
                {
                  "html": "For each pair &lt;<var>start</var>, <var>end</var>&gt; in <var>positions</var>:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "Scale <var>start</var> and <var>end</var> by <var>scale</var>."
                    },
                    {
                      "html": "Let <var>dash</var> be the shape that includes, for all distances\n              between <var>start</var> and <var>end</var> along the subpath, all\n              points that lie on the line perpendicular to the subpath at that\n              distance and which are within distance <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeWidthProperty\">stroke-width</a> of\n              the point on the subpath at that position."
                    },
                    {
                      "html": "Set <var>dash</var> to be the union of <var>dash</var> and the\n              starting <a href=\"https://svgwg.org/svg2-draft/painting.html#TermCapShape\">cap shape</a> for the subpath at position <var>start</var>."
                    },
                    {
                      "html": "Set <var>dash</var> to be the union of <var>dash</var> and the\n              ending <a href=\"https://svgwg.org/svg2-draft/painting.html#TermCapShape\">cap shape</a> for the subpath at position <var>end</var>."
                    },
                    {
                      "html": "Let <var>index</var> and <var>last</var> be the indexes of the\n                path segments in the subpath at distance <var>start</var> and\n                <var>end</var> along the subpath."
                    },
                    {
                      "html": "While <var>index</var> &lt; <var>last</var>:",
                      "rationale": "set",
                      "steps": [
                        {
                          "html": "Set <var>dash</var> to be the union of <var>dash</var> and the\n                  <a href=\"https://svgwg.org/svg2-draft/painting.html#TermLineJoinShape\">line join shape</a> for the subpath at segment index <var>index</var>."
                        },
                        {
                          "html": "Set <var>index</var> to <var>index</var> + 1."
                        }
                      ]
                    },
                    {
                      "html": "Set <var>shape</var> to be the union of <var>shape</var> and\n              <var>stroke</var>."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "Return <var>shape</var>."
        }
      ]
    },
    {
      "name": "dash positions",
      "href": "https://svgwg.org/svg2-draft/painting.html#TermDashPositions",
      "html": "The <dfn id=\"TermDashPositions\" data-dfn-type=\"dfn\" data-export=\"\">dash positions</dfn> for a given subpath of\nthe <a href=\"https://svgwg.org/svg2-draft/paths.html#TermEquivalentPath\">equivalent path</a> of a <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/paths.html#PathElement\"><span>path</span></a>’</span> or <a href=\"https://svgwg.org/svg2-draft/shapes.html#TermBasicShapeElement\">basic shape</a> is a\nsequence of pairs of values, which represent the starting and ending distance\nalong the subpath for each of the dashes that form the subpath's stroke.  It is\ndetermined as follows:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>pathlength</var> be the length of the subpath."
        },
        {
          "html": "Let <var>dashes</var> be the list of values of <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeDasharrayProperty\">stroke-dasharray</a>\n  on the element, converted to user units, repeated if necessary so that it has\n  an even number of elements; if the property has the value\n  <span class=\"prop-value\">none</span>, then the list has a single value 0."
        },
        {
          "html": "Let <var>count</var> be the number of values in <var>dashes</var>."
        },
        {
          "html": "Let <var>sum</var> be the sum of the values in <var>dashes</var>."
        },
        {
          "html": "If <var>sum</var> = 0, then return a sequence with the single pair\n  &lt;0, <var>pathlength</var>&gt;."
        },
        {
          "html": "Let <var>positions</var> be an empty sequence."
        },
        {
          "html": "Let <var>offset</var> be the value of the <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeDashoffsetProperty\">stroke-dashoffset</a>\n  property on the element."
        },
        {
          "html": "If <var>offset</var> is negative, then set <var>offset</var> to\n  <var>sum</var> − abs(<var>offset</var>)."
        },
        {
          "html": "Set <var>offset</var> to <var>offset</var> mod <var>sum</var>."
        },
        {
          "html": "Let <var>index</var> be the smallest integer such that\n  sum(<var>dashes<sub>i</sub></var>, 0 ≤ <var>i</var> ≤ <var>index</var>) ≥ <var>offset</var>."
        },
        {
          "html": "Let <var>dashlength</var> be\n  min(sum(<var>dashes<sub>i</sub></var>, 0 ≤ <var>i</var> ≤ <var>index</var>) − <var>offset</var>, <var>pathlength</var>)."
        },
        {
          "html": "If <var>index</var> mod 2 = 0, then append to <var>positions</var> the\n  pair &lt;0, <var>dashlength</var>&gt;."
        },
        {
          "html": "Let <var>position</var> be <var>dashlength</var>."
        },
        {
          "html": "While <var>position</var> &lt; <var>pathlength</var>:",
          "rationale": "set",
          "steps": [
            {
              "html": "Set <var>index</var> to (<var>index</var> + 1) mod <var>count</var>."
            },
            {
              "html": "Let <var>dashlength</var> be\n      min(<var>dashes</var><sub><var>index</var></sub>, <var>pathlength</var> − <var>position</var>)."
            },
            {
              "html": "If <var>index</var> mod 2 = 0, then append to <var>positions</var> the\n      pair &lt;<var>position</var>, <var>position</var> + <var>dashlength</var>&gt;."
            },
            {
              "html": "Set <var>position</var> to <var>position</var> + <var>dashlength</var>."
            }
          ]
        },
        {
          "html": "Return <var>positions</var>."
        }
      ]
    },
    {
      "name": "cap shapes",
      "href": "https://svgwg.org/svg2-draft/painting.html#TermCapShape",
      "html": "The starting and ending <dfn id=\"TermCapShape\" data-dfn-type=\"dfn\" data-export=\"\">cap shapes</dfn> at a given\n<var>position</var> along a subpath are determined as follows:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeLinecapProperty\">stroke-linecap</a> is <span class=\"prop-value\">butt</span>, then return an empty shape."
        },
        {
          "html": "Otherwise, if <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeLinecapProperty\">stroke-linecap</a> is <span class=\"prop-value\">round</span>, then:",
          "rationale": "if",
          "steps": [
            {
              "html": "If this is a starting cap, then return a semicircle of diameter <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeWidthProperty\">stroke-width</a> positioned such that:\n        <ul>\n          <li class=\"ready-for-wider-review\">The subpath that the semicircle is relative to is the subpath starting\n          at distance <var>position</var>.</li>\n          <li>Its straight edge is parallel to the line perpendicular to the subpath at distance <var>position</var> along it.</li>\n          <li>The midpoint of its straight edge is at the point that is along the subpath at distance <var>position</var>.</li>\n          <li>The direction from the midpoint of its arc to the midpoint of its straight edge is the same as the direction of\n          the subpath at distance <var>position</var>.</li>\n        </ul>"
            },
            {
              "html": "Otherwise, this is an ending cap.  Return a semicircle of diameter <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeWidthProperty\">stroke-width</a> positioned such that:\n        <ul>\n          <li class=\"ready-for-wider-review\">The subpath that the semicircle is relative to is the subpath ending\n          at distance <var>position</var>.</li>\n          <li>Its straight edge is parallel to the line perpendicular to the subpath at distance <var>position</var> along it.</li>\n          <li>The midpoint of its straight edge is at the point that is along the subpath at distance <var>position</var>.</li>\n          <li>The direction from the midpoint of its straight edge to the midpoint of its arc is the same as the\n          direction of the subpath.</li>\n        </ul>"
            }
          ]
        },
        {
          "html": "Otherwise, <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeLinecapProperty\">stroke-linecap</a> is <span class=\"prop-value\">square</span>:",
          "rationale": "if",
          "steps": [
            {
              "html": "If this is a starting cap, then return a rectangle with side lengths <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeWidthProperty\">stroke-width</a> and <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeWidthProperty\">stroke-width</a> / 2 positioned such that:\n        <ul>\n          <li>Its longer edges, <var>A</var> and <var>B</var>, are parallel to the line perpendicular to the subpath at distance <var>position</var> along it.</li>\n          <li>The midpoint of <var>A</var> is at <var>start</var>.</li>\n          <li>The direction from the midpoint of <var>B</var> to the midpoint of <var>A</var> is the same as the direction of the subpath at distance <var>position</var> along it.</li>\n        </ul>"
            },
            {
              "html": "Otherwise, this is an ending cap.  Return a rectangle with side lengths <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeWidthProperty\">stroke-width</a> and <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeWidthProperty\">stroke-width</a> / 2 positioned such that:\n        <ul>\n          <li>Its longer edges, <var>A</var> and <var>B</var>, are parallel to the line perpendicular to the subpath at distance <var>position</var> along it.</li>\n          <li>The midpoint of <var>A</var> is at <var>end</var>.</li>\n          <li>The direction from the midpoint of <var>A</var> to the midpoint of <var>B</var> is the same as the direction of the subpath at distance <var>position</var> along it.</li>\n        </ul>"
            }
          ]
        }
      ]
    },
    {
      "name": "line join shape",
      "href": "https://svgwg.org/svg2-draft/painting.html#TermLineJoinShape",
      "html": "The <dfn id=\"TermLineJoinShape\" data-dfn-type=\"dfn\" data-export=\"\">line join shape</dfn> for a given segment of\na subpath is determined as follows:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>P</var> be the point at the end of the segment."
        },
        {
          "html": "If the unit tangent vector at the end of the segment and the unit tangent vector\n  at the start of the following segment are equal, then return an empty shape."
        },
        {
          "html": "Let <var>A</var> be the line parallel to the tangent at the end of the segment."
        },
        {
          "html": "Let <var>B</var> be the line parallel to the tangent at the start of the following segment."
        },
        {
          "html": "Let <var>A<sub>left</sub></var> and <var>A<sub>right</sub></var> be lines\n  parallel to <var>A</var> at a distance of <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeWidthProperty\">stroke-width</a> / 2 to the\n  left and to the right of <var>A</var> relative to the subpath direction, respectively."
        },
        {
          "html": "Let <var>B<sub>left</sub></var> and <var>B<sub>right</sub></var> be lines\n  parallel to <var>B</var> at a distance of <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeWidthProperty\">stroke-width</a> / 2 to the\n  left and to the right of <var>B</var>, relative to the subpath direction, respectively."
        },
        {
          "html": "Let <var>P</var><sub>1</sub>, <var>P</var><sub>2</sub> and\n    <var>P</var><sub>3</sub> be points determined as follows:",
          "rationale": "if",
          "steps": [
            {
              "html": "If the smaller angle between <var>A</var> and <var>B</var> is on the\n      right of these lines, considering the direction of the subpath, then\n      <var>P</var><sub>1</sub> and <var>P</var><sub>2</sub> are the points on\n      <var>A<sub>left</sub></var> and <var>B<sub>left</sub></var> closest to\n      <var>P</var>, and <var>P</var><sub>3</sub> is the intersection of\n      <var>A<sub>left</sub></var> and <var>B<sub>left</sub></var>."
            },
            {
              "html": "Otherwise, <var>P</var><sub>1</sub> and <var>P</var><sub>2</sub> are\n      the points on <var>A<sub>right</sub></var> and <var>B<sub>right</sub></var>\n      closest to <var>P</var>, and <var>P</var><sub>3</sub> is the intersection\n      of <var>A<sub>right</sub></var> and <var>B<sub>right</sub></var>."
            }
          ]
        },
        {
          "html": "Let <var>bevel</var> be the triangle formed from the three points\n  <var>P</var>, <var>P</var><sub>1</sub> and <var>P</var><sub>2</sub>."
        },
        {
          "html": "If <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeLinejoinProperty\">stroke-linejoin</a> is <span class=\"prop-value\">round</span>, then\n  return the union of <var>bevel</var> and a circular sector of diameter\n  <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeWidthProperty\">stroke-width</a>, centered on <var>P</var>, and which has\n  <var>P</var><sub>1</sub> and <var>P</var><sub>2</sub> as the two endpoints of\n  the arc."
        },
        {
          "html": "If <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeLinejoinProperty\">stroke-linejoin</a> is <span class=\"prop-value\">arcs</span>,\n    then find the circles that are tangent to the stroke edges at\n    <var>P</var><sub>1</sub> and <var>P</var><sub>2</sub> with the\n    same curvature as the edges at those points (see below). If both\n    curvatures are zero fall through to <span class=\"prop-value\">miter-clip</span>.\n    If either curvature is greater than 2/(stroke width), fallback to\n    <span class=\"prop-value\">round</span>.\n\n    Extend the stroke edges using these circles (or a line, in the case\n    of zero curvature).\n\n    If the two circles (or circle and line) do not intersect, adjust\n    the radii of the two circles by an equal amount (or just the circle\n    in case of a circle and line) until they do intersect (see below).\n\n    The line join\n    region is defined by the lines that connect <var>P</var>\n    with <var>P</var><sub>1</sub> and <var>P</var><sub>2</sub> and the\n    arcs defined by the circles (or arc and line) between the closest\n    intersection point to <var>P</var>, and <var>P</var><sub>1</sub>\n    and <var>P</var><sub>2</sub>.\n\n    Next calculate the <em>miter limit</em> as defined in\n    the <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeMiterlimitProperty\">stroke-miterlimit</a> section. Clip any part of the line\n    join region that extends past the miter limit. Return the\n    resulting region.\n\n    Note that the curvatures are calculated in user-space before any\n    transforms are applied."
        },
        {
          "html": "If <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeLinejoinProperty\">stroke-linejoin</a> is <span class=\"prop-value\">miter</span> or\n    <span class=\"prop-value\">miter-clip</span> then the line join\n    region is the union of <var>bevel</var> and the triangle formed\n    from the three points <var>P</var><sub>1</sub>,\n    <var>P</var><sub>2</sub> and <var>P</var><sub>3</sub>."
        },
        {
          "html": "Let <var>θ</var> be the angle between <var>A</var> and <var>B</var>.\n    If 1 / sin(<var>θ</var> / 2) ≤ <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeMiterlimitProperty\">stroke-miterlimit</a>, then return\n    the line join region."
        },
        {
          "html": "If <a class=\"property\" href=\"https://svgwg.org/svg2-draft/painting.html#StrokeLinejoinProperty\">stroke-linejoin</a> is <span class=\"prop-value\">miter-clip</span>,\n    then clip any part of the line join region that extends past the\n    miter limit and return this region."
        },
        {
          "html": "Return <var>bevel</var>."
        }
      ]
    },
    {
      "html": "An element which is the target of a user interface event may have\nparticular interaction behaviors, depending upon the type of element and\nwhether it has explicit associated interactions, such as scripted event\nlisteners, CSS pseudo-classes matches, or declarative animations\nwith event-based timing.  The algorithm and order for processing\nuser interface events for a given target element, after dispatching the\nDOM event, is as follows:",
      "rationale": "if",
      "steps": [
        {
          "html": "If an event handler registered on this element invokes the <code>preventDefault()</code>\n  DOM method, then no further processing for this element is performed, and the\n  event follows the <a href=\"https://www.w3.org/TR/uievents/#event-flow\">event dispatch and DOM event flow processing</a> ([<a href=\"https://svgwg.org/svg2-draft/refs.html#ref-uievents\">uievents</a>]);"
        },
        {
          "html": "If the element has an associated title or description, such as a <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#TitleElement\"><span>title</span></a>’</span>\n  element, and the user agent supports the display\n  of such information (e.g. via a tooltip or status-bar message), that information\n  should be displayed, as appropriate to the type of pointer event;"
        },
        {
          "html": "If the element matches any relevant\n  <a href=\"https://www.w3.org/TR/2011/REC-CSS2-20110607/selector.html#pseudo-class-selectors\">dynamic pseudo-class selectors</a>\n  appropriate to the type of pointer event, such as <code>:hover</code>,\n  <code>:active</code>, or <code>:focus</code> as described in\n  [<a href=\"https://svgwg.org/svg2-draft/refs.html#ref-css2\">CSS2</a>], section 5.11, then the relevant class\n  properties are applied;"
        },
        {
          "html": "If the element and the event type are associated with the activation\n  or cancelation of declarative animation though the use of\n  <a href=\"https://svgwg.org/specs/animations/#EventValueSyntax\">event-value</a> timing specifiers,\n  any corresponding instance times must be resolved, and any conseqential\n  actions of this instance time resolution (such as immediately starting\n  or stopping the animation) must be performed;"
        },
        {
          "html": "If the element is a hyperlink (e.g., it is a descendant element of an <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/linking.html#AElement\"><span>a</span></a>’</span>\n  element), and the pointer event is of a type that activates that hyperlink (e.g.\n  via a mouse click), and if the hyperlink traversal changes the context of the\n  content (e.g. opens a different document, or moves the pointer away from this\n  element by moving to another part of the same document), then no further\n  processing for this element is performed;"
        },
        {
          "html": "If the element is a <a href=\"https://svgwg.org/svg2-draft/text.html#TermTextContentElement\">text content element</a>, and the event type is one\n  which the user agent recognizes as part of a text-selection operation (e.g.,\n  a mouse click and drag, or a double-click), then the\n  <a href=\"https://svgwg.org/svg2-draft/text.html#TextSelection\">text selection</a> algorithm is performed;"
        },
        {
          "html": "If the event type is one which the user agent associates with the evocation\n  of special user-interface controls (e.g., a right-click or command-click\n  evoking a context menu), the user agent should evoke such user-agent-specific\n  behavior, such as presenting a context menu."
        }
      ]
    },
    {
      "html": "Presentation with an effective precision higher than\nsingle-precision may be obtained by taking advantage\nof the fact that at least double-precision floating point must be used\nwhen generating a CTM (See CTM generation processing in the\n<a href=\"https://svgwg.org/svg2-draft/conform.html#ConformingSVGViewers\">Conforming SVG Viewers</a> section).\nThe steps for generating content that takes advantage of this are:",
      "rationale": "split",
      "steps": [
        {
          "html": "Split content into tiles such that the number of significant digits\n  required to position and size each object within a tile is within the\n  range of single precision floats. Besides, in this description,\n  the coordinate system which the original content has originally will be called source space."
        },
        {
          "html": "Generate a coordinate transformation matrix per tile to transform from\n  source space to tile space, where tile space is a coordinate system with origin\n  <var>(0,0)</var> at the top left of the tile. Each element of the\n  transformation matrix must be within the range of single precision."
        },
        {
          "html": "Transform the contents of each tile from source space to tile space using\n  the generated coordinate transformation matrix. The result is that the parameters of each object can now be\n  expressed with significant digits within the range of single precision floats."
        },
        {
          "html": "For each tile, generate an inverse transformation matrix for the\n  conversion of tile space to source space. This is used as a <a class=\"property\" href=\"https://svgwg.org/svg2-draft/coords.html#TransformProperty\">transform</a> attribute of the element for the tile of the next step."
        },
        {
          "html": "Arrange each tile as a separate user coordinate system in SVG. For example,\n  the tiles may be expressed a <span class=\"element-name\">‘<a href=\"https://svgwg.org/svg2-draft/struct.html#GElement\"><span>g</span></a>’</span> elements\n  with an <a class=\"property\" href=\"https://svgwg.org/svg2-draft/coords.html#TransformProperty\">transform</a> attribute having the transformation matrix generated by the previous step.\n  And the split graphics generated by the third step will be placed as children of it."
        }
      ]
    }
  ]
}