{
  "spec": {
    "title": "CSS Values and Units Module Level 5",
    "url": "https://drafts.csswg.org/css-values-5/"
  },
  "properties": [
    {
      "name": "interpolate-size",
      "href": "https://drafts.csswg.org/css-values-5/#propdef-interpolate-size",
      "value": "numeric-only | allow-keywords",
      "initial": "numeric-only",
      "appliesTo": "all elements",
      "inherited": "yes",
      "percentages": "n/a",
      "computedValue": "as specified",
      "canonicalOrder": "per grammar",
      "animationType": "not animatable",
      "values": [
        {
          "name": "numeric-only",
          "prose": "An <intrinsic-size-keyword> cannot be interpolated.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-interpolate-size-numeric-only",
          "type": "value",
          "value": "numeric-only"
        },
        {
          "name": "allow-keywords",
          "prose": "Two values can also be interpolated if one of them is an <intrinsic-size-keyword> and the other is a <length-percentage>. This is done by treating the <intrinsic-size-keyword> keyword as though it is calc-size(keyword, size) and applying the rules in § 11.3 Interpolating calc-size(). In other cases, an <intrinsic-size-keyword> still cannot be interpolated.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-interpolate-size-allow-keywords",
          "type": "value",
          "value": "allow-keywords"
        }
      ],
      "styleDeclaration": [
        "interpolate-size",
        "interpolateSize"
      ]
    }
  ],
  "atrules": [],
  "selectors": [],
  "values": [
    {
      "name": "<boolean-expr>",
      "prose": "Several contexts (such as @media, @supports, if(), ...) specify conditions, and allow combining those conditions with boolean logic (and/or/not/grouping). Because they use the same non-trivial recursive syntax structure, the special <boolean-expr> production represents this pattern generically.",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-boolean-expr",
      "type": "type",
      "value": "not <boolean-expr-group> | <boolean-expr-group> [ [ and <boolean-expr-group> ]* | [ or <boolean-expr-group> ]* ]"
    },
    {
      "name": "<syntax>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-syntax",
      "type": "type",
      "value": "'*' | <syntax-component> [ <syntax-combinator> <syntax-component> ]* | <syntax-string>"
    },
    {
      "name": "<syntax-component>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-syntax-component",
      "type": "type",
      "value": "<syntax-single-component> <syntax-multiplier>? | '<' transform-list '>'"
    },
    {
      "name": "<syntax-single-component>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-syntax-single-component",
      "type": "type",
      "value": "'<' <syntax-type-name> '>' | <ident>"
    },
    {
      "name": "<syntax-type-name>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-syntax-type-name",
      "type": "type",
      "value": "angle | color | custom-ident | image | integer | length | length-percentage | number | percentage | resolution | string | time | url | transform-function"
    },
    {
      "name": "<syntax-combinator>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-syntax-combinator",
      "type": "type",
      "value": "'|'"
    },
    {
      "name": "<syntax-multiplier>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-syntax-multiplier",
      "type": "type",
      "value": "[ '#' | '+' ]"
    },
    {
      "name": "<syntax-string>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-syntax-string",
      "type": "type",
      "value": "<string>"
    },
    {
      "name": "<request-url-modifier>",
      "prose": "<request-url-modifier>s are <url-modifier>s that affect the <url>’s resource request by applying associated URL request modifier steps. See CSS Values 4 § 4.5.4 URL Processing Model.",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-request-url-modifier",
      "type": "type",
      "value": "<cross-origin-modifier> | <integrity-modifier> | <referrer-policy-modifier>",
      "values": [
        {
          "name": "<cross-origin-modifier>",
          "value": "cross-origin(anonymous | use-credentials)",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-request-url-modifier-cross-origin-modifier",
          "type": "type"
        },
        {
          "name": "cross-origin()",
          "prose": "<cross-origin-modifier> = cross-origin(anonymous | use-credentials)",
          "href": "https://drafts.csswg.org/css-values-5/#funcdef-request-url-modifier-cross-origin",
          "type": "function"
        },
        {
          "name": "anonymous",
          "prose": "<cross-origin-modifier> = cross-origin(anonymous | use-credentials)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-anonymous",
          "type": "value",
          "value": "anonymous"
        },
        {
          "name": "use-credentials",
          "prose": "<cross-origin-modifier> = cross-origin(anonymous | use-credentials)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-use-credentials",
          "type": "value",
          "value": "use-credentials"
        },
        {
          "name": "<integrity-modifier>",
          "value": "integrity(<string>)",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-request-url-modifier-integrity-modifier",
          "type": "type"
        },
        {
          "name": "integrity()",
          "prose": "<integrity-modifier> = integrity(<string>)",
          "href": "https://drafts.csswg.org/css-values-5/#funcdef-request-url-modifier-integrity",
          "type": "function"
        },
        {
          "name": "<referrer-policy-modifier>",
          "value": "referrer-policy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-request-url-modifier-referrer-policy-modifier",
          "type": "type"
        },
        {
          "name": "referrer-policy()",
          "prose": "<referrer-policy-modifier> = referrer-policy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#funcdef-request-url-modifier-referrer-policy",
          "type": "function"
        },
        {
          "name": "no-referrer",
          "prose": "<referrer-policy-modifier> = referrer-policy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-no-referrer",
          "type": "value",
          "value": "no-referrer"
        },
        {
          "name": "no-referrer-when-downgrade",
          "prose": "<referrer-policy-modifier> = referrer-policy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-no-referrer-when-downgrade",
          "type": "value",
          "value": "no-referrer-when-downgrade"
        },
        {
          "name": "same-origin",
          "prose": "<referrer-policy-modifier> = referrer-policy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-same-origin",
          "type": "value",
          "value": "same-origin"
        },
        {
          "name": "origin",
          "prose": "<referrer-policy-modifier> = referrer-policy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-origin",
          "type": "value",
          "value": "origin"
        },
        {
          "name": "strict-origin",
          "prose": "<referrer-policy-modifier> = referrer-policy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-strict-origin",
          "type": "value",
          "value": "strict-origin"
        },
        {
          "name": "origin-when-cross-origin",
          "prose": "<referrer-policy-modifier> = referrer-policy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-origin-when-cross-origin",
          "type": "value",
          "value": "origin-when-cross-origin"
        },
        {
          "name": "strict-origin-when-cross-origin",
          "prose": "<referrer-policy-modifier> = referrer-policy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-strict-origin-when-cross-origin",
          "type": "value",
          "value": "strict-origin-when-cross-origin"
        },
        {
          "name": "unsafe-url",
          "prose": "<referrer-policy-modifier> = referrer-policy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-unsafe-url",
          "type": "value",
          "value": "unsafe-url"
        }
      ]
    },
    {
      "name": "<position>",
      "prose": "The <position> value specifies the position of an alignment subject (e.g. a background image) inside an alignment container (e.g. its background positioning area) as a pair of offsets between the specified edges (defaulting to the left and top). Its syntax is:",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-position",
      "type": "type",
      "value": "<position-one> | <position-two> | <position-four>",
      "values": [
        {
          "name": "<length-percentage>",
          "prose": "A <length-percentage> value specifies the size of the offset between the specified edges of the alignment subject and alignment container. For example, for background-position: 2cm 1cm, the top left corner of the background image is placed 2cm to the right and 1cm below the top left corner of the background positioning area. A <percentage> for the horizontal offset is relative to (width of alignment container - width of alignment subject). A <percentage> for the vertical offset is relative to (height of alignment container - height of alignment subject). For example, with a value pair of 0% 0%, the upper left corner of the alignment subject is aligned with the upper left corner of the alignment container A value pair of 100% 100% places the lower right corner of the alignment subject in the lower right corner of the alignment container. With a value pair of 75% 50%, the point 75% across and 50% down the alignment subject is to be placed at the point 75% across and 50% down the alignment container. Diagram of the meaning of background-position: 75% 50%.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-position-length-percentage",
          "type": "value",
          "value": "<length-percentage>"
        },
        {
          "name": "top",
          "prose": "Offsets the top/left/right/bottom edges (respectively) of the alignment subject and alignment container by the specified amount (defaulting to 0%) in the corresponding axis.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-position-top",
          "type": "value",
          "value": "top"
        },
        {
          "name": "right",
          "prose": "Offsets the top/left/right/bottom edges (respectively) of the alignment subject and alignment container by the specified amount (defaulting to 0%) in the corresponding axis.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-position-right",
          "type": "value",
          "value": "right"
        },
        {
          "name": "bottom",
          "prose": "Offsets the top/left/right/bottom edges (respectively) of the alignment subject and alignment container by the specified amount (defaulting to 0%) in the corresponding axis.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-position-bottom",
          "type": "value",
          "value": "bottom"
        },
        {
          "name": "left",
          "prose": "Offsets the top/left/right/bottom edges (respectively) of the alignment subject and alignment container by the specified amount (defaulting to 0%) in the corresponding axis.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-position-left",
          "type": "value",
          "value": "left"
        },
        {
          "name": "y-start",
          "prose": "Computes the same as the physical edge keyword corresponding to the start/end side in the y/x axis.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-position-y-start",
          "type": "value",
          "value": "y-start"
        },
        {
          "name": "y-end",
          "prose": "Computes the same as the physical edge keyword corresponding to the start/end side in the y/x axis.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-position-y-end",
          "type": "value",
          "value": "y-end"
        },
        {
          "name": "x-start",
          "prose": "Computes the same as the physical edge keyword corresponding to the start/end side in the y/x axis.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-position-x-start",
          "type": "value",
          "value": "x-start"
        },
        {
          "name": "x-end",
          "prose": "Computes the same as the physical edge keyword corresponding to the start/end side in the y/x axis.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-position-x-end",
          "type": "value",
          "value": "x-end"
        },
        {
          "name": "block-start",
          "prose": "Computes the same as the physical edge keyword corresponding to the start/end side in the block/inline axis.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-position-block-start",
          "type": "value",
          "value": "block-start"
        },
        {
          "name": "block-end",
          "prose": "Computes the same as the physical edge keyword corresponding to the start/end side in the block/inline axis.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-position-block-end",
          "type": "value",
          "value": "block-end"
        },
        {
          "name": "inline-start",
          "prose": "Computes the same as the physical edge keyword corresponding to the start/end side in the block/inline axis.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-position-inline-start",
          "type": "value",
          "value": "inline-start"
        },
        {
          "name": "inline-end",
          "prose": "Computes the same as the physical edge keyword corresponding to the start/end side in the block/inline axis.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-position-inline-end",
          "type": "value",
          "value": "inline-end"
        },
        {
          "name": "center",
          "prose": "Computes to a 50% offset in the corresponding axis.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-position-center",
          "type": "value",
          "value": "center"
        }
      ]
    },
    {
      "name": "<position-one>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-position-one",
      "type": "type",
      "value": "[ left | center | right | top | bottom | x-start | x-end | y-start | y-end | block-start | block-end | inline-start | inline-end | <length-percentage> ]"
    },
    {
      "name": "<position-two>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-position-two",
      "type": "type",
      "value": "[ [ left | center | right | x-start | x-end ] && [ top | center | bottom | y-start | y-end ] | [ left | center | right | x-start | x-end | <length-percentage> ] [ top | center | bottom | y-start | y-end | <length-percentage> ] | [ block-start | center | block-end ] && [ inline-start | center | inline-end ] | [ start | center | end ]{2} ]"
    },
    {
      "name": "<position-four>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-position-four",
      "type": "type",
      "value": "[ [ [ left | right | x-start | x-end ] <length-percentage> ] && [ [ top | bottom | y-start | y-end ] <length-percentage> ] | [ [ block-start | block-end ] <length-percentage> ] && [ [ inline-start | inline-end ] <length-percentage> ] | [ [ start | end ] <length-percentage> ]{2} ]"
    },
    {
      "name": "progress()",
      "prose": "The progress() functional notation represents the proportional distance of a given value (the progress value) from one value (the progress start value) to another value (the progress end value), each represented as a calculation. It is a math function, and can be input into other calculations such as a math function or a mix notation.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-progress",
      "type": "function",
      "value": "progress(<calc-sum>, <calc-sum>, <calc-sum>)"
    },
    {
      "name": "calc-mix()",
      "prose": "The calc-mix() mix notation represents a weighted average of numeric or dimensional value. Like calc(), it is a math function, with the following syntactic form:",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-calc-mix",
      "type": "function",
      "value": "calc-mix( [ <calc-sum> <percentage [0,100]>? ]# )"
    },
    {
      "name": "transform-mix()",
      "prose": "The transform-mix() mix notation represents a weighted average of <transform-list>, with the following syntactic form:",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-transform-mix",
      "type": "function",
      "value": "transform-mix( [ <transform-list> && <percentage [0,100]> ]# )"
    },
    {
      "name": "<progress-source>",
      "prose": "The <progress-source> value type represents the interpolation progress in an interpolation notation. Its syntax is:",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-progress-source",
      "type": "type",
      "value": "<percentage> | <number> | <dimension> | <'animation-timeline'>",
      "values": [
        {
          "name": "<percentage>",
          "prose": "Represents the interpolation progress as a percentage, with 0% computing to zero and 100% computing to 1.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-progress-source-percentage",
          "type": "value",
          "value": "<percentage>"
        },
        {
          "name": "<number>",
          "prose": "Represents the interpolation progress as a number directly.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-progress-source-number",
          "type": "value",
          "value": "<number>"
        },
        {
          "name": "<dimension>",
          "prose": "Represents the interpolation progress as a dimension, which is converted to a number as specified in § 7.2 Validation and Normalization.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-progress-source-dimension",
          "type": "value",
          "value": "<dimension>"
        },
        {
          "name": "<'animation-timeline'>",
          "prose": "Represents the interpolation progress as the progress of the specified animation timeline. The values none and auto are invalid. [CSS-ANIMATIONS-2] [WEB-ANIMATIONS-2]",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-progress-source-animation-timeline",
          "type": "value",
          "value": "<'animation-timeline'>"
        }
      ]
    },
    {
      "name": "calc-interpolate()",
      "prose": "The calc-interpolate() interpolation notation represents an interpolated numeric or dimensional value. Like calc(), it is a math function, with the following syntax:",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-calc-interpolate",
      "type": "function",
      "value": "calc-interpolate( [ <progress-source> && [ by <easing-function> ]? && <easing-function>? ] , <input-position>{1,2} : <calc-sum> , [ <easing-function>? , <input-position>{1,2} : <calc-sum> ]#? )",
      "values": [
        {
          "name": "by",
          "prose": "The interpolation progress given by <progress-source> may be optionally modified by the <easing-function> specified after the by keyword. It applies the specified easing function to the “timeline” of progress as a whole by modifying the interpolation progress before it’s applied to the interpolation map, analogous to animation-easing.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-calc-interpolate-by",
          "type": "value",
          "value": "by"
        },
        {
          "name": "<input-position>",
          "value": "<percentage> | <number> | <dimension>",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-calc-interpolate-input-position",
          "type": "type"
        },
        {
          "name": "<output-value>",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-calc-interpolate-input-position",
          "type": "type"
        },
        {
          "name": "<easing-function>",
          "prose": "When appearing in the first argument, specifies the “default” easing function to be used between each stop. When appearing between stops, specifies the easing function to be used between the two surrounding stops, overriding any default provided by a global <easing-function> argument. (It is analogous to animation-timing-function.) If omitted, defaults to linear. The input progress value to this easing function is the segment interpolation progress—​how far the interpolation progress is between the input positions of the nearest stops preceding and following it. For example, in color-interpolate(20%, 0%: red, ease-in-out, 80%: green, 100%: blue), the 20% interpolation progress becomes a 25% segment interpolation progress, as 20% is 25% of the way between 0% and 80%, the surrounding input positions.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-calc-interpolate-easing-function",
          "type": "value",
          "value": "<easing-function>"
        },
        {
          "name": "<segment-options>",
          "prose": "When appearing in the first argument, provides any type-specific interpolation options that apply to every segment in the interpolation map. (For example, color-interpolate() allows <color-interpolation-method>.) When appearing between stops, provides any type-specific interpolation options that apply to the interpolation segment between the stops on either side of this argument, overriding any default provided by a corresponding global <segment-options> argument.",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-calc-interpolate-segment-options",
          "type": "type"
        }
      ]
    },
    {
      "name": "color-interpolate()",
      "prose": "The color-interpolate() interpolation notation represents an interpolated <color> value, with the following syntax:",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-color-interpolate",
      "type": "function",
      "value": "color-interpolate( [ <progress-source> && [ by <easing-function> ]? && <easing-function>? && <color-interpolation-method>? ] , <input-position>{1,2} : <color>, [ [ <easing-function> || <color-interpolation-method> ]?, <input-position>{1,2} : <color> ]#? )",
      "values": [
        {
          "name": "by",
          "prose": "The interpolation progress given by <progress-source> may be optionally modified by the <easing-function> specified after the by keyword. It applies the specified easing function to the “timeline” of progress as a whole by modifying the interpolation progress before it’s applied to the interpolation map, analogous to animation-easing.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-calc-interpolate-by",
          "type": "value",
          "value": "by"
        },
        {
          "name": "<input-position>",
          "value": "<percentage> | <number> | <dimension>",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-calc-interpolate-input-position",
          "type": "type"
        },
        {
          "name": "<output-value>",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-calc-interpolate-input-position",
          "type": "type"
        },
        {
          "name": "<easing-function>",
          "prose": "When appearing in the first argument, specifies the “default” easing function to be used between each stop. When appearing between stops, specifies the easing function to be used between the two surrounding stops, overriding any default provided by a global <easing-function> argument. (It is analogous to animation-timing-function.) If omitted, defaults to linear. The input progress value to this easing function is the segment interpolation progress—​how far the interpolation progress is between the input positions of the nearest stops preceding and following it. For example, in color-interpolate(20%, 0%: red, ease-in-out, 80%: green, 100%: blue), the 20% interpolation progress becomes a 25% segment interpolation progress, as 20% is 25% of the way between 0% and 80%, the surrounding input positions.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-calc-interpolate-easing-function",
          "type": "value",
          "value": "<easing-function>"
        },
        {
          "name": "<segment-options>",
          "prose": "When appearing in the first argument, provides any type-specific interpolation options that apply to every segment in the interpolation map. (For example, color-interpolate() allows <color-interpolation-method>.) When appearing between stops, provides any type-specific interpolation options that apply to the interpolation segment between the stops on either side of this argument, overriding any default provided by a corresponding global <segment-options> argument.",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-calc-interpolate-segment-options",
          "type": "type"
        }
      ]
    },
    {
      "name": "transform-interpolate()",
      "prose": "The transform-interpolate() interpolation notation represents an interpolated <transform-list>, with the following syntax:",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-transform-interpolate",
      "type": "function",
      "value": "transform-interpolate( [ <progress-source> && [ by <easing-function> ]? && <easing-function>? ], <input-position>{1,2} : <transform-list>, [ <easing-function>?, <input-position>{1,2} : <transform-list> ]#? )",
      "values": [
        {
          "name": "by",
          "prose": "The interpolation progress given by <progress-source> may be optionally modified by the <easing-function> specified after the by keyword. It applies the specified easing function to the “timeline” of progress as a whole by modifying the interpolation progress before it’s applied to the interpolation map, analogous to animation-easing.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-calc-interpolate-by",
          "type": "value",
          "value": "by"
        },
        {
          "name": "<input-position>",
          "value": "<percentage> | <number> | <dimension>",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-calc-interpolate-input-position",
          "type": "type"
        },
        {
          "name": "<output-value>",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-calc-interpolate-input-position",
          "type": "type"
        },
        {
          "name": "<easing-function>",
          "prose": "When appearing in the first argument, specifies the “default” easing function to be used between each stop. When appearing between stops, specifies the easing function to be used between the two surrounding stops, overriding any default provided by a global <easing-function> argument. (It is analogous to animation-timing-function.) If omitted, defaults to linear. The input progress value to this easing function is the segment interpolation progress—​how far the interpolation progress is between the input positions of the nearest stops preceding and following it. For example, in color-interpolate(20%, 0%: red, ease-in-out, 80%: green, 100%: blue), the 20% interpolation progress becomes a 25% segment interpolation progress, as 20% is 25% of the way between 0% and 80%, the surrounding input positions.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-calc-interpolate-easing-function",
          "type": "value",
          "value": "<easing-function>"
        },
        {
          "name": "<segment-options>",
          "prose": "When appearing in the first argument, provides any type-specific interpolation options that apply to every segment in the interpolation map. (For example, color-interpolate() allows <color-interpolation-method>.) When appearing between stops, provides any type-specific interpolation options that apply to the interpolation segment between the stops on either side of this argument, overriding any default provided by a corresponding global <segment-options> argument.",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-calc-interpolate-segment-options",
          "type": "type"
        }
      ]
    },
    {
      "name": "interpolate()",
      "prose": "The interpolate() interpolation notation represents the interpolation of entire property values, which supports two alternative syntax patterns:",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-interpolate",
      "type": "function",
      "value": "interpolate( [ <progress-source> && [ by <easing-function> ]? && <easing-function>? ] , <input-position>{1,2} : <whole-value>, [ <easing-function>?, <input-position>{1,2} : <whole-value> ]#? ) | interpolate( <progress-source> && [ by <easing-function> ]? && <easing-function>? of <keyframes-name> )",
      "values": [
        {
          "name": "by",
          "prose": "The interpolation progress given by <progress-source> may be optionally modified by the <easing-function> specified after the by keyword. It applies the specified easing function to the “timeline” of progress as a whole by modifying the interpolation progress before it’s applied to the interpolation map, analogous to animation-easing.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-calc-interpolate-by",
          "type": "value",
          "value": "by"
        },
        {
          "name": "<input-position>",
          "value": "<percentage> | <number> | <dimension>",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-calc-interpolate-input-position",
          "type": "type"
        },
        {
          "name": "<output-value>",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-calc-interpolate-input-position",
          "type": "type"
        },
        {
          "name": "<easing-function>",
          "prose": "When appearing in the first argument, specifies the “default” easing function to be used between each stop. When appearing between stops, specifies the easing function to be used between the two surrounding stops, overriding any default provided by a global <easing-function> argument. (It is analogous to animation-timing-function.) If omitted, defaults to linear. The input progress value to this easing function is the segment interpolation progress—​how far the interpolation progress is between the input positions of the nearest stops preceding and following it. For example, in color-interpolate(20%, 0%: red, ease-in-out, 80%: green, 100%: blue), the 20% interpolation progress becomes a 25% segment interpolation progress, as 20% is 25% of the way between 0% and 80%, the surrounding input positions.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-calc-interpolate-easing-function",
          "type": "value",
          "value": "<easing-function>"
        },
        {
          "name": "<segment-options>",
          "prose": "When appearing in the first argument, provides any type-specific interpolation options that apply to every segment in the interpolation map. (For example, color-interpolate() allows <color-interpolation-method>.) When appearing between stops, provides any type-specific interpolation options that apply to the interpolation segment between the stops on either side of this argument, overriding any default provided by a corresponding global <segment-options> argument.",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-calc-interpolate-segment-options",
          "type": "type"
        }
      ]
    },
    {
      "name": "<whole-value>",
      "href": "https://drafts.csswg.org/css-values-5/#whole-value",
      "type": "type"
    },
    {
      "name": "first-valid()",
      "prose": "The first-valid() functional notation inlines the fallback behavior intrinsic to parsing declarations. Unlike most notations, it can accept any valid or invalid syntax in its arguments, and represents the first value among its arguments that is supported (parsed as valid) by the UA as the whole value of the property it’s used in.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-first-valid",
      "type": "function",
      "value": "first-valid( <declaration-value># )"
    },
    {
      "name": "if()",
      "prose": "The if() function is an arbitrary substitution function that represents conditional values. Its argument consists of an ordered semi-colon–separated list of statements, each consisting of a condition followed by a colon followed by a value. An if() function represents the value corresponding to the first condition in its argument list to be true; if no condition matches, then the if() function represents an empty token stream.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-if",
      "type": "function",
      "value": "if( [ <if-branch> ; ]* <if-branch> ;? )",
      "values": [
        {
          "name": "else",
          "prose": "The else keyword represents a condition that is always true.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-if-else",
          "type": "value",
          "value": "else"
        }
      ]
    },
    {
      "name": "<if-branch>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-if-branch",
      "type": "type",
      "value": "<if-condition> : <declaration-value>?"
    },
    {
      "name": "<if-condition>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-if-condition",
      "type": "type",
      "value": "<boolean-expr[ <if-test> ]> | else"
    },
    {
      "name": "<if-test>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-if-test",
      "type": "type",
      "value": "supports( [ <ident> : <declaration-value> ] | <supports-condition> ) | media( <media-feature> | <media-condition> ) | style( <style-query> )"
    },
    {
      "name": "<if-args>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-if-args",
      "type": "type",
      "value": "if( [ <if-args-branch> ; ]* <if-args-branch> ;? )"
    },
    {
      "name": "<if-args-branch>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-if-args-branch",
      "type": "type",
      "value": "<declaration-value> : <declaration-value>?"
    },
    {
      "name": "toggle()",
      "prose": "The toggle() expression allows descendant elements to cycle over a list of values instead of inheriting the same value.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-toggle",
      "type": "function",
      "value": "toggle( <whole-value># )"
    },
    {
      "name": "inherit()",
      "prose": "Like the inherit keyword, the inherit() functional notation resolves to the computed value of a property on the parent. Rather than resolving to the value of the same property, however, it resolves to a sequence of component values representing the computed value of the property specified as its first argument. Its second argument, if present, is used as a fallback in case the first argument resolves to the guaranteed-invalid value.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-inherit",
      "type": "function",
      "value": "inherit( <custom-property-name>, <declaration-value>? )"
    },
    {
      "name": "<inherit-args>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-inherit-args",
      "type": "type",
      "value": "inherit( <declaration-value>, <declaration-value>? )"
    },
    {
      "name": "attr()",
      "prose": "The attr() function substitutes the value of an attribute on an element into a property, similar to how the var() function substitutes a custom property value into a function.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-attr",
      "type": "function",
      "value": "attr( <attr-name> <attr-type>? , <declaration-value>?)",
      "values": [
        {
          "name": "type()",
          "value": "type( <syntax> )",
          "href": "https://drafts.csswg.org/css-values-5/#funcdef-attr-type",
          "type": "function"
        }
      ]
    },
    {
      "name": "<attr-name>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-attr-name",
      "type": "type",
      "value": "[ <ident-token>? '|' ]? <ident-token>"
    },
    {
      "name": "<attr-type>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-attr-type",
      "type": "type",
      "value": "type( <syntax> ) | raw-string | <attr-unit>"
    },
    {
      "name": "<attr-args>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-attr-args",
      "type": "type",
      "value": "attr( <declaration-value>, <declaration-value>? )"
    },
    {
      "name": "<attr-unit>",
      "prose": "The <attr-unit> production matches any identifier that is an ASCII case-insensitive match for the name of a CSS dimension unit, such as px, or the <delim-token> %. It is not expanded literally here, as the set of units expands over time.",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-attr-unit",
      "type": "type"
    },
    {
      "name": "ident()",
      "prose": "The ident() function represents an <ident>, and can be used to manually construct <custom-ident> values from several parts.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-ident",
      "type": "function",
      "value": "ident( <ident-arg>+ )"
    },
    {
      "name": "<ident-arg>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-ident-arg",
      "type": "type",
      "value": "<string> | <integer> | <ident>"
    },
    {
      "name": "random()",
      "prose": "The random() function is a math function that represents a random value between a minimum and maximum value, drawn from a uniform distribution, optionally limiting the possible values to a step between those limits:",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-random",
      "type": "function",
      "value": "random( <random-value-sharing>? , <calc-sum>, <calc-sum>, <calc-sum>? )"
    },
    {
      "name": "<random-value-sharing>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-random-value-sharing",
      "type": "type",
      "value": "[ [ auto | <dashed-ident> ] || element-shared ] | fixed <number [0,1]>",
      "values": [
        {
          "name": "auto",
          "prose": "Each random function in an element’s styles will use a distinct random base value. (But see the note below for a small wrinkle about this.) If neither auto nor <dashed-ident> are specified, it behaves as auto.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-random-auto",
          "type": "value",
          "value": "auto"
        },
        {
          "name": "<dashed-ident>",
          "prose": "Each random function in an element’s styles with the same <dashed-ident> will share the same random base value; ones with different <dashed-ident>s will use distinct random base values.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-random-dashed-ident",
          "type": "value",
          "value": "<dashed-ident>"
        },
        {
          "name": "element-shared",
          "prose": "If element-shared is omitted, random functions on different elements will use distinct random base values. If specified, random functions on different elements will share the same random base value if they have the same <dashed-ident> (if specified) or if they’re used in the same style in the same way (if not). (Again, see the note below for a small wrinkle about this.)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-random-element-shared",
          "type": "value",
          "value": "element-shared"
        },
        {
          "name": "<number>",
          "prose": "If fixed <number> is specified, the <number> is used as the random function’s random base value, rather than allowing the UA to generate a random base value and controlling how it’s shared. While 1 is technically allowed as a valid value (because CSS grammars can only express closed ranges), the random base value is clamped to the highest representable value less than 1, so random base values remain in the half-open range `[0, 1)`.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-random-fixed",
          "type": "value",
          "value": "<number>"
        }
      ]
    },
    {
      "name": "random-item()",
      "prose": "The random-item() function resolves to a random item from among its list of items.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-random-item",
      "type": "function",
      "value": "random-item( <random-value-sharing> , [ <declaration-value>? ]# )"
    },
    {
      "name": "<random-item-args>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-random-item-args",
      "type": "type",
      "value": "random-item( <declaration-value>, [ <declaration-value>? ]# )"
    },
    {
      "name": "sibling-count()",
      "prose": "The sibling-count() functional notation represents, as an <integer>, the total number of child elements in the parent of the element on which the notation is used.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-sibling-count",
      "type": "function"
    },
    {
      "name": "sibling-index()",
      "prose": "The sibling-index() functional notation represents, as an <integer>, the index of the element on which the notation is used among its inclusive siblings. Like :nth-child(), sibling-index() is 1-indexed.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-sibling-index",
      "type": "function"
    },
    {
      "name": "calc-size()",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-calc-size",
      "type": "function",
      "value": "calc-size( <calc-size-basis>, <calc-sum> )",
      "values": [
        {
          "name": "size",
          "prose": "Within the calc-size calculation, if the calc-size basis is not any, the keyword size is allowed. This keyword is a <length>, and resolves at used value time.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-calc-size-size",
          "type": "value",
          "value": "size"
        },
        {
          "name": "any",
          "prose": "(If the calc-size basis is any, the calc-size() is a definite length, equal to its calc-size calculation.)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-calc-size-any",
          "type": "value",
          "value": "any"
        }
      ]
    },
    {
      "name": "<calc-size-basis>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-calc-size-basis",
      "type": "type",
      "value": "[ <size-keyword> | <calc-size()> | any | <calc-sum> ]"
    },
    {
      "name": "<size-keyword>",
      "prose": "The <size-keyword> production matches any sizing keywords allowed in the context. For example, in width, it matches auto, min-content, stretch, etc.",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-size-keyword",
      "type": "type"
    }
  ],
  "warnings": [
    {
      "msg": "Missing definition",
      "name": "<boolean-expr-group>",
      "value": "<test> | ( <boolean-expr[ <test> ]> ) | <general-enclosed>"
    },
    {
      "msg": "Missing definition",
      "name": "*mix()",
      "value": "*mix( options? , [ value && <percentage>? ]# )"
    },
    {
      "msg": "Missing definition",
      "name": "*interpolate()",
      "value": "*interpolate( [ progress && global-options? ], stop, [ between-options? , stop ]# )"
    },
    {
      "msg": "Missing definition",
      "name": "interpolate-function()",
      "value": "interpolate-function( [ <progress-source> && [ by <easing-function> ]? && <easing-function>? && <segment-options>? ] , <input-position>{1,2} : <output-value> , [ [ <easing-function> || <segment-options> ]? , <input-position>{1,2} : <output-value> ]#? )"
    }
  ]
}
