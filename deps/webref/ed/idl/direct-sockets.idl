// GENERATED CONTENT - DO NOT EDIT
// Content was automatically extracted by Reffy into webref
// (https://github.com/w3c/webref)
// Source: Direct Sockets API (https://wicg.github.io/direct-sockets/)

[
  Exposed=(Window,DedicatedWorker),
  SecureContext,
  IsolatedContext
]
interface TCPSocket {
  constructor(DOMString remoteAddress,
              unsigned short remotePort,
              optional TCPSocketOptions options = {});

  readonly attribute Promise<TCPSocketOpenInfo> opened;
  readonly attribute Promise<undefined> closed;

  Promise<undefined> close();
};

enum SocketDnsQueryType {
  "ipv4",
  "ipv6"
};

dictionary TCPSocketOptions {
  [EnforceRange] unsigned long sendBufferSize;
  [EnforceRange] unsigned long receiveBufferSize;

  boolean noDelay = false;
  [EnforceRange] unsigned long keepAliveDelay;

  SocketDnsQueryType dnsQueryType;
};

dictionary TCPSocketOpenInfo {
  ReadableStream readable;
  WritableStream writable;

  DOMString remoteAddress;
  unsigned short remotePort;

  DOMString localAddress;
  unsigned short localPort;
};

[
  Exposed=(Window,DedicatedWorker),
  SecureContext,
  IsolatedContext
]
interface UDPSocket {
  constructor(optional UDPSocketOptions options = {});

  readonly attribute Promise<UDPSocketOpenInfo> opened;
  readonly attribute Promise<undefined> closed;

  Promise<undefined> close();
};

dictionary UDPSocketOptions {
  DOMString remoteAddress;
  [EnforceRange] unsigned short remotePort;

  DOMString localAddress;
  [EnforceRange] unsigned short localPort;

  [EnforceRange] unsigned long sendBufferSize;
  [EnforceRange] unsigned long receiveBufferSize;

  SocketDnsQueryType dnsQueryType;
  boolean ipv6Only;
};

dictionary UDPMessage {
  BufferSource data;
  DOMString remoteAddress;
  unsigned short remotePort;
  SocketDnsQueryType dnsQueryType;
};

dictionary UDPSocketOpenInfo {
  ReadableStream readable;
  WritableStream writable;

  DOMString remoteAddress;
  unsigned short remotePort;

  DOMString localAddress;
  unsigned short localPort;
};

[
  Exposed=(Window,DedicatedWorker),
  SecureContext,
  IsolatedContext
]
interface TCPServerSocket {
  constructor(DOMString localAddress,
              optional TCPServerSocketOptions options = {});

  readonly attribute Promise<TCPServerSocketOpenInfo> opened;
  readonly attribute Promise<undefined> closed;

  Promise<undefined> close();
};

dictionary TCPServerSocketOptions {
  [EnforceRange] unsigned short localPort;
  [EnforceRange] unsigned long backlog;

  boolean ipv6Only;
};

dictionary TCPServerSocketOpenInfo {
  ReadableStream readable;

  DOMString localAddress;
  unsigned short localPort;
};
