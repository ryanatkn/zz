#!/usr/bin/env bash

# zz - CLI Utilities
# Build wrapper script that auto-builds before running

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

# Function to print colored output
print_color() {
    echo -e "${2}${1}${NC}"
}

# Function to build the project
build_project() {
    print_color "üî® Building zz..." "$YELLOW"
    if zig build -Doptimize=ReleaseFast; then
        print_color "‚úÖ Build successful" "$GREEN"
    else
        print_color "‚ùå Build failed" "$RED"
        exit 1
    fi
}

# Function to run the app
run_app() {
    exec ./zig-out/bin/zz "$@"
}

# Main execution flow
main() {
    # Check if zig is installed
    if ! command -v zig &> /dev/null; then
        print_color "‚ùå Error: zig is not installed or not in PATH" "$RED"
        print_color "Please install Zig 0.14.1 or newer" "$YELLOW"
        exit 1
    fi

    # Parse special build flags
    if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
        echo "zz - CLI Utilities"
        echo ""
        echo "Usage: ./zz [command] [args]"
        echo ""
        echo "Commands:"
        echo "  tree [dir] [depth]  Show directory tree"
        echo "  help               Show available commands"
        echo ""
        echo "Build options:"
        echo "  --debug            Build with debug symbols"
        echo "  --no-build         Skip build step"
        echo ""
        echo "Examples:"
        echo "  ./zz                    # Show tree of current directory"
        echo "  ./zz tree src/ 3        # Show src/ tree 3 levels deep"
        echo "  ./zz --no-build tree    # Run without rebuilding"
        exit 0
    fi

    # Handle special flags
    local skip_build=false
    local debug_build=false
    local app_args=()

    for arg in "$@"; do
        case $arg in
            --no-build)
                skip_build=true
                ;;
            --debug)
                debug_build=true
                ;;
            *)
                app_args+=("$arg")
                ;;
        esac
    done

    # Build the project (unless skipped)
    if [ "$skip_build" = false ]; then
        if [ "$debug_build" = true ]; then
            print_color "üî® Building zz (debug mode)..." "$YELLOW"
            if zig build -Doptimize=Debug; then
                print_color "‚úÖ Debug build successful" "$GREEN"
            else
                print_color "‚ùå Build failed" "$RED"
                exit 1
            fi
        else
            build_project
        fi
    fi

    # Run the app with remaining arguments
    run_app "${app_args[@]}"
}

# Run main function with all arguments
main "$@"