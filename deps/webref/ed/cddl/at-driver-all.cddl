; GENERATED CONTENT - DO NOT EDIT
; Content was automatically extracted by Reffy into webref
; (https://github.com/w3c/webref)
; Source: AT Driver (https://w3c.github.io/at-driver/)

Command = {
  id: uint,
  CommandData,
  Extensible,
}

CommandData = (
  SessionCommand //
  SettingsCommand //
  InteractionCommand
)

EmptyParams = { Extensible }

Message = (
  CommandResponse //
  ErrorResponse //
  Event
)

CommandResponse = {
  id: uint,
  result: ResultData,
  Extensible,
}

ErrorResponse = {
  id: uint / null,
  error: "unknown error" / "unknown command" / "invalid argument" / "session not created",
  message: text,
  ?stacktrace: text,
  Extensible,
}

ResultData = (
  EmptyResult /
  SessionResult /
  SettingsResult
)

EmptyResult = {}

Event = {
  EventData,
  Extensible,
}

EventData = (
  InteractionEvent
)

Extensible = {
  *text => any
}

SessionCommand = (SessionNewCommand)

SessionResult = (SessionNewResult)

CapabilitiesRequest = {
  ?atName: text,
  ?atVersion: text,
  ?platformName: text,
  Extensible,
}

SessionNewCommand = {
  method: "session.new",
  params: {capabilities: CapabilitiesRequestParameters},
}

CapabilitiesRequestParameters = {
  ?alwaysMatch: CapabilitiesRequest,
}

SessionNewResult = {
  sessionId: text,
  capabilities: {
    atName: text,
    atVersion: text,
    platformName: text,
    Extensible,
  }
}

SettingsCommand = {
  SettingsSetSettingsCommand //
  SettingsGetSettingsCommand //
  SettingsGetSupportedSettingsCommand
}

SettingsResult = {
  SettingsGetSettingsResult
}

SettingsGetSettingsResult = {
  settings: [1* SettingsGetSettingsResultItem ],
}

SettingsGetSettingsResultItem = {
  name: text,
  value: any,
  Extensible,
}

SettingsSetSettingsCommand = {
  method: "settings.setSettings",
  params: SettingsSetSettingsParameters
}

SettingsSetSettingsParameters = {
  settings: [1* SettingsSetSettingsParametersItem ],
}

SettingsSetSettingsParametersItem = {
  name: text,
  value: any,
  Extensible,
}

SettingsGetSettingsCommand = {
  method: "settings.getSettings",
  params: SettingsGetSettingsParameters
}

SettingsGetSettingsParameters = {
  settings: [1* SettingsGetSettingsParametersItem ],
}

SettingsGetSettingsParametersItem = {
  name: text,
  Extensible,
}

SettingsGetSupportedSettingsCommand = {
  method: "settings.getSupportedSettings",
  params: EmptyParams
}

InteractionCommand = (InteractionUserIntentCommand)

InteractionEvent = (InteractionCapturedOutputEvent)

InteractionCapturedOutputParameters = {
  data: text,
  Extensible,
}

InteractionUserIntentCommand = {
  method: "interaction.userIntent",
  params: InteractionUserIntentParameters
}

InteractionUserIntentParameters = (
  PressKeysIntentParameters /
  ExtensionIntentParameters
)

PressKeysIntentParameters = {
  "name" => "pressKeys",
  "keys" => KeyCombination,
}

KeyCombination = [
  1* text
]

ExtensionIntentParameters = {
  "name" => text,
  Extensible,
}

InteractionCapturedOutputEvent = {
  method: "interaction.capturedOutput",
  params: InteractionCapturedOutputParameters
}

Command = {
  id: uint,
  CommandData,
  Extensible,
}

CommandData = (
  SessionCommand //
  SettingsCommand //
  InteractionCommand
)

EmptyParams = { Extensible }

Extensible = {
  *text => any
}

SessionCommand = (SessionNewCommand)

CapabilitiesRequest = {
  ?atName: text,
  ?atVersion: text,
  ?platformName: text,
  Extensible,
}

SessionNewCommand = {
  method: "session.new",
  params: {capabilities: CapabilitiesRequestParameters},
}

CapabilitiesRequestParameters = {
  ?alwaysMatch: CapabilitiesRequest,
}

SettingsCommand = {
  SettingsSetSettingsCommand //
  SettingsGetSettingsCommand //
  SettingsGetSupportedSettingsCommand
}

SettingsSetSettingsCommand = {
  method: "settings.setSettings",
  params: SettingsSetSettingsParameters
}

SettingsSetSettingsParameters = {
  settings: [1* SettingsSetSettingsParametersItem ],
}

SettingsSetSettingsParametersItem = {
  name: text,
  value: any,
  Extensible,
}

SettingsGetSettingsCommand = {
  method: "settings.getSettings",
  params: SettingsGetSettingsParameters
}

SettingsGetSettingsParameters = {
  settings: [1* SettingsGetSettingsParametersItem ],
}

SettingsGetSettingsParametersItem = {
  name: text,
  Extensible,
}

SettingsGetSupportedSettingsCommand = {
  method: "settings.getSupportedSettings",
  params: EmptyParams
}

InteractionCommand = (InteractionUserIntentCommand)

InteractionUserIntentCommand = {
  method: "interaction.userIntent",
  params: InteractionUserIntentParameters
}

InteractionUserIntentParameters = (
  PressKeysIntentParameters /
  ExtensionIntentParameters
)

PressKeysIntentParameters = {
  "name" => "pressKeys",
  "keys" => KeyCombination,
}

KeyCombination = [
  1* text
]

ExtensionIntentParameters = {
  "name" => text,
  Extensible,
}

Message = (
  CommandResponse //
  ErrorResponse //
  Event
)

CommandResponse = {
  id: uint,
  result: ResultData,
  Extensible,
}

ErrorResponse = {
  id: uint / null,
  error: "unknown error" / "unknown command" / "invalid argument" / "session not created",
  message: text,
  ?stacktrace: text,
  Extensible,
}

ResultData = (
  EmptyResult /
  SessionResult /
  SettingsResult
)

EmptyResult = {}

Event = {
  EventData,
  Extensible,
}

EventData = (
  InteractionEvent
)

Extensible = {
  *text => any
}

SessionResult = (SessionNewResult)

CapabilitiesRequest = {
  ?atName: text,
  ?atVersion: text,
  ?platformName: text,
  Extensible,
}

SessionNewResult = {
  sessionId: text,
  capabilities: {
    atName: text,
    atVersion: text,
    platformName: text,
    Extensible,
  }
}

SettingsResult = {
  SettingsGetSettingsResult
}

SettingsGetSettingsResult = {
  settings: [1* SettingsGetSettingsResultItem ],
}

SettingsGetSettingsResultItem = {
  name: text,
  value: any,
  Extensible,
}

InteractionEvent = (InteractionCapturedOutputEvent)

InteractionCapturedOutputParameters = {
  data: text,
  Extensible,
}

InteractionCapturedOutputEvent = {
  method: "interaction.capturedOutput",
  params: InteractionCapturedOutputParameters
}
