{
  "spec": {
    "title": "Streams Standard",
    "url": "https://streams.spec.whatwg.org/"
  },
  "algorithms": [
    {
      "name": "ReadableStream/ReadableStream(underlyingSource, strategy)",
      "href": "https://streams.spec.whatwg.org/#rs-constructor",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"constructor\" data-export=\"\" data-lt=\"ReadableStream(underlyingSource, strategy)|constructor(underlyingSource, strategy)|ReadableStream(underlyingSource)|constructor(underlyingSource)|ReadableStream()|constructor()\" id=\"rs-constructor\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>new ReadableStream(<var>underlyingSource</var>, <var>strategy</var>)</code></dfn> constructor steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>underlyingSource</var> is missing, set it to null.</p>"
        },
        {
          "html": "<p>Let <var>underlyingSourceDict</var> be <var>underlyingSource</var>, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-convert-ecmascript-to-idl-value\" id=\"ref-for-dfn-convert-ecmascript-to-idl-value\">converted to an IDL value</a> of type\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dictdef-underlyingsource\" id=\"ref-for-dictdef-underlyingsource\">UnderlyingSource</a></code>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#initialize-readable-stream\" id=\"ref-for-initialize-readable-stream\">InitializeReadableStream</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this\">this</a>).</p>"
        },
        {
          "html": "If <var>underlyingSourceDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsource-type\" id=\"ref-for-dom-underlyingsource-type③\">type</a></code>\"] is \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablestreamtype-bytes\" id=\"ref-for-dom-readablestreamtype-bytes③\">bytes</a></code>\":",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>strategy</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-queuingstrategy-size\" id=\"ref-for-dom-queuingstrategy-size①\">size</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists\">exists</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-rangeerror\" id=\"ref-for-exceptiondef-rangeerror\">RangeError</a></code> exception.</p>"
            },
            {
              "html": "<p>Let <var>highWaterMark</var> be ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#validate-and-normalize-high-water-mark\" id=\"ref-for-validate-and-normalize-high-water-mark\">ExtractHighWaterMark</a>(<var>strategy</var>, 0).</p>"
            },
            {
              "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-readable-byte-stream-controller-from-underlying-source\" id=\"ref-for-set-up-readable-byte-stream-controller-from-underlying-source\">SetUpReadableByteStreamControllerFromUnderlyingSource</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①\">this</a>,\n  <var>underlyingSource</var>, <var>underlyingSourceDict</var>, <var>highWaterMark</var>).</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>underlyingSourceDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsource-type\" id=\"ref-for-dom-underlyingsource-type④\">type</a></code>\"] does not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①\">exist</a>.</p>"
            },
            {
              "html": "<p>Let <var>sizeAlgorithm</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#make-size-algorithm-from-size-function\" id=\"ref-for-make-size-algorithm-from-size-function\">ExtractSizeAlgorithm</a>(<var>strategy</var>).</p>"
            },
            {
              "html": "<p>Let <var>highWaterMark</var> be ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#validate-and-normalize-high-water-mark\" id=\"ref-for-validate-and-normalize-high-water-mark①\">ExtractHighWaterMark</a>(<var>strategy</var>, 1).</p>"
            },
            {
              "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-readable-stream-default-controller-from-underlying-source\" id=\"ref-for-set-up-readable-stream-default-controller-from-underlying-source\">SetUpReadableStreamDefaultControllerFromUnderlyingSource</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this②\">this</a>,\n  <var>underlyingSource</var>, <var>underlyingSourceDict</var>, <var>highWaterMark</var>, <var>sizeAlgorithm</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableStream/from(asyncIterable)",
      "href": "https://streams.spec.whatwg.org/#rs-from",
      "html": "The static <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"method\" data-export=\"\" id=\"rs-from\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>from(<var>asyncIterable</var>)</code></dfn> method steps\n are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-from-iterable\" id=\"ref-for-readable-stream-from-iterable\">ReadableStreamFromIterable</a>(<var>asyncIterable</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStream/locked",
      "href": "https://streams.spec.whatwg.org/#rs-locked",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"attribute\" data-export=\"\" id=\"rs-locked\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>locked</code></dfn> getter steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-readable-stream-locked\" id=\"ref-for-is-readable-stream-locked\">IsReadableStreamLocked</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this③\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStream/cancel(reason)",
      "href": "https://streams.spec.whatwg.org/#rs-cancel",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"cancel(reason)|cancel()\" id=\"rs-cancel\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>cancel(<var>reason</var>)</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-readable-stream-locked\" id=\"ref-for-is-readable-stream-locked①\">IsReadableStreamLocked</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this④\">this</a>) is true, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with\">a promise rejected with</a> a\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-cancel\" id=\"ref-for-readable-stream-cancel\">ReadableStreamCancel</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑤\">this</a>, <var>reason</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStream/getReader(options)",
      "href": "https://streams.spec.whatwg.org/#rs-get-reader",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"getReader(options)|getReader()\" id=\"rs-get-reader\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>getReader(<var>options</var>)</code></dfn> method steps\n are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>options</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablestreamgetreaderoptions-mode\" id=\"ref-for-dom-readablestreamgetreaderoptions-mode①\">mode</a></code>\"] does not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists②\">exist</a>, return ?\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#acquire-readable-stream-reader\" id=\"ref-for-acquire-readable-stream-reader\">AcquireReadableStreamDefaultReader</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑥\">this</a>).</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>options</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablestreamgetreaderoptions-mode\" id=\"ref-for-dom-readablestreamgetreaderoptions-mode②\">mode</a></code>\"] is\n  \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablestreamreadermode-byob\" id=\"ref-for-dom-readablestreamreadermode-byob①\">byob</a></code>\".</p>"
        },
        {
          "html": "<p>Return ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#acquire-readable-stream-byob-reader\" id=\"ref-for-acquire-readable-stream-byob-reader\">AcquireReadableStreamBYOBReader</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑦\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStream/pipeThrough(transform, options)",
      "href": "https://streams.spec.whatwg.org/#rs-pipe-through",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"pipeThrough(transform, options)|pipeThrough(transform)\" id=\"rs-pipe-through\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>pipeThrough(<var>transform</var>, <var>options</var>)</code></dfn>\n method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-readable-stream-locked\" id=\"ref-for-is-readable-stream-locked②\">IsReadableStreamLocked</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑧\">this</a>) is true, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror②\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-writable-stream-locked\" id=\"ref-for-is-writable-stream-locked\">IsWritableStreamLocked</a>(<var>transform</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablewritablepair-writable\" id=\"ref-for-dom-readablewritablepair-writable①\">writable</a></code>\"]) is true, throw\n  a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror③\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Let <var>signal</var> be <var>options</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-streampipeoptions-signal\" id=\"ref-for-dom-streampipeoptions-signal③\">signal</a></code>\"] if it <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists③\">exists</a>, or undefined\n  otherwise.</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-pipe-to\" id=\"ref-for-readable-stream-pipe-to\">ReadableStreamPipeTo</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑨\">this</a>,\n  <var>transform</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablewritablepair-writable\" id=\"ref-for-dom-readablewritablepair-writable②\">writable</a></code>\"],\n  <var>options</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-streampipeoptions-preventclose\" id=\"ref-for-dom-streampipeoptions-preventclose③\">preventClose</a></code>\"],\n  <var>options</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-streampipeoptions-preventabort\" id=\"ref-for-dom-streampipeoptions-preventabort④\">preventAbort</a></code>\"],\n  <var>options</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-streampipeoptions-preventcancel\" id=\"ref-for-dom-streampipeoptions-preventcancel⑤\">preventCancel</a></code>\"], <var>signal</var>).</p>"
        },
        {
          "html": "<p>Set <var>promise</var>.[[PromiseIsHandled]] to true.</p>"
        },
        {
          "html": "<p>Return <var>transform</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablewritablepair-readable\" id=\"ref-for-dom-readablewritablepair-readable①\">readable</a></code>\"].</p>"
        }
      ]
    },
    {
      "name": "ReadableStream/pipeTo(destination, options)",
      "href": "https://streams.spec.whatwg.org/#rs-pipe-to",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"pipeTo(destination, options)|pipeTo(destination)\" id=\"rs-pipe-to\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>pipeTo(<var>destination</var>, <var>options</var>)</code></dfn>\n method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-readable-stream-locked\" id=\"ref-for-is-readable-stream-locked③\">IsReadableStreamLocked</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①⓪\">this</a>) is true, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with①\">a promise rejected with</a> a\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror④\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-writable-stream-locked\" id=\"ref-for-is-writable-stream-locked①\">IsWritableStreamLocked</a>(<var>destination</var>) is true, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with②\">a promise rejected with</a> a\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑤\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Let <var>signal</var> be <var>options</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-streampipeoptions-signal\" id=\"ref-for-dom-streampipeoptions-signal④\">signal</a></code>\"] if it <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists④\">exists</a>, or undefined\n  otherwise.</p>"
        },
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-pipe-to\" id=\"ref-for-readable-stream-pipe-to①\">ReadableStreamPipeTo</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①①\">this</a>, <var>destination</var>,\n  <var>options</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-streampipeoptions-preventclose\" id=\"ref-for-dom-streampipeoptions-preventclose④\">preventClose</a></code>\"],\n  <var>options</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-streampipeoptions-preventabort\" id=\"ref-for-dom-streampipeoptions-preventabort⑤\">preventAbort</a></code>\"],\n  <var>options</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-streampipeoptions-preventcancel\" id=\"ref-for-dom-streampipeoptions-preventcancel⑥\">preventCancel</a></code>\"], <var>signal</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStream/tee()",
      "href": "https://streams.spec.whatwg.org/#rs-tee",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"method\" data-export=\"\" id=\"rs-tee\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>tee()</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-tee\" id=\"ref-for-readable-stream-tee\">ReadableStreamTee</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①②\">this</a>, false).</p>"
        }
      ]
    },
    {
      "name": "ReadableStream asynchronous iterator initialization steps",
      "href": "https://streams.spec.whatwg.org/#rs-get-iterator",
      "html": "The <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#asynchronous-iterator-initialization-steps\" id=\"ref-for-asynchronous-iterator-initialization-steps\">asynchronous iterator initialization steps</a> for a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream①⑦\">ReadableStream</a></code>, given <var>stream</var>,\n <var>iterator</var>, and <var>args</var>, are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>reader</var> be ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#acquire-readable-stream-reader\" id=\"ref-for-acquire-readable-stream-reader①\">AcquireReadableStreamDefaultReader</a>(<var>stream</var>).</p>"
        },
        {
          "html": "<p>Set <var>iterator</var>’s <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream async iterator\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"readablestream-async-iterator-reader\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">reader</dfn> to <var>reader</var>.</p>"
        },
        {
          "html": "<p>Let <var>preventCancel</var> be <var>args</var>[0][\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablestreamiteratoroptions-preventcancel\" id=\"ref-for-dom-readablestreamiteratoroptions-preventcancel②\">preventCancel</a></code>\"].</p>"
        },
        {
          "html": "<p>Set <var>iterator</var>’s <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream async iterator\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"readablestream-async-iterator-prevent-cancel\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">prevent cancel</dfn> to\n  <var>preventCancel</var>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStream get the next iteration result",
      "href": "https://streams.spec.whatwg.org/#rs-asynciterator-prototype-next",
      "html": "The <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-get-the-next-iteration-result\" id=\"ref-for-dfn-get-the-next-iteration-result\">get the next iteration result</a> steps for a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream①⑧\">ReadableStream</a></code>, given <var>stream</var> and <var>iterator</var>, are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>reader</var> be <var>iterator</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-async-iterator-reader\" id=\"ref-for-readablestream-async-iterator-reader\">reader</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-stream\" id=\"ref-for-readablestreamgenericreader-stream\">[[stream]]</a> is not undefined.</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise\">a new promise</a>.</p>"
        },
        {
          "html": "<p>Let <var>readRequest</var> be a new <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request\" id=\"ref-for-read-request\">read request</a> with the following <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#struct-item\" id=\"ref-for-struct-item\">items</a>:</p>\n      <dl>\n       <dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-chunk-steps\" id=\"ref-for-read-request-chunk-steps\">chunk steps</a>, given <var>chunk</var>\n       </dt><dd data-md=\"\">\n        \n       </dd><dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-close-steps\" id=\"ref-for-read-request-close-steps\">close steps</a>\n       </dt><dd data-md=\"\">\n        \n       </dd><dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-error-steps\" id=\"ref-for-read-request-error-steps\">error steps</a>, given <var>e</var>\n       </dt><dd data-md=\"\">\n        \n      </dd></dl>",
          "rationale": "resolve",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve\">Resolve</a> <var>promise</var> with <var>chunk</var>.</p>"
            }
          ],
          "additional": [
            {
              "html": "",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamdefaultreaderrelease\" id=\"ref-for-abstract-opdef-readablestreamdefaultreaderrelease\">ReadableStreamDefaultReaderRelease</a>(<var>reader</var>).</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve①\">Resolve</a> <var>promise</var> with <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#end-of-iteration\" id=\"ref-for-end-of-iteration\">end of iteration</a>.</p>"
                }
              ]
            },
            {
              "html": "",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamdefaultreaderrelease\" id=\"ref-for-abstract-opdef-readablestreamdefaultreaderrelease①\">ReadableStreamDefaultReaderRelease</a>(<var>reader</var>).</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject\">Reject</a> <var>promise</var> with <var>e</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-reader-read\" id=\"ref-for-readable-stream-default-reader-read\">ReadableStreamDefaultReaderRead</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①③\">this</a>, <var>readRequest</var>).</p>"
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStream asynchronous iterator return",
      "href": "https://streams.spec.whatwg.org/#rs-asynciterator-prototype-return",
      "html": "The <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#asynchronous-iterator-return\" id=\"ref-for-asynchronous-iterator-return\">asynchronous iterator return</a> steps for a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream①⑨\">ReadableStream</a></code>, given <var>stream</var>, <var>iterator</var>, and <var>arg</var>, are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>reader</var> be <var>iterator</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-async-iterator-reader\" id=\"ref-for-readablestream-async-iterator-reader①\">reader</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-stream\" id=\"ref-for-readablestreamgenericreader-stream①\">[[stream]]</a> is not undefined.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader-readrequests\" id=\"ref-for-readablestreamdefaultreader-readrequests\">[[readRequests]]</a> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty\">empty</a>,\n  as the async iterator machinery guarantees that any previous calls to <code>next()</code> have settled\n  before this is called.</p>"
        },
        {
          "html": "If <var>iterator</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-async-iterator-prevent-cancel\" id=\"ref-for-readablestream-async-iterator-prevent-cancel\">prevent cancel</a> is false:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>result</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-reader-generic-cancel\" id=\"ref-for-readable-stream-reader-generic-cancel\">ReadableStreamReaderGenericCancel</a>(<var>reader</var>, <var>arg</var>).</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamdefaultreaderrelease\" id=\"ref-for-abstract-opdef-readablestreamdefaultreaderrelease②\">ReadableStreamDefaultReaderRelease</a>(<var>reader</var>).</p>"
            },
            {
              "html": "<p>Return <var>result</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamdefaultreaderrelease\" id=\"ref-for-abstract-opdef-readablestreamdefaultreaderrelease③\">ReadableStreamDefaultReaderRelease</a>(<var>reader</var>).</p>"
        },
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with\">a promise resolved with</a> undefined.</p>"
        }
      ]
    },
    {
      "name": "ReadableStream transfer steps",
      "html": "<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream②①\">ReadableStream</a></code> objects are <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#transferable-objects\" id=\"ref-for-transferable-objects\">transferable objects</a>. Their <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#transfer-steps\" id=\"ref-for-transfer-steps\">transfer steps</a>, given <var>value</var>\n and <var>dataHolder</var>, are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-readable-stream-locked\" id=\"ref-for-is-readable-stream-locked④\">IsReadableStreamLocked</a>(<var>value</var>) is true, throw a \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#datacloneerror\" id=\"ref-for-datacloneerror\">DataCloneError</a></code>\" <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-DOMException\" id=\"ref-for-idl-DOMException\">DOMException</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>port1</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/web-messaging.html#messageport\" id=\"ref-for-messageport\">MessagePort</a></code> in <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#current-realm\" id=\"ref-for-current-realm\">the current Realm</a>.</p>"
        },
        {
          "html": "<p>Let <var>port2</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new①\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/web-messaging.html#messageport\" id=\"ref-for-messageport①\">MessagePort</a></code> in <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#current-realm\" id=\"ref-for-current-realm①\">the current Realm</a>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/web-messaging.html#entangle\" id=\"ref-for-entangle\">Entangle</a> <var>port1</var> and <var>port2</var>.</p>"
        },
        {
          "html": "<p>Let <var>writable</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new②\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestream\" id=\"ref-for-writablestream⑥\">WritableStream</a></code> in <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#current-realm\" id=\"ref-for-current-realm②\">the current Realm</a>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-setupcrossrealmtransformwritable\" id=\"ref-for-abstract-opdef-setupcrossrealmtransformwritable\">SetUpCrossRealmTransformWritable</a>(<var>writable</var>, <var>port1</var>).</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-pipe-to\" id=\"ref-for-readable-stream-pipe-to②\">ReadableStreamPipeTo</a>(<var>value</var>, <var>writable</var>, false, false, false).</p>"
        },
        {
          "html": "<p>Set <var>promise</var>.[[PromiseIsHandled]] to true.</p>"
        },
        {
          "html": "<p>Set <var>dataHolder</var>.[[port]] to ! <a data-link-type=\"abstract-op\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializewithtransfer\" id=\"ref-for-structuredserializewithtransfer\">StructuredSerializeWithTransfer</a>(<var>port2</var>, « <var>port2</var> »).</p>"
        }
      ]
    },
    {
      "name": "ReadableStream transfer-receiving steps",
      "html": "Their <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#transfer-receiving-steps\" id=\"ref-for-transfer-receiving-steps\">transfer-receiving steps</a>, given <var>dataHolder</var> and <var>value</var>, are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>deserializedRecord</var> be ! <a data-link-type=\"abstract-op\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#structureddeserializewithtransfer\" id=\"ref-for-structureddeserializewithtransfer\">StructuredDeserializeWithTransfer</a>(<var>dataHolder</var>.[[port]],\n  <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#current-realm\" id=\"ref-for-current-realm③\">the current Realm</a>).</p>"
        },
        {
          "html": "<p>Let <var>port</var> be <var>deserializedRecord</var>.[[Deserialized]].</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-setupcrossrealmtransformreadable\" id=\"ref-for-abstract-opdef-setupcrossrealmtransformreadable\">SetUpCrossRealmTransformReadable</a>(<var>value</var>, <var>port</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamGenericReader/closed",
      "href": "https://streams.spec.whatwg.org/#generic-reader-closed",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStreamGenericReader\" data-dfn-type=\"attribute\" data-export=\"\" id=\"generic-reader-closed\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code><span class=\"bs-old-id\" id=\"byob-reader-closed\"></span><span class=\"bs-old-id\" id=\"default-reader-closed\"></span><code>closed</code></code></dfn>\n getter steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①④\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-closedpromise\" id=\"ref-for-readablestreamgenericreader-closedpromise\">[[closedPromise]]</a>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamGenericReader/cancel(reason)",
      "href": "https://streams.spec.whatwg.org/#generic-reader-cancel",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStreamGenericReader\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"cancel(reason)|cancel()\" id=\"generic-reader-cancel\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code><span class=\"bs-old-id\" id=\"byob-reader-cancel\"></span><span class=\"bs-old-id\" id=\"default-reader-cancel\"></span><code>cancel(<var>reason</var>)</code></code></dfn>\n method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①⑤\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-stream\" id=\"ref-for-readablestreamgenericreader-stream②\">[[stream]]</a> is undefined, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with③\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑥\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-reader-generic-cancel\" id=\"ref-for-readable-stream-reader-generic-cancel①\">ReadableStreamReaderGenericCancel</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①⑥\">this</a>, <var>reason</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultReader/ReadableStreamDefaultReader(stream)",
      "href": "https://streams.spec.whatwg.org/#default-reader-constructor",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStreamDefaultReader\" data-dfn-type=\"constructor\" data-export=\"\" data-lt=\"ReadableStreamDefaultReader(stream)|constructor(stream)\" id=\"default-reader-constructor\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>new ReadableStreamDefaultReader(<var>stream</var>)</code></dfn>\n constructor steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-readable-stream-default-reader\" id=\"ref-for-set-up-readable-stream-default-reader\">SetUpReadableStreamDefaultReader</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①⑦\">this</a>, <var>stream</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultReader/read()",
      "href": "https://streams.spec.whatwg.org/#default-reader-read",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStreamDefaultReader\" data-dfn-type=\"method\" data-export=\"\" id=\"default-reader-read\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>read()</code></dfn>\n method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①⑧\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-stream\" id=\"ref-for-readablestreamgenericreader-stream③\">[[stream]]</a> is undefined, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with④\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑧\">TypeError</a></code>\n  exception.</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise①\">a new promise</a>.</p>"
        },
        {
          "html": "<p>Let <var>readRequest</var> be a new <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request\" id=\"ref-for-read-request②\">read request</a> with the following <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#struct-item\" id=\"ref-for-struct-item②\">items</a>:</p>\n      <dl>\n       <dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-chunk-steps\" id=\"ref-for-read-request-chunk-steps①\">chunk steps</a>, given <var>chunk</var>\n       </dt><dd data-md=\"\">\n        \n       </dd><dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-close-steps\" id=\"ref-for-read-request-close-steps①\">close steps</a>\n       </dt><dd data-md=\"\">\n        \n       </dd><dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-error-steps\" id=\"ref-for-read-request-error-steps①\">error steps</a>, given <var>e</var>\n       </dt><dd data-md=\"\">\n        \n      </dd></dl>",
          "rationale": "resolve",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve②\">Resolve</a> <var>promise</var> with «[ \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablestreamreadresult-value\" id=\"ref-for-dom-readablestreamreadresult-value\">value</a></code>\" → <var>chunk</var>,\n  \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablestreamreadresult-done\" id=\"ref-for-dom-readablestreamreadresult-done\">done</a></code>\" → false ]».</p>"
            }
          ],
          "additional": [
            {
              "html": "",
              "rationale": "resolve",
              "steps": [
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve③\">Resolve</a> <var>promise</var> with «[ \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablestreamreadresult-value\" id=\"ref-for-dom-readablestreamreadresult-value①\">value</a></code>\" → undefined,\n  \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablestreamreadresult-done\" id=\"ref-for-dom-readablestreamreadresult-done①\">done</a></code>\" → true ]».</p>"
                }
              ]
            },
            {
              "html": "",
              "rationale": "reject",
              "steps": [
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject①\">Reject</a> <var>promise</var> with <var>e</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-reader-read\" id=\"ref-for-readable-stream-default-reader-read①\">ReadableStreamDefaultReaderRead</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①⑨\">this</a>, <var>readRequest</var>).</p>"
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultReader/releaseLock()",
      "href": "https://streams.spec.whatwg.org/#default-reader-release-lock",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStreamDefaultReader\" data-dfn-type=\"method\" data-export=\"\" id=\"default-reader-release-lock\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>releaseLock()</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this②⓪\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-stream\" id=\"ref-for-readablestreamgenericreader-stream④\">[[stream]]</a> is undefined, return.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamdefaultreaderrelease\" id=\"ref-for-abstract-opdef-readablestreamdefaultreaderrelease④\">ReadableStreamDefaultReaderRelease</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this②①\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamBYOBReader/ReadableStreamBYOBReader(stream)",
      "href": "https://streams.spec.whatwg.org/#byob-reader-constructor",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStreamBYOBReader\" data-dfn-type=\"constructor\" data-export=\"\" data-lt=\"ReadableStreamBYOBReader(stream)|constructor(stream)\" id=\"byob-reader-constructor\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>new ReadableStreamBYOBReader(<var>stream</var>)</code></dfn> constructor\n steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-readable-stream-byob-reader\" id=\"ref-for-set-up-readable-stream-byob-reader\">SetUpReadableStreamBYOBReader</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this②②\">this</a>, <var>stream</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamBYOBReader/read(view, options)",
      "href": "https://streams.spec.whatwg.org/#byob-reader-read",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStreamBYOBReader\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"read(view, options)|read(view)\" id=\"byob-reader-read\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>read(<var>view</var>, <var>options</var>)</code></dfn>\n method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>view</var>.[[ByteLength]] is 0, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with⑤\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①⓪\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>If <var>view</var>.[[ViewedArrayBuffer]].[[ByteLength]] is 0, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with⑥\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①①\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-isdetachedbuffer\" id=\"ref-for-sec-isdetachedbuffer\">IsDetachedBuffer</a>(<var>view</var>.[[ViewedArrayBuffer]]) is true, return\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with⑦\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①②\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>If <var>options</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablestreambyobreaderreadoptions-min\" id=\"ref-for-dom-readablestreambyobreaderreadoptions-min③\">min</a></code>\"] is 0, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with⑧\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①③\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "If <var>view</var> has a [[TypedArrayName]] internal slot,",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>options</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablestreambyobreaderreadoptions-min\" id=\"ref-for-dom-readablestreambyobreaderreadoptions-min④\">min</a></code>\"] &gt; <var>view</var>.[[ArrayLength]],\n  return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with⑨\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-rangeerror\" id=\"ref-for-exceptiondef-rangeerror①\">RangeError</a></code> exception.</p>"
            }
          ]
        },
        {
          "html": "Otherwise (i.e., it is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-dataview-objects\" id=\"ref-for-sec-dataview-objects①\">DataView</a></code>),",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>options</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablestreambyobreaderreadoptions-min\" id=\"ref-for-dom-readablestreambyobreaderreadoptions-min⑤\">min</a></code>\"] &gt; <var>view</var>.[[ByteLength]],\n  return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with①⓪\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-rangeerror\" id=\"ref-for-exceptiondef-rangeerror②\">RangeError</a></code> exception.</p>"
            }
          ]
        },
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this②③\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-stream\" id=\"ref-for-readablestreamgenericreader-stream⑤\">[[stream]]</a> is undefined, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with①①\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①④\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise②\">a new promise</a>.</p>"
        },
        {
          "html": "<p>Let <var>readIntoRequest</var> be a new <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-into-request\" id=\"ref-for-read-into-request①\">read-into request</a> with the following <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#struct-item\" id=\"ref-for-struct-item④\">items</a>:</p>\n      <dl>\n       <dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-into-request-chunk-steps\" id=\"ref-for-read-into-request-chunk-steps\">chunk steps</a>, given <var>chunk</var>\n       </dt><dd data-md=\"\">\n        \n       </dd><dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-into-request-close-steps\" id=\"ref-for-read-into-request-close-steps①\">close steps</a>, given <var>chunk</var>\n       </dt><dd data-md=\"\">\n        \n       </dd><dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-into-request-error-steps\" id=\"ref-for-read-into-request-error-steps\">error steps</a>, given <var>e</var>\n       </dt><dd data-md=\"\">\n        \n      </dd></dl>",
          "rationale": "resolve",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve④\">Resolve</a> <var>promise</var> with «[ \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablestreamreadresult-value\" id=\"ref-for-dom-readablestreamreadresult-value②\">value</a></code>\" → <var>chunk</var>,\n  \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablestreamreadresult-done\" id=\"ref-for-dom-readablestreamreadresult-done②\">done</a></code>\" → false ]».</p>"
            }
          ],
          "additional": [
            {
              "html": "",
              "rationale": "resolve",
              "steps": [
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve⑤\">Resolve</a> <var>promise</var> with «[ \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablestreamreadresult-value\" id=\"ref-for-dom-readablestreamreadresult-value③\">value</a></code>\" → <var>chunk</var>,\n  \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablestreamreadresult-done\" id=\"ref-for-dom-readablestreamreadresult-done③\">done</a></code>\" → true ]».</p>"
                }
              ]
            },
            {
              "html": "",
              "rationale": "reject",
              "steps": [
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject②\">Reject</a> <var>promise</var> with <var>e</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-byob-reader-read\" id=\"ref-for-readable-stream-byob-reader-read\">ReadableStreamBYOBReaderRead</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this②④\">this</a>, <var>view</var>, <var>options</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-readablestreambyobreaderreadoptions-min\" id=\"ref-for-dom-readablestreambyobreaderreadoptions-min⑥\">min</a></code>\"], <var>readIntoRequest</var>).</p>"
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamBYOBReader/releaseLock()",
      "href": "https://streams.spec.whatwg.org/#byob-reader-release-lock",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStreamBYOBReader\" data-dfn-type=\"method\" data-export=\"\" id=\"byob-reader-release-lock\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>releaseLock()</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this②⑤\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-stream\" id=\"ref-for-readablestreamgenericreader-stream⑥\">[[stream]]</a> is undefined, return.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreambyobreaderrelease\" id=\"ref-for-abstract-opdef-readablestreambyobreaderrelease\">ReadableStreamBYOBReaderRelease</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this②⑥\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultController/desiredSize",
      "href": "https://streams.spec.whatwg.org/#rs-default-controller-desired-size",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStreamDefaultController\" data-dfn-type=\"attribute\" data-export=\"\" id=\"rs-default-controller-desired-size\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>desiredSize</code></dfn> getter steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-get-desired-size\" id=\"ref-for-readable-stream-default-controller-get-desired-size\">ReadableStreamDefaultControllerGetDesiredSize</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this②⑦\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultController/close()",
      "href": "https://streams.spec.whatwg.org/#rs-default-controller-close",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStreamDefaultController\" data-dfn-type=\"method\" data-export=\"\" id=\"rs-default-controller-close\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>close()</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-can-close-or-enqueue\" id=\"ref-for-readable-stream-default-controller-can-close-or-enqueue\">ReadableStreamDefaultControllerCanCloseOrEnqueue</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this②⑧\">this</a>) is false, throw a\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①⑤\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-close\" id=\"ref-for-readable-stream-default-controller-close\">ReadableStreamDefaultControllerClose</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this②⑨\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultController/enqueue(chunk)",
      "href": "https://streams.spec.whatwg.org/#rs-default-controller-enqueue",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStreamDefaultController\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"enqueue(chunk)|enqueue()\" id=\"rs-default-controller-enqueue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>enqueue(<var>chunk</var>)</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-can-close-or-enqueue\" id=\"ref-for-readable-stream-default-controller-can-close-or-enqueue①\">ReadableStreamDefaultControllerCanCloseOrEnqueue</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this③⓪\">this</a>) is false, throw a\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①⑥\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-enqueue\" id=\"ref-for-readable-stream-default-controller-enqueue\">ReadableStreamDefaultControllerEnqueue</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this③①\">this</a>, <var>chunk</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultController/error(e)",
      "href": "https://streams.spec.whatwg.org/#rs-default-controller-error",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStreamDefaultController\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"error(e)|error()\" id=\"rs-default-controller-error\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>error(<var>e</var>)</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-error\" id=\"ref-for-readable-stream-default-controller-error\">ReadableStreamDefaultControllerError</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this③②\">this</a>, <var>e</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultController/[[CancelSteps]]",
      "href": "https://streams.spec.whatwg.org/#rs-default-controller-private-cancel",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStreamDefaultController\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"[[CancelSteps]]\" id=\"rs-default-controller-private-cancel\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[CancelSteps]](<var>reason</var>)</dfn> implements the\n <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamcontroller-cancelsteps\" id=\"ref-for-abstract-opdef-readablestreamcontroller-cancelsteps\">[[CancelSteps]]</a> contract. It performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#reset-queue\" id=\"ref-for-reset-queue\">ResetQueue</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this③③\">this</a>).</p>"
        },
        {
          "html": "<p>Let <var>result</var> be the result of performing\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this③④\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-cancelalgorithm\" id=\"ref-for-readablestreamdefaultcontroller-cancelalgorithm\">[[cancelAlgorithm]]</a>, passing <var>reason</var>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-clear-algorithms\" id=\"ref-for-readable-stream-default-controller-clear-algorithms\">ReadableStreamDefaultControllerClearAlgorithms</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this③⑤\">this</a>).</p>"
        },
        {
          "html": "<p>Return <var>result</var>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultController/[[PullSteps]]",
      "href": "https://streams.spec.whatwg.org/#rs-default-controller-private-pull",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStreamDefaultController\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"[[PullSteps]]\" id=\"rs-default-controller-private-pull\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[PullSteps]](<var>readRequest</var>)</dfn> implements the\n <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamcontroller-pullsteps\" id=\"ref-for-abstract-opdef-readablestreamcontroller-pullsteps\">[[PullSteps]]</a> contract. It performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this③⑥\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-stream\" id=\"ref-for-readablestreamdefaultcontroller-stream\">[[stream]]</a>.</p>"
        },
        {
          "html": "If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this③⑦\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-queue\" id=\"ref-for-readablestreamdefaultcontroller-queue①\">[[queue]]</a> is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty①\">empty</a>,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>chunk</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#dequeue-value\" id=\"ref-for-dequeue-value\">DequeueValue</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this③⑧\">this</a>).</p>"
            },
            {
              "html": "If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this③⑨\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-closerequested\" id=\"ref-for-readablestreamdefaultcontroller-closerequested\">[[closeRequested]]</a> is true and\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this④⓪\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-queue\" id=\"ref-for-readablestreamdefaultcontroller-queue②\">[[queue]]</a> <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty②\">is empty</a>,",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-clear-algorithms\" id=\"ref-for-readable-stream-default-controller-clear-algorithms①\">ReadableStreamDefaultControllerClearAlgorithms</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this④①\">this</a>).</p>"
                },
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-close\" id=\"ref-for-readable-stream-close\">ReadableStreamClose</a>(<var>stream</var>).</p>"
                }
              ]
            },
            {
              "html": "<p>Otherwise, perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-call-pull-if-needed\" id=\"ref-for-readable-stream-default-controller-call-pull-if-needed\">ReadableStreamDefaultControllerCallPullIfNeeded</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this④②\">this</a>).</p>"
            },
            {
              "html": "<p>Perform <var>readRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-chunk-steps\" id=\"ref-for-read-request-chunk-steps②\">chunk steps</a>, given <var>chunk</var>.</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-add-read-request\" id=\"ref-for-readable-stream-add-read-request\">ReadableStreamAddReadRequest</a>(<var>stream</var>, <var>readRequest</var>).</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-call-pull-if-needed\" id=\"ref-for-readable-stream-default-controller-call-pull-if-needed①\">ReadableStreamDefaultControllerCallPullIfNeeded</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this④③\">this</a>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultController/[[ReleaseSteps]]",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-readablestreamdefaultcontroller-releasesteps",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStreamDefaultController\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"[[ReleaseSteps]]\" id=\"abstract-opdef-readablestreamdefaultcontroller-releasesteps\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[ReleaseSteps]]()</dfn>\n implements the <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamcontroller-releasesteps\" id=\"ref-for-abstract-opdef-readablestreamcontroller-releasesteps\">[[ReleaseSteps]]</a> contract. It performs the following\n steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return.</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamController/byobRequest",
      "href": "https://streams.spec.whatwg.org/#rbs-controller-byob-request",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableByteStreamController\" data-dfn-type=\"attribute\" data-export=\"\" id=\"rbs-controller-byob-request\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>byobRequest</code></dfn> getter steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollergetbyobrequest\" id=\"ref-for-abstract-opdef-readablebytestreamcontrollergetbyobrequest\">ReadableByteStreamControllerGetBYOBRequest</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this④④\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamController/desiredSize",
      "href": "https://streams.spec.whatwg.org/#rbs-controller-desired-size",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableByteStreamController\" data-dfn-type=\"attribute\" data-export=\"\" id=\"rbs-controller-desired-size\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>desiredSize</code></dfn> getter steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-get-desired-size\" id=\"ref-for-readable-byte-stream-controller-get-desired-size\">ReadableByteStreamControllerGetDesiredSize</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this④⑤\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamController/close()",
      "href": "https://streams.spec.whatwg.org/#rbs-controller-close",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableByteStreamController\" data-dfn-type=\"method\" data-export=\"\" id=\"rbs-controller-close\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>close()</code></dfn> method\n steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this④⑥\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-closerequested\" id=\"ref-for-readablebytestreamcontroller-closerequested\">[[closeRequested]]</a> is true, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①⑧\">TypeError</a></code>\n  exception.</p>"
        },
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this④⑦\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream\">[[stream]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state\">[[state]]</a> is not\n  \"<code>readable</code>\", throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror①⑨\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-close\" id=\"ref-for-readable-byte-stream-controller-close\">ReadableByteStreamControllerClose</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this④⑧\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamController/enqueue(chunk)",
      "href": "https://streams.spec.whatwg.org/#rbs-controller-enqueue",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableByteStreamController\" data-dfn-type=\"method\" data-export=\"\" id=\"rbs-controller-enqueue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>enqueue(<var>chunk</var>)</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>chunk</var>.[[ByteLength]] is 0, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror②⓪\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>If <var>chunk</var>.[[ViewedArrayBuffer]].[[ByteLength]] is 0, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror②①\">TypeError</a></code>\n  exception.</p>"
        },
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this④⑨\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-closerequested\" id=\"ref-for-readablebytestreamcontroller-closerequested①\">[[closeRequested]]</a> is true, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror②②\">TypeError</a></code>\n  exception.</p>"
        },
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑤⓪\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream①\">[[stream]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state①\">[[state]]</a> is not\n  \"<code>readable</code>\", throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror②③\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Return ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-enqueue\" id=\"ref-for-readable-byte-stream-controller-enqueue\">ReadableByteStreamControllerEnqueue</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑤①\">this</a>, <var>chunk</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamController/error(e)",
      "href": "https://streams.spec.whatwg.org/#rbs-controller-error",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableByteStreamController\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"error(e)|error()\" id=\"rbs-controller-error\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>error(<var>e</var>)</code></dfn>\n method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-error\" id=\"ref-for-readable-byte-stream-controller-error\">ReadableByteStreamControllerError</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑤②\">this</a>, <var>e</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamController/[[CancelSteps]]",
      "href": "https://streams.spec.whatwg.org/#rbs-controller-private-cancel",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableByteStreamController\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"[[CancelSteps]]\" id=\"rbs-controller-private-cancel\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[CancelSteps]](<var>reason</var>)</dfn> implements the\n <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamcontroller-cancelsteps\" id=\"ref-for-abstract-opdef-readablestreamcontroller-cancelsteps①\">[[CancelSteps]]</a> contract. It performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-clear-pending-pull-intos\" id=\"ref-for-readable-byte-stream-controller-clear-pending-pull-intos\">ReadableByteStreamControllerClearPendingPullIntos</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑤③\">this</a>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#reset-queue\" id=\"ref-for-reset-queue①\">ResetQueue</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑤④\">this</a>).</p>"
        },
        {
          "html": "<p>Let <var>result</var> be the result of performing\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑤⑤\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-cancelalgorithm\" id=\"ref-for-readablebytestreamcontroller-cancelalgorithm\">[[cancelAlgorithm]]</a>, passing in <var>reason</var>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-clear-algorithms\" id=\"ref-for-readable-byte-stream-controller-clear-algorithms\">ReadableByteStreamControllerClearAlgorithms</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑤⑥\">this</a>).</p>"
        },
        {
          "html": "<p>Return <var>result</var>.</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamController/[[PullSteps]]",
      "href": "https://streams.spec.whatwg.org/#rbs-controller-private-pull",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableByteStreamController\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"[[PullSteps]]\" id=\"rbs-controller-private-pull\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[PullSteps]](<var>readRequest</var>)</dfn> implements the\n <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamcontroller-pullsteps\" id=\"ref-for-abstract-opdef-readablestreamcontroller-pullsteps①\">[[PullSteps]]</a> contract. It performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑤⑦\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream②\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-has-default-reader\" id=\"ref-for-readable-stream-has-default-reader\">ReadableStreamHasDefaultReader</a>(<var>stream</var>) is true.</p>"
        },
        {
          "html": "If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑤⑧\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queuetotalsize\" id=\"ref-for-readablebytestreamcontroller-queuetotalsize①\">[[queueTotalSize]]</a> &gt; 0,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-get-num-read-requests\" id=\"ref-for-readable-stream-get-num-read-requests\">ReadableStreamGetNumReadRequests</a>(<var>stream</var>) is 0.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollerfillreadrequestfromqueue\" id=\"ref-for-abstract-opdef-readablebytestreamcontrollerfillreadrequestfromqueue\">ReadableByteStreamControllerFillReadRequestFromQueue</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑤⑨\">this</a>, <var>readRequest</var>).</p>"
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>autoAllocateChunkSize</var> be\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑥⓪\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-autoallocatechunksize\" id=\"ref-for-readablebytestreamcontroller-autoallocatechunksize\">[[autoAllocateChunkSize]]</a>.</p>"
        },
        {
          "html": "If <var>autoAllocateChunkSize</var> is not undefined,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>buffer</var> be <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-construct\" id=\"ref-for-sec-construct\">Construct</a>(<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-arraybuffer-constructor\" id=\"ref-for-sec-arraybuffer-constructor\">%ArrayBuffer%</a></code>, « <var>autoAllocateChunkSize</var> »).</p>"
            },
            {
              "html": "If <var>buffer</var> is an abrupt completion,",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform <var>readRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-error-steps\" id=\"ref-for-read-request-error-steps②\">error steps</a>, given <var>buffer</var>.[[Value]].</p>"
                },
                {
                  "html": "<p>Return.</p>"
                }
              ]
            },
            {
              "html": "<p>Let <var>pullIntoDescriptor</var> be a new <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor\" id=\"ref-for-pull-into-descriptor①\">pull-into descriptor</a> with</p>\n        <dl class=\"props\">\n         <dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer\" id=\"ref-for-pull-into-descriptor-buffer⑦\">buffer</a>\n   \n         </dt><dd><var>buffer</var>.[[Value]]\n\n   \n         </dd><dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer-byte-length\" id=\"ref-for-pull-into-descriptor-buffer-byte-length\">buffer byte length</a>\n   \n         </dt><dd><var>autoAllocateChunkSize</var>\n\n   \n         </dd><dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-byte-offset\" id=\"ref-for-pull-into-descriptor-byte-offset\">byte offset</a>\n   \n         </dt><dd>0\n\n   \n         </dd><dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-byte-length\" id=\"ref-for-pull-into-descriptor-byte-length\">byte length</a>\n   \n         </dt><dd><var>autoAllocateChunkSize</var>\n\n   \n         </dd><dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled\">bytes filled</a>\n   \n         </dt><dd>0\n\n   \n         </dd><dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-minimum-fill\" id=\"ref-for-pull-into-descriptor-minimum-fill\">minimum fill</a>\n   \n         </dt><dd>1\n\n   \n         </dd><dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-element-size\" id=\"ref-for-pull-into-descriptor-element-size①\">element size</a>\n   \n         </dt><dd>1\n\n   \n         </dd><dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-view-constructor\" id=\"ref-for-pull-into-descriptor-view-constructor①\">view constructor</a>\n   \n         </dt><dd><code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-objects\" id=\"ref-for-sec-typedarray-objects②\">%Uint8Array%</a></code>\n\n   \n         </dd><dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-reader-type\" id=\"ref-for-pull-into-descriptor-reader-type\">reader type</a>\n   \n         </dt><dd>\"<code>default</code>\"\n  \n        </dd></dl>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append\">Append</a> <var>pullIntoDescriptor</var> to\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑥①\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos\">[[pendingPullIntos]]</a>.</p>"
            }
          ]
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-add-read-request\" id=\"ref-for-readable-stream-add-read-request①\">ReadableStreamAddReadRequest</a>(<var>stream</var>, <var>readRequest</var>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-call-pull-if-needed\" id=\"ref-for-readable-byte-stream-controller-call-pull-if-needed\">ReadableByteStreamControllerCallPullIfNeeded</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑥②\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamController/[[ReleaseSteps]]",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontroller-releasesteps",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableByteStreamController\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"[[ReleaseSteps]]\" id=\"abstract-opdef-readablebytestreamcontroller-releasesteps\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[ReleaseSteps]]()</dfn>\n implements the <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamcontroller-releasesteps\" id=\"ref-for-abstract-opdef-readablestreamcontroller-releasesteps①\">[[ReleaseSteps]]</a> contract. It performs the following\n steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑥③\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos①\">[[pendingPullIntos]]</a> is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty③\">empty</a>,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>firstPendingPullInto</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑥④\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos②\">[[pendingPullIntos]]</a>[0].</p>"
            },
            {
              "html": "<p>Set <var>firstPendingPullInto</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-reader-type\" id=\"ref-for-pull-into-descriptor-reader-type①\">reader type</a> to \"<code>none</code>\".</p>"
            },
            {
              "html": "<p>Set <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑥⑤\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos③\">[[pendingPullIntos]]</a> to the <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list⑤\">list</a>\n  « <var>firstPendingPullInto</var> ».</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableStreamBYOBRequest/view",
      "href": "https://streams.spec.whatwg.org/#rs-byob-request-view",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStreamBYOBRequest\" data-dfn-type=\"attribute\" data-export=\"\" id=\"rs-byob-request-view\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>view</code></dfn>\n getter steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑥⑥\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest-view\" id=\"ref-for-readablestreambyobrequest-view\">[[view]]</a>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamBYOBRequest/respond(bytesWritten)",
      "href": "https://streams.spec.whatwg.org/#rs-byob-request-respond",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStreamBYOBRequest\" data-dfn-type=\"method\" data-export=\"\" id=\"rs-byob-request-respond\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>respond(<var>bytesWritten</var>)</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑥⑦\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest-controller\" id=\"ref-for-readablestreambyobrequest-controller\">[[controller]]</a> is undefined, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror②④\">TypeError</a></code>\n  exception.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-isdetachedbuffer\" id=\"ref-for-sec-isdetachedbuffer①\">IsDetachedBuffer</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑥⑧\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest-view\" id=\"ref-for-readablestreambyobrequest-view①\">[[view]]</a>.[[ArrayBuffer]])\n  is true, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror②⑤\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑥⑨\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest-view\" id=\"ref-for-readablestreambyobrequest-view②\">[[view]]</a>.[[ByteLength]] &gt; 0.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑦⓪\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest-view\" id=\"ref-for-readablestreambyobrequest-view③\">[[view]]</a>.[[ViewedArrayBuffer]].[[ByteLength]]\n  &gt; 0.</p>"
        },
        {
          "html": "<p>Perform ?\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond\" id=\"ref-for-readable-byte-stream-controller-respond\">ReadableByteStreamControllerRespond</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑦①\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest-controller\" id=\"ref-for-readablestreambyobrequest-controller①\">[[controller]]</a>,\n  <var>bytesWritten</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamBYOBRequest/respondWithNewView(view)",
      "href": "https://streams.spec.whatwg.org/#rs-byob-request-respond-with-new-view",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ReadableStreamBYOBRequest\" data-dfn-type=\"method\" data-export=\"\" id=\"rs-byob-request-respond-with-new-view\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>respondWithNewView(<var>view</var>)</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑦②\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest-controller\" id=\"ref-for-readablestreambyobrequest-controller②\">[[controller]]</a> is undefined, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror②⑥\">TypeError</a></code>\n  exception.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-isdetachedbuffer\" id=\"ref-for-sec-isdetachedbuffer②\">IsDetachedBuffer</a>(<var>view</var>.[[ViewedArrayBuffer]]) is true,\n  throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror②⑦\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Return ?\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond-with-new-view\" id=\"ref-for-readable-byte-stream-controller-respond-with-new-view\">ReadableByteStreamControllerRespondWithNewView</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑦③\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest-controller\" id=\"ref-for-readablestreambyobrequest-controller③\">[[controller]]</a>,\n  <var>view</var>).</p>"
        }
      ]
    },
    {
      "name": "AcquireReadableStreamBYOBReader",
      "href": "https://streams.spec.whatwg.org/#acquire-readable-stream-byob-reader",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"AcquireReadableStreamBYOBReader\" id=\"acquire-readable-stream-byob-reader\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">AcquireReadableStreamBYOBReader(<var>stream</var>)</dfn> performs\n the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>reader</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new③\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader\" id=\"ref-for-readablestreambyobreader①⓪\">ReadableStreamBYOBReader</a></code>.</p>"
        },
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-readable-stream-byob-reader\" id=\"ref-for-set-up-readable-stream-byob-reader①\">SetUpReadableStreamBYOBReader</a>(<var>reader</var>, <var>stream</var>).</p>"
        },
        {
          "html": "<p>Return <var>reader</var>.</p>"
        }
      ]
    },
    {
      "name": "AcquireReadableStreamDefaultReader",
      "href": "https://streams.spec.whatwg.org/#acquire-readable-stream-reader",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"AcquireReadableStreamDefaultReader\" id=\"acquire-readable-stream-reader\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">AcquireReadableStreamDefaultReader(<var>stream</var>)</dfn> performs the\n following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>reader</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new④\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader\" id=\"ref-for-readablestreamdefaultreader①⓪\">ReadableStreamDefaultReader</a></code>.</p>"
        },
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-readable-stream-default-reader\" id=\"ref-for-set-up-readable-stream-default-reader①\">SetUpReadableStreamDefaultReader</a>(<var>reader</var>, <var>stream</var>).</p>"
        },
        {
          "html": "<p>Return <var>reader</var>.</p>"
        }
      ]
    },
    {
      "name": "CreateReadableStream",
      "href": "https://streams.spec.whatwg.org/#create-readable-stream",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"CreateReadableStream\" id=\"create-readable-stream\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">CreateReadableStream(<var>startAlgorithm</var>, <var>pullAlgorithm</var>,\n <var>cancelAlgorithm</var>[, <var>highWaterMark</var>, [, <var>sizeAlgorithm</var>]])</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>highWaterMark</var> was not passed, set it to 1.</p>"
        },
        {
          "html": "<p>If <var>sizeAlgorithm</var> was not passed, set it to an algorithm that returns 1.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-non-negative-number\" id=\"ref-for-is-non-negative-number\">IsNonNegativeNumber</a>(<var>highWaterMark</var>) is true.</p>"
        },
        {
          "html": "<p>Let <var>stream</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new⑤\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream③④\">ReadableStream</a></code>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#initialize-readable-stream\" id=\"ref-for-initialize-readable-stream①\">InitializeReadableStream</a>(<var>stream</var>).</p>"
        },
        {
          "html": "<p>Let <var>controller</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new⑥\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller\" id=\"ref-for-readablestreamdefaultcontroller⑨\">ReadableStreamDefaultController</a></code>.</p>"
        },
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-readable-stream-default-controller\" id=\"ref-for-set-up-readable-stream-default-controller\">SetUpReadableStreamDefaultController</a>(<var>stream</var>, <var>controller</var>, <var>startAlgorithm</var>,\n  <var>pullAlgorithm</var>, <var>cancelAlgorithm</var>, <var>highWaterMark</var>, <var>sizeAlgorithm</var>).</p>"
        },
        {
          "html": "<p>Return <var>stream</var>.</p>"
        }
      ]
    },
    {
      "name": "CreateReadableByteStream",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-createreadablebytestream",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"CreateReadableByteStream\" id=\"abstract-opdef-createreadablebytestream\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">CreateReadableByteStream(<var>startAlgorithm</var>,\n <var>pullAlgorithm</var>, <var>cancelAlgorithm</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new⑦\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream③⑤\">ReadableStream</a></code>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#initialize-readable-stream\" id=\"ref-for-initialize-readable-stream②\">InitializeReadableStream</a>(<var>stream</var>).</p>"
        },
        {
          "html": "<p>Let <var>controller</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new⑧\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller\" id=\"ref-for-readablebytestreamcontroller①②\">ReadableByteStreamController</a></code>.</p>"
        },
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-readable-byte-stream-controller\" id=\"ref-for-set-up-readable-byte-stream-controller\">SetUpReadableByteStreamController</a>(<var>stream</var>, <var>controller</var>, <var>startAlgorithm</var>,\n  <var>pullAlgorithm</var>, <var>cancelAlgorithm</var>, 0, undefined).</p>"
        },
        {
          "html": "<p>Return <var>stream</var>.</p>"
        }
      ]
    },
    {
      "name": "InitializeReadableStream",
      "href": "https://streams.spec.whatwg.org/#initialize-readable-stream",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"InitializeReadableStream\" id=\"initialize-readable-stream\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">InitializeReadableStream(<var>stream</var>)</dfn> performs the following\n steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state②\">[[state]]</a> to \"<code>readable</code>\".</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader\">[[reader]]</a> and <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-storederror\" id=\"ref-for-readablestream-storederror\">[[storedError]]</a> to\n  undefined.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-disturbed\" id=\"ref-for-readablestream-disturbed\">[[disturbed]]</a> to false.</p>"
        }
      ]
    },
    {
      "name": "IsReadableStreamLocked",
      "href": "https://streams.spec.whatwg.org/#is-readable-stream-locked",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"IsReadableStreamLocked\" id=\"is-readable-stream-locked\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">IsReadableStreamLocked(<var>stream</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader①\">[[reader]]</a> is undefined, return false.</p>"
        },
        {
          "html": "<p>Return true.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamFromIterable",
      "href": "https://streams.spec.whatwg.org/#readable-stream-from-iterable",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamFromIterable\" id=\"readable-stream-from-iterable\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">\n ReadableStreamFromIterable(<var>asyncIterable</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be undefined.</p>"
        },
        {
          "html": "<p>Let <var>iteratorRecord</var> be ? <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-getiterator\" id=\"ref-for-sec-getiterator\">GetIterator</a>(<var>asyncIterable</var>, async).</p>"
        },
        {
          "html": "<p>Let <var>startAlgorithm</var> be an algorithm that returns undefined.</p>"
        },
        {
          "html": "Let <var>pullAlgorithm</var> be the following steps:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>nextResult</var> be <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-iteratornext\" id=\"ref-for-sec-iteratornext\">IteratorNext</a>(<var>iteratorRecord</var>).</p>"
            },
            {
              "html": "<p>If <var>nextResult</var> is an abrupt completion, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with①②\">a promise rejected with</a>\n  <var>nextResult</var>.[[Value]].</p>"
            },
            {
              "html": "<p>Let <var>nextPromise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with①\">a promise resolved with</a> <var>nextResult</var>.[[Value]].</p>"
            },
            {
              "html": "Return the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-perform-steps-once-promise-is-settled\" id=\"ref-for-dfn-perform-steps-once-promise-is-settled\">reacting</a> to <var>nextPromise</var> with the following fulfillment steps,\n  given <var>iterResult</var>:",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If <var>iterResult</var> <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-object-type\" id=\"ref-for-sec-object-type\">is not an Object</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror②⑧\">TypeError</a></code>.</p>"
                },
                {
                  "html": "<p>Let <var>done</var> be ? <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-iteratorcomplete\" id=\"ref-for-sec-iteratorcomplete\">IteratorComplete</a>(<var>iterResult</var>).</p>"
                },
                {
                  "html": "If <var>done</var> is true:",
                  "rationale": "perform",
                  "steps": [
                    {
                      "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-close\" id=\"ref-for-readable-stream-default-controller-close①\">ReadableStreamDefaultControllerClose</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller\">[[controller]]</a>).</p>"
                    }
                  ]
                },
                {
                  "html": "Otherwise:",
                  "rationale": "let",
                  "steps": [
                    {
                      "html": "<p>Let <var>value</var> be ? <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-iteratorvalue\" id=\"ref-for-sec-iteratorvalue\">IteratorValue</a>(<var>iterResult</var>).</p>"
                    },
                    {
                      "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-enqueue\" id=\"ref-for-readable-stream-default-controller-enqueue①\">ReadableStreamDefaultControllerEnqueue</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller①\">[[controller]]</a>,\n  <var>value</var>).</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "Let <var>cancelAlgorithm</var> be the following steps, given <var>reason</var>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</p>"
            },
            {
              "html": "<p>Let <var>returnMethod</var> be <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-getmethod\" id=\"ref-for-sec-getmethod\">GetMethod</a>(<var>iterator</var>, \"<code>return</code>\").</p>"
            },
            {
              "html": "<p>If <var>returnMethod</var> is an abrupt completion, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with①③\">a promise rejected with</a>\n  <var>returnMethod</var>.[[Value]].</p>"
            },
            {
              "html": "<p>If <var>returnMethod</var>.[[Value]] is undefined, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with②\">a promise resolved with</a> undefined.</p>"
            },
            {
              "html": "<p>Let <var>returnResult</var> be <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-call\" id=\"ref-for-sec-call\">Call</a>(<var>returnMethod</var>.[[Value]], <var>iterator</var>, « <var>reason</var> »).</p>"
            },
            {
              "html": "<p>If <var>returnResult</var> is an abrupt completion, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with①④\">a promise rejected with</a>\n  <var>returnResult</var>.[[Value]].</p>"
            },
            {
              "html": "<p>Let <var>returnPromise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with③\">a promise resolved with</a> <var>returnResult</var>.[[Value]].</p>"
            },
            {
              "html": "Return the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-perform-steps-once-promise-is-settled\" id=\"ref-for-dfn-perform-steps-once-promise-is-settled①\">reacting</a> to <var>returnPromise</var> with the following fulfillment steps,\n  given <var>iterResult</var>:",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If <var>iterResult</var> <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-object-type\" id=\"ref-for-sec-object-type①\">is not an Object</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror②⑨\">TypeError</a></code>.</p>"
                },
                {
                  "html": "<p>Return undefined.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Set <var>stream</var> to ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#create-readable-stream\" id=\"ref-for-create-readable-stream\">CreateReadableStream</a>(<var>startAlgorithm</var>, <var>pullAlgorithm</var>, <var>cancelAlgorithm</var>,\n  0).</p>"
        },
        {
          "html": "<p>Return <var>stream</var>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamPipeTo",
      "href": "https://streams.spec.whatwg.org/#readable-stream-pipe-to",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamPipeTo\" id=\"readable-stream-pipe-to\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamPipeTo(<var>source</var>, <var>dest</var>, <var>preventClose</var>, <var>preventAbort</var>,\n <var>preventCancel</var>[, <var>signal</var>])</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>source</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream③⑥\">ReadableStream</a></code>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>dest</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements①\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestream\" id=\"ref-for-writablestream⑦\">WritableStream</a></code>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>preventClose</var>, <var>preventAbort</var>, and <var>preventCancel</var> are all booleans.</p>"
        },
        {
          "html": "<p>If <var>signal</var> was not given, let <var>signal</var> be undefined.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: either <var>signal</var> is undefined, or <var>signal</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements②\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#abortsignal\" id=\"ref-for-abortsignal③\">AbortSignal</a></code>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-readable-stream-locked\" id=\"ref-for-is-readable-stream-locked⑤\">IsReadableStreamLocked</a>(<var>source</var>) is false.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-writable-stream-locked\" id=\"ref-for-is-writable-stream-locked②\">IsWritableStreamLocked</a>(<var>dest</var>) is false.</p>"
        },
        {
          "html": "<p>If <var>source</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller②\">[[controller]]</a> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements③\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller\" id=\"ref-for-readablebytestreamcontroller①③\">ReadableByteStreamController</a></code>,\n  let <var>reader</var> be either ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#acquire-readable-stream-byob-reader\" id=\"ref-for-acquire-readable-stream-byob-reader①\">AcquireReadableStreamBYOBReader</a>(<var>source</var>) or !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#acquire-readable-stream-reader\" id=\"ref-for-acquire-readable-stream-reader②\">AcquireReadableStreamDefaultReader</a>(<var>source</var>), at the user agent’s discretion.</p>"
        },
        {
          "html": "<p>Otherwise, let <var>reader</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#acquire-readable-stream-reader\" id=\"ref-for-acquire-readable-stream-reader③\">AcquireReadableStreamDefaultReader</a>(<var>source</var>).</p>"
        },
        {
          "html": "<p>Let <var>writer</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#acquire-writable-stream-default-writer\" id=\"ref-for-acquire-writable-stream-default-writer\">AcquireWritableStreamDefaultWriter</a>(<var>dest</var>).</p>"
        },
        {
          "html": "<p>Set <var>source</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-disturbed\" id=\"ref-for-readablestream-disturbed①\">[[disturbed]]</a> to true.</p>"
        },
        {
          "html": "<p>Let <var>shuttingDown</var> be false.</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise③\">a new promise</a>.</p>"
        },
        {
          "html": "If <var>signal</var> is not undefined,",
          "rationale": "let",
          "steps": [
            {
              "html": "Let <var>abortAlgorithm</var> be the following steps:",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>error</var> be <var>signal</var>’s <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-abort-reason\" id=\"ref-for-abortsignal-abort-reason\">abort reason</a>.</p>"
                },
                {
                  "html": "<p>Let <var>actions</var> be an empty <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#ordered-set\" id=\"ref-for-ordered-set\">ordered set</a>.</p>"
                },
                {
                  "html": "If <var>preventAbort</var> is false, <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#set-append\" id=\"ref-for-set-append\">append</a> the following action to <var>actions</var>:",
                  "rationale": "if",
                  "steps": [
                    {
                      "html": "<p>If <var>dest</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state\">[[state]]</a> is \"<code>writable</code>\", return !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-abort\" id=\"ref-for-writable-stream-abort\">WritableStreamAbort</a>(<var>dest</var>, <var>error</var>).</p>"
                    },
                    {
                      "html": "<p>Otherwise, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with④\">a promise resolved with</a> undefined.</p>"
                    }
                  ]
                },
                {
                  "html": "If <var>preventCancel</var> is false, <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#set-append\" id=\"ref-for-set-append①\">append</a> the following action action to <var>actions</var>:",
                  "rationale": "if",
                  "steps": [
                    {
                      "html": "<p>If <var>source</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state③\">[[state]]</a> is \"<code>readable</code>\", return !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-cancel\" id=\"ref-for-readable-stream-cancel①\">ReadableStreamCancel</a>(<var>source</var>, <var>error</var>).</p>"
                    },
                    {
                      "html": "<p>Otherwise, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with⑤\">a promise resolved with</a> undefined.</p>"
                    }
                  ]
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#rs-pipeTo-shutdown-with-action\" id=\"ref-for-rs-pipeTo-shutdown-with-action\">Shutdown with an action</a> consisting of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#waiting-for-all-promise\" id=\"ref-for-waiting-for-all-promise\">getting a promise to wait for all</a> of the actions\n  in <var>actions</var>, and with <var>error</var>.</p>"
                }
              ]
            },
            {
              "html": "<p>If <var>signal</var> is <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-aborted\" id=\"ref-for-abortsignal-aborted\">aborted</a>, perform <var>abortAlgorithm</var> and return <var>promise</var>.</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-add\" id=\"ref-for-abortsignal-add\">Add</a> <var>abortAlgorithm</var> to <var>signal</var>.</p>"
            }
          ]
        },
        {
          "html": "<strong>Error and close states must be propagated:</strong> the following conditions must be\n applied in order.",
          "rationale": "if",
          "steps": [
            {
              "html": "<strong>Errors must be propagated forward:</strong> if <var>source</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state④\">[[state]]</a>\n  is or becomes \"<code>errored</code>\", then",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If <var>preventAbort</var> is false, <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#rs-pipeTo-shutdown-with-action\" id=\"ref-for-rs-pipeTo-shutdown-with-action①\">shutdown with an action</a> of ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-abort\" id=\"ref-for-writable-stream-abort①\">WritableStreamAbort</a>(<var>dest</var>,\n  <var>source</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-storederror\" id=\"ref-for-readablestream-storederror①\">[[storedError]]</a>) and with\n  <var>source</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-storederror\" id=\"ref-for-readablestream-storederror②\">[[storedError]]</a>.</p>"
                },
                {
                  "html": "<p>Otherwise, <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#rs-pipeTo-shutdown\" id=\"ref-for-rs-pipeTo-shutdown\">shutdown</a> with <var>source</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-storederror\" id=\"ref-for-readablestream-storederror③\">[[storedError]]</a>.</p>"
                }
              ]
            },
            {
              "html": "<strong>Errors must be propagated backward:</strong> if <var>dest</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state①\">[[state]]</a>\n  is or becomes \"<code>errored</code>\", then",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If <var>preventCancel</var> is false, <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#rs-pipeTo-shutdown-with-action\" id=\"ref-for-rs-pipeTo-shutdown-with-action②\">shutdown with an action</a> of !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-cancel\" id=\"ref-for-readable-stream-cancel②\">ReadableStreamCancel</a>(<var>source</var>, <var>dest</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror\">[[storedError]]</a>) and with\n  <var>dest</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror①\">[[storedError]]</a>.</p>"
                },
                {
                  "html": "<p>Otherwise, <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#rs-pipeTo-shutdown\" id=\"ref-for-rs-pipeTo-shutdown①\">shutdown</a> with <var>dest</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror②\">[[storedError]]</a>.</p>"
                }
              ]
            },
            {
              "html": "<strong>Closing must be propagated forward:</strong> if <var>source</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state⑤\">[[state]]</a>\n  is or becomes \"<code>closed</code>\", then",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If <var>preventClose</var> is false, <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#rs-pipeTo-shutdown-with-action\" id=\"ref-for-rs-pipeTo-shutdown-with-action③\">shutdown with an action</a> of !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-writer-close-with-error-propagation\" id=\"ref-for-writable-stream-default-writer-close-with-error-propagation\">WritableStreamDefaultWriterCloseWithErrorPropagation</a>(<var>writer</var>).</p>"
                },
                {
                  "html": "<p>Otherwise, <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#rs-pipeTo-shutdown\" id=\"ref-for-rs-pipeTo-shutdown②\">shutdown</a>.</p>"
                }
              ]
            },
            {
              "html": "<strong>Closing must be propagated backward:</strong> if !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-close-queued-or-in-flight\" id=\"ref-for-writable-stream-close-queued-or-in-flight\">WritableStreamCloseQueuedOrInFlight</a>(<var>dest</var>) is true or <var>dest</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state②\">[[state]]</a>\n  is \"<code>closed</code>\", then",
              "rationale": "assert",
              "steps": [
                {
                  "html": "<p class=\"assertion\">Assert: no <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#chunk\" id=\"ref-for-chunk④②\">chunks</a> have been read or written.</p>"
                },
                {
                  "html": "<p>Let <var>destClosed</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror③⓪\">TypeError</a></code>.</p>"
                },
                {
                  "html": "<p>If <var>preventCancel</var> is false, <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#rs-pipeTo-shutdown-with-action\" id=\"ref-for-rs-pipeTo-shutdown-with-action④\">shutdown with an action</a> of !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-cancel\" id=\"ref-for-readable-stream-cancel③\">ReadableStreamCancel</a>(<var>source</var>, <var>destClosed</var>) and with <var>destClosed</var>.</p>"
                },
                {
                  "html": "<p>Otherwise, <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#rs-pipeTo-shutdown\" id=\"ref-for-rs-pipeTo-shutdown③\">shutdown</a> with <var>destClosed</var>.</p>"
                }
              ]
            }
          ],
          "additional": [
            {
              "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"rs-pipeTo-shutdown-with-action\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><i>Shutdown with an action</i></dfn>: if any of the\n above requirements ask to shutdown with an action <var>action</var>, optionally with an error\n <var>originalError</var>, then:",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If <var>shuttingDown</var> is true, abort these substeps.</p>"
                },
                {
                  "html": "<p>Set <var>shuttingDown</var> to true.</p>"
                },
                {
                  "html": "If <var>dest</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state③\">[[state]]</a> is \"<code>writable</code>\" and !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-close-queued-or-in-flight\" id=\"ref-for-writable-stream-close-queued-or-in-flight①\">WritableStreamCloseQueuedOrInFlight</a>(<var>dest</var>) is false,",
                  "rationale": "if",
                  "steps": [
                    {
                      "html": "<p>If any <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#chunk\" id=\"ref-for-chunk④③\">chunks</a> have been read but not yet written, write them to <var>dest</var>.</p>"
                    },
                    {
                      "html": "<p>Wait until every <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#chunk\" id=\"ref-for-chunk④④\">chunk</a> that has been read has been written (i.e. the corresponding\n  promises have settled).</p>"
                    }
                  ]
                },
                {
                  "html": "<p>Let <var>p</var> be the result of performing <var>action</var>.</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-fulfillment\" id=\"ref-for-upon-fulfillment\">Upon fulfillment</a> of <var>p</var>, <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#rs-pipeTo-finalize\" id=\"ref-for-rs-pipeTo-finalize\">finalize</a>, passing along <var>originalError</var> if it was given.</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-rejection\" id=\"ref-for-upon-rejection\">Upon rejection</a> of <var>p</var> with reason <var>newError</var>, <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#rs-pipeTo-finalize\" id=\"ref-for-rs-pipeTo-finalize①\">finalize</a> with <var>newError</var>.</p>"
                }
              ]
            },
            {
              "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"rs-pipeTo-shutdown\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><i>Shutdown</i></dfn>: if any of the above requirements or steps\n ask to shutdown, optionally with an error <var>error</var>, then:",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If <var>shuttingDown</var> is true, abort these substeps.</p>"
                },
                {
                  "html": "<p>Set <var>shuttingDown</var> to true.</p>"
                },
                {
                  "html": "If <var>dest</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state④\">[[state]]</a> is \"<code>writable</code>\" and !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-close-queued-or-in-flight\" id=\"ref-for-writable-stream-close-queued-or-in-flight②\">WritableStreamCloseQueuedOrInFlight</a>(<var>dest</var>) is false,",
                  "rationale": "if",
                  "steps": [
                    {
                      "html": "<p>If any <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#chunk\" id=\"ref-for-chunk④⑤\">chunks</a> have been read but not yet written, write them to <var>dest</var>.</p>"
                    },
                    {
                      "html": "<p>Wait until every <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#chunk\" id=\"ref-for-chunk④⑥\">chunk</a> that has been read has been written (i.e. the corresponding\n  promises have settled).</p>"
                    }
                  ]
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#rs-pipeTo-finalize\" id=\"ref-for-rs-pipeTo-finalize②\">Finalize</a>, passing along <var>error</var> if it was given.</p>"
                }
              ]
            },
            {
              "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"rs-pipeTo-finalize\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><i>Finalize</i></dfn>: both forms of shutdown will eventually ask\n to finalize, optionally with an error <var>error</var>, which means to perform the following steps:",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-writer-release\" id=\"ref-for-writable-stream-default-writer-release\">WritableStreamDefaultWriterRelease</a>(<var>writer</var>).</p>"
                },
                {
                  "html": "<p>If <var>reader</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements④\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader\" id=\"ref-for-readablestreambyobreader①①\">ReadableStreamBYOBReader</a></code>, perform\n  ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreambyobreaderrelease\" id=\"ref-for-abstract-opdef-readablestreambyobreaderrelease①\">ReadableStreamBYOBReaderRelease</a>(<var>reader</var>).</p>"
                },
                {
                  "html": "<p>Otherwise, perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamdefaultreaderrelease\" id=\"ref-for-abstract-opdef-readablestreamdefaultreaderrelease⑤\">ReadableStreamDefaultReaderRelease</a>(<var>reader</var>).</p>"
                },
                {
                  "html": "<p>If <var>signal</var> is not undefined, <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortsignal-remove\" id=\"ref-for-abortsignal-remove\">remove</a> <var>abortAlgorithm</var> from <var>signal</var>.</p>"
                },
                {
                  "html": "<p>If <var>error</var> was given, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject③\">reject</a> <var>promise</var> with <var>error</var>.</p>"
                },
                {
                  "html": "<p>Otherwise, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve⑥\">resolve</a> <var>promise</var> with undefined.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamTee",
      "href": "https://streams.spec.whatwg.org/#readable-stream-tee",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamTee\" id=\"readable-stream-tee\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamTee(<var>stream</var>,\n <var>cloneForBranch2</var>)</dfn> will <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#tee-a-readable-stream\" id=\"ref-for-tee-a-readable-stream③\">tee</a> a given readable stream.\n\n\n    <p>The second argument, <var>cloneForBranch2</var>, governs whether or not the data from the original stream\n will be cloned (using HTML’s <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#serializable-objects\" id=\"ref-for-serializable-objects\">serializable objects</a> framework) before appearing in the second of\n the returned branches. This is useful for scenarios where both branches are to be consumed in such\n a way that they might otherwise interfere with each other, such as by <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#transferable-objects\" id=\"ref-for-transferable-objects①\">transferring</a> their <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#chunk\" id=\"ref-for-chunk④⑦\">chunks</a>. However, it does introduce a noticeable asymmetry between\n the two branches, and limits the possible <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#chunk\" id=\"ref-for-chunk④⑧\">chunks</a> to serializable ones. <a data-link-type=\"biblio\" href=\"https://streams.spec.whatwg.org/#biblio-html\" title=\"HTML Standard\">[HTML]</a></p>\n    <p>If <var>stream</var> is a <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream\" id=\"ref-for-readable-byte-stream①②\">readable byte stream</a>, then <var>cloneForBranch2</var> is ignored and chunks are cloned\n unconditionally.</p>\n    \n    <p>It performs the following steps:</p>",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements⑤\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream③⑦\">ReadableStream</a></code>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>cloneForBranch2</var> is a boolean.</p>"
        },
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller③\">[[controller]]</a> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements⑥\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller\" id=\"ref-for-readablebytestreamcontroller①④\">ReadableByteStreamController</a></code>,\n  return ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee\" id=\"ref-for-abstract-opdef-readablebytestreamtee\">ReadableByteStreamTee</a>(<var>stream</var>).</p>"
        },
        {
          "html": "<p>Return ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamdefaulttee\" id=\"ref-for-abstract-opdef-readablestreamdefaulttee\">ReadableStreamDefaultTee</a>(<var>stream</var>, <var>cloneForBranch2</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultTee",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-readablestreamdefaulttee",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamDefaultTee\" id=\"abstract-opdef-readablestreamdefaulttee\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamDefaultTee(<var>stream</var>,\n <var>cloneForBranch2</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements⑦\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream③⑧\">ReadableStream</a></code>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>cloneForBranch2</var> is a boolean.</p>"
        },
        {
          "html": "<p>Let <var>reader</var> be ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#acquire-readable-stream-reader\" id=\"ref-for-acquire-readable-stream-reader④\">AcquireReadableStreamDefaultReader</a>(<var>stream</var>).</p>"
        },
        {
          "html": "<p>Let <var>reading</var> be false.</p>"
        },
        {
          "html": "<p>Let <var>readAgain</var> be false.</p>"
        },
        {
          "html": "<p>Let <var>canceled1</var> be false.</p>"
        },
        {
          "html": "<p>Let <var>canceled2</var> be false.</p>"
        },
        {
          "html": "<p>Let <var>reason1</var> be undefined.</p>"
        },
        {
          "html": "<p>Let <var>reason2</var> be undefined.</p>"
        },
        {
          "html": "<p>Let <var>branch1</var> be undefined.</p>"
        },
        {
          "html": "<p>Let <var>branch2</var> be undefined.</p>"
        },
        {
          "html": "<p>Let <var>cancelPromise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise④\">a new promise</a>.</p>"
        },
        {
          "html": "Let <var>pullAlgorithm</var> be the following steps:",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>reading</var> is true,",
              "rationale": "set",
              "steps": [
                {
                  "html": "<p>Set <var>readAgain</var> to true.</p>"
                },
                {
                  "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with⑥\">a promise resolved with</a> undefined.</p>"
                }
              ]
            },
            {
              "html": "<p>Set <var>reading</var> to true.</p>"
            },
            {
              "html": "<p>Let <var>readRequest</var> be a <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request\" id=\"ref-for-read-request③\">read request</a> with the following <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#struct-item\" id=\"ref-for-struct-item⑦\">items</a>:</p>\n        <dl>\n         <dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-chunk-steps\" id=\"ref-for-read-request-chunk-steps③\">chunk steps</a>, given <var>chunk</var>\n         </dt><dd data-md=\"\">\n          \n          \n         </dd><dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-close-steps\" id=\"ref-for-read-request-close-steps②\">close steps</a>\n         </dt><dd data-md=\"\">\n          \n         </dd><dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-error-steps\" id=\"ref-for-read-request-error-steps③\">error steps</a>\n         </dt><dd data-md=\"\">\n          \n        </dd></dl>",
              "rationale": "queue",
              "steps": [
                {
                  "html": "<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-microtask\" id=\"ref-for-queue-a-microtask\">Queue a microtask</a> to perform the following steps:",
                  "rationale": "set",
                  "steps": [
                    {
                      "html": "<p>Set <var>readAgain</var> to false.</p>"
                    },
                    {
                      "html": "<p>Let <var>chunk1</var> and <var>chunk2</var> be <var>chunk</var>.</p>"
                    },
                    {
                      "html": "If <var>canceled2</var> is false and <var>cloneForBranch2</var> is true,",
                      "rationale": "let",
                      "steps": [
                        {
                          "html": "<p>Let <var>cloneResult</var> be <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-structuredclone\" id=\"ref-for-abstract-opdef-structuredclone\">StructuredClone</a>(<var>chunk2</var>).</p>"
                        },
                        {
                          "html": "If <var>cloneResult</var> is an abrupt completion,",
                          "rationale": "perform",
                          "steps": [
                            {
                              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-error\" id=\"ref-for-readable-stream-default-controller-error①\">ReadableStreamDefaultControllerError</a>(<var>branch1</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller④\">[[controller]]</a>, <var>cloneResult</var>.[[Value]]).</p>"
                            },
                            {
                              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-error\" id=\"ref-for-readable-stream-default-controller-error②\">ReadableStreamDefaultControllerError</a>(<var>branch2</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑤\">[[controller]]</a>, <var>cloneResult</var>.[[Value]]).</p>"
                            },
                            {
                              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve⑦\">Resolve</a> <var>cancelPromise</var> with ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-cancel\" id=\"ref-for-readable-stream-cancel④\">ReadableStreamCancel</a>(<var>stream</var>, <var>cloneResult</var>.[[Value]]).</p>"
                            },
                            {
                              "html": "<p>Return.</p>"
                            }
                          ]
                        },
                        {
                          "html": "<p>Otherwise, set <var>chunk2</var> to <var>cloneResult</var>.[[Value]].</p>"
                        }
                      ]
                    },
                    {
                      "html": "<p>If <var>canceled1</var> is false, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-enqueue\" id=\"ref-for-readable-stream-default-controller-enqueue②\">ReadableStreamDefaultControllerEnqueue</a>(<var>branch1</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑥\">[[controller]]</a>,\n  <var>chunk1</var>).</p>"
                    },
                    {
                      "html": "<p>If <var>canceled2</var> is false, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-enqueue\" id=\"ref-for-readable-stream-default-controller-enqueue③\">ReadableStreamDefaultControllerEnqueue</a>(<var>branch2</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑦\">[[controller]]</a>,\n  <var>chunk2</var>).</p>"
                    },
                    {
                      "html": "<p>Set <var>reading</var> to false.</p>"
                    },
                    {
                      "html": "<p>If <var>readAgain</var> is true, perform <var>pullAlgorithm</var>.</p>"
                    }
                  ]
                }
              ],
              "additional": [
                {
                  "html": "",
                  "rationale": "set",
                  "steps": [
                    {
                      "html": "<p>Set <var>reading</var> to false.</p>"
                    },
                    {
                      "html": "<p>If <var>canceled1</var> is false, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-close\" id=\"ref-for-readable-stream-default-controller-close②\">ReadableStreamDefaultControllerClose</a>(<var>branch1</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑧\">[[controller]]</a>).</p>"
                    },
                    {
                      "html": "<p>If <var>canceled2</var> is false, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-close\" id=\"ref-for-readable-stream-default-controller-close③\">ReadableStreamDefaultControllerClose</a>(<var>branch2</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑨\">[[controller]]</a>).</p>"
                    },
                    {
                      "html": "<p>If <var>canceled1</var> is false or <var>canceled2</var> is false, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve⑧\">resolve</a> <var>cancelPromise</var> with undefined.</p>"
                    }
                  ]
                },
                {
                  "html": "",
                  "rationale": "set",
                  "steps": [
                    {
                      "html": "<p>Set <var>reading</var> to false.</p>"
                    }
                  ]
                }
              ]
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-reader-read\" id=\"ref-for-readable-stream-default-reader-read②\">ReadableStreamDefaultReaderRead</a>(<var>reader</var>, <var>readRequest</var>).</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with⑦\">a promise resolved with</a> undefined.</p>"
            }
          ]
        },
        {
          "html": "Let <var>cancel1Algorithm</var> be the following steps, taking a <var>reason</var> argument:",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>canceled1</var> to true.</p>"
            },
            {
              "html": "<p>Set <var>reason1</var> to <var>reason</var>.</p>"
            },
            {
              "html": "If <var>canceled2</var> is true,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>compositeReason</var> be ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-createarrayfromlist\" id=\"ref-for-sec-createarrayfromlist\">CreateArrayFromList</a>(« <var>reason1</var>, <var>reason2</var> »).</p>"
                },
                {
                  "html": "<p>Let <var>cancelResult</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-cancel\" id=\"ref-for-readable-stream-cancel⑤\">ReadableStreamCancel</a>(<var>stream</var>, <var>compositeReason</var>).</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve⑨\">Resolve</a> <var>cancelPromise</var> with <var>cancelResult</var>.</p>"
                }
              ]
            },
            {
              "html": "<p>Return <var>cancelPromise</var>.</p>"
            }
          ]
        },
        {
          "html": "Let <var>cancel2Algorithm</var> be the following steps, taking a <var>reason</var> argument:",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>canceled2</var> to true.</p>"
            },
            {
              "html": "<p>Set <var>reason2</var> to <var>reason</var>.</p>"
            },
            {
              "html": "If <var>canceled1</var> is true,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>compositeReason</var> be ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-createarrayfromlist\" id=\"ref-for-sec-createarrayfromlist①\">CreateArrayFromList</a>(« <var>reason1</var>, <var>reason2</var> »).</p>"
                },
                {
                  "html": "<p>Let <var>cancelResult</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-cancel\" id=\"ref-for-readable-stream-cancel⑥\">ReadableStreamCancel</a>(<var>stream</var>, <var>compositeReason</var>).</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve①⓪\">Resolve</a> <var>cancelPromise</var> with <var>cancelResult</var>.</p>"
                }
              ]
            },
            {
              "html": "<p>Return <var>cancelPromise</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>startAlgorithm</var> be an algorithm that returns undefined.</p>"
        },
        {
          "html": "<p>Set <var>branch1</var> to ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#create-readable-stream\" id=\"ref-for-create-readable-stream①\">CreateReadableStream</a>(<var>startAlgorithm</var>, <var>pullAlgorithm</var>,\n  <var>cancel1Algorithm</var>).</p>"
        },
        {
          "html": "<p>Set <var>branch2</var> to ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#create-readable-stream\" id=\"ref-for-create-readable-stream②\">CreateReadableStream</a>(<var>startAlgorithm</var>, <var>pullAlgorithm</var>,\n  <var>cancel2Algorithm</var>).</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-rejection\" id=\"ref-for-upon-rejection①\">Upon rejection</a> of <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-closedpromise\" id=\"ref-for-readablestreamgenericreader-closedpromise②\">[[closedPromise]]</a> with reason\n  <var>r</var>,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-error\" id=\"ref-for-readable-stream-default-controller-error③\">ReadableStreamDefaultControllerError</a>(<var>branch1</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller①⓪\">[[controller]]</a>,\n  <var>r</var>).</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-error\" id=\"ref-for-readable-stream-default-controller-error④\">ReadableStreamDefaultControllerError</a>(<var>branch2</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller①①\">[[controller]]</a>,\n  <var>r</var>).</p>"
            },
            {
              "html": "<p>If <var>canceled1</var> is false or <var>canceled2</var> is false, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve①①\">resolve</a> <var>cancelPromise</var> with undefined.</p>"
            }
          ]
        },
        {
          "html": "<p>Return « <var>branch1</var>, <var>branch2</var> ».</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamTee",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamtee",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamTee\" id=\"abstract-opdef-readablebytestreamtee\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamTee(<var>stream</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements⑧\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream③⑨\">ReadableStream</a></code>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller①②\">[[controller]]</a> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements⑨\">implements</a>\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller\" id=\"ref-for-readablebytestreamcontroller①⑤\">ReadableByteStreamController</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>reader</var> be ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#acquire-readable-stream-reader\" id=\"ref-for-acquire-readable-stream-reader⑤\">AcquireReadableStreamDefaultReader</a>(<var>stream</var>).</p>"
        },
        {
          "html": "<p>Let <var>reading</var> be false.</p>"
        },
        {
          "html": "<p>Let <var>readAgainForBranch1</var> be false.</p>"
        },
        {
          "html": "<p>Let <var>readAgainForBranch2</var> be false.</p>"
        },
        {
          "html": "<p>Let <var>canceled1</var> be false.</p>"
        },
        {
          "html": "<p>Let <var>canceled2</var> be false.</p>"
        },
        {
          "html": "<p>Let <var>reason1</var> be undefined.</p>"
        },
        {
          "html": "<p>Let <var>reason2</var> be undefined.</p>"
        },
        {
          "html": "<p>Let <var>branch1</var> be undefined.</p>"
        },
        {
          "html": "<p>Let <var>branch2</var> be undefined.</p>"
        },
        {
          "html": "<p>Let <var>cancelPromise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise⑤\">a new promise</a>.</p>"
        },
        {
          "html": "Let <var>forwardReaderError</var> be the following steps, taking a <var>thisReader</var> argument:",
          "rationale": "reject",
          "steps": [
            {
              "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-rejection\" id=\"ref-for-upon-rejection②\">Upon rejection</a> of <var>thisReader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-closedpromise\" id=\"ref-for-readablestreamgenericreader-closedpromise③\">[[closedPromise]]</a> with reason\n  <var>r</var>,",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If <var>thisReader</var> is not <var>reader</var>, return.</p>"
                },
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-error\" id=\"ref-for-readable-byte-stream-controller-error①\">ReadableByteStreamControllerError</a>(<var>branch1</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller①③\">[[controller]]</a>,\n  <var>r</var>).</p>"
                },
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-error\" id=\"ref-for-readable-byte-stream-controller-error②\">ReadableByteStreamControllerError</a>(<var>branch2</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller①④\">[[controller]]</a>,\n  <var>r</var>).</p>"
                },
                {
                  "html": "<p>If <var>canceled1</var> is false or <var>canceled2</var> is false, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve①②\">resolve</a> <var>cancelPromise</var> with undefined.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "Let <var>pullWithDefaultReader</var> be the following steps:",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>reader</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements①⓪\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader\" id=\"ref-for-readablestreambyobreader①②\">ReadableStreamBYOBReader</a></code>,",
              "rationale": "assert",
              "steps": [
                {
                  "html": "<p class=\"assertion\">Assert: <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader-readintorequests\" id=\"ref-for-readablestreambyobreader-readintorequests\">[[readIntoRequests]]</a> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty④\">empty</a>.</p>"
                },
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreambyobreaderrelease\" id=\"ref-for-abstract-opdef-readablestreambyobreaderrelease②\">ReadableStreamBYOBReaderRelease</a>(<var>reader</var>).</p>"
                },
                {
                  "html": "<p>Set <var>reader</var> to ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#acquire-readable-stream-reader\" id=\"ref-for-acquire-readable-stream-reader⑥\">AcquireReadableStreamDefaultReader</a>(<var>stream</var>).</p>"
                },
                {
                  "html": "<p>Perform <var>forwardReaderError</var>, given <var>reader</var>.</p>"
                }
              ]
            },
            {
              "html": "<p>Let <var>readRequest</var> be a <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request\" id=\"ref-for-read-request④\">read request</a> with the following <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#struct-item\" id=\"ref-for-struct-item⑧\">items</a>:</p>\n        <dl>\n         <dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-chunk-steps\" id=\"ref-for-read-request-chunk-steps④\">chunk steps</a>, given <var>chunk</var>\n         </dt><dd data-md=\"\">\n          \n          \n         </dd><dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-close-steps\" id=\"ref-for-read-request-close-steps③\">close steps</a>\n         </dt><dd data-md=\"\">\n          \n         </dd><dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-error-steps\" id=\"ref-for-read-request-error-steps④\">error steps</a>\n         </dt><dd data-md=\"\">\n          \n        </dd></dl>",
              "rationale": "queue",
              "steps": [
                {
                  "html": "<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-microtask\" id=\"ref-for-queue-a-microtask①\">Queue a microtask</a> to perform the following steps:",
                  "rationale": "set",
                  "steps": [
                    {
                      "html": "<p>Set <var>readAgainForBranch1</var> to false.</p>"
                    },
                    {
                      "html": "<p>Set <var>readAgainForBranch2</var> to false.</p>"
                    },
                    {
                      "html": "<p>Let <var>chunk1</var> and <var>chunk2</var> be <var>chunk</var>.</p>"
                    },
                    {
                      "html": "If <var>canceled1</var> is false and <var>canceled2</var> is false,",
                      "rationale": "let",
                      "steps": [
                        {
                          "html": "<p>Let <var>cloneResult</var> be <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-cloneasuint8array\" id=\"ref-for-abstract-opdef-cloneasuint8array\">CloneAsUint8Array</a>(<var>chunk</var>).</p>"
                        },
                        {
                          "html": "If <var>cloneResult</var> is an abrupt completion,",
                          "rationale": "perform",
                          "steps": [
                            {
                              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-error\" id=\"ref-for-readable-byte-stream-controller-error③\">ReadableByteStreamControllerError</a>(<var>branch1</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller①⑤\">[[controller]]</a>, <var>cloneResult</var>.[[Value]]).</p>"
                            },
                            {
                              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-error\" id=\"ref-for-readable-byte-stream-controller-error④\">ReadableByteStreamControllerError</a>(<var>branch2</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller①⑥\">[[controller]]</a>, <var>cloneResult</var>.[[Value]]).</p>"
                            },
                            {
                              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve①③\">Resolve</a> <var>cancelPromise</var> with ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-cancel\" id=\"ref-for-readable-stream-cancel⑦\">ReadableStreamCancel</a>(<var>stream</var>, <var>cloneResult</var>.[[Value]]).</p>"
                            },
                            {
                              "html": "<p>Return.</p>"
                            }
                          ]
                        },
                        {
                          "html": "<p>Otherwise, set <var>chunk2</var> to <var>cloneResult</var>.[[Value]].</p>"
                        }
                      ]
                    },
                    {
                      "html": "<p>If <var>canceled1</var> is false, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-enqueue\" id=\"ref-for-readable-byte-stream-controller-enqueue①\">ReadableByteStreamControllerEnqueue</a>(<var>branch1</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller①⑦\">[[controller]]</a>,\n  <var>chunk1</var>).</p>"
                    },
                    {
                      "html": "<p>If <var>canceled2</var> is false, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-enqueue\" id=\"ref-for-readable-byte-stream-controller-enqueue②\">ReadableByteStreamControllerEnqueue</a>(<var>branch2</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller①⑧\">[[controller]]</a>,\n  <var>chunk2</var>).</p>"
                    },
                    {
                      "html": "<p>Set <var>reading</var> to false.</p>"
                    },
                    {
                      "html": "<p>If <var>readAgainForBranch1</var> is true, perform <var>pull1Algorithm</var>.</p>"
                    },
                    {
                      "html": "<p>Otherwise, if <var>readAgainForBranch2</var> is true, perform <var>pull2Algorithm</var>.</p>"
                    }
                  ]
                }
              ],
              "additional": [
                {
                  "html": "",
                  "rationale": "set",
                  "steps": [
                    {
                      "html": "<p>Set <var>reading</var> to false.</p>"
                    },
                    {
                      "html": "<p>If <var>canceled1</var> is false, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-close\" id=\"ref-for-readable-byte-stream-controller-close①\">ReadableByteStreamControllerClose</a>(<var>branch1</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller①⑨\">[[controller]]</a>).</p>"
                    },
                    {
                      "html": "<p>If <var>canceled2</var> is false, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-close\" id=\"ref-for-readable-byte-stream-controller-close②\">ReadableByteStreamControllerClose</a>(<var>branch2</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller②⓪\">[[controller]]</a>).</p>"
                    },
                    {
                      "html": "<p>If <var>branch1</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller②①\">[[controller]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos④\">[[pendingPullIntos]]</a>\n  is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty⑤\">empty</a>, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond\" id=\"ref-for-readable-byte-stream-controller-respond①\">ReadableByteStreamControllerRespond</a>(<var>branch1</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller②②\">[[controller]]</a>, 0).</p>"
                    },
                    {
                      "html": "<p>If <var>branch2</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller②③\">[[controller]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos⑤\">[[pendingPullIntos]]</a>\n  is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty⑥\">empty</a>, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond\" id=\"ref-for-readable-byte-stream-controller-respond②\">ReadableByteStreamControllerRespond</a>(<var>branch2</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller②④\">[[controller]]</a>, 0).</p>"
                    },
                    {
                      "html": "<p>If <var>canceled1</var> is false or <var>canceled2</var> is false, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve①④\">resolve</a> <var>cancelPromise</var> with undefined.</p>"
                    }
                  ]
                },
                {
                  "html": "",
                  "rationale": "set",
                  "steps": [
                    {
                      "html": "<p>Set <var>reading</var> to false.</p>"
                    }
                  ]
                }
              ]
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-reader-read\" id=\"ref-for-readable-stream-default-reader-read③\">ReadableStreamDefaultReaderRead</a>(<var>reader</var>, <var>readRequest</var>).</p>"
            }
          ]
        },
        {
          "html": "Let <var>pullWithBYOBReader</var> be the following steps, given <var>view</var> and <var>forBranch2</var>:",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>reader</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements①①\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader\" id=\"ref-for-readablestreamdefaultreader①①\">ReadableStreamDefaultReader</a></code>,",
              "rationale": "assert",
              "steps": [
                {
                  "html": "<p class=\"assertion\">Assert: <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader-readrequests\" id=\"ref-for-readablestreamdefaultreader-readrequests①\">[[readRequests]]</a> is <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty⑦\">empty</a>.</p>"
                },
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamdefaultreaderrelease\" id=\"ref-for-abstract-opdef-readablestreamdefaultreaderrelease⑥\">ReadableStreamDefaultReaderRelease</a>(<var>reader</var>).</p>"
                },
                {
                  "html": "<p>Set <var>reader</var> to ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#acquire-readable-stream-byob-reader\" id=\"ref-for-acquire-readable-stream-byob-reader②\">AcquireReadableStreamBYOBReader</a>(<var>stream</var>).</p>"
                },
                {
                  "html": "<p>Perform <var>forwardReaderError</var>, given <var>reader</var>.</p>"
                }
              ]
            },
            {
              "html": "<p>Let <var>byobBranch</var> be <var>branch2</var> if <var>forBranch2</var> is true, and <var>branch1</var> otherwise.</p>"
            },
            {
              "html": "<p>Let <var>otherBranch</var> be <var>branch2</var> if <var>forBranch2</var> is false, and <var>branch1</var> otherwise.</p>"
            },
            {
              "html": "<p>Let <var>readIntoRequest</var> be a <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-into-request\" id=\"ref-for-read-into-request②\">read-into request</a> with the following <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#struct-item\" id=\"ref-for-struct-item⑨\">items</a>:</p>\n        <dl>\n         <dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-into-request-chunk-steps\" id=\"ref-for-read-into-request-chunk-steps①\">chunk steps</a>, given <var>chunk</var>\n         </dt><dd data-md=\"\">\n          \n          \n         </dd><dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-into-request-close-steps\" id=\"ref-for-read-into-request-close-steps②\">close steps</a>, given <var>chunk</var>\n         </dt><dd data-md=\"\">\n          \n         </dd><dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-into-request-error-steps\" id=\"ref-for-read-into-request-error-steps①\">error steps</a>\n         </dt><dd data-md=\"\">\n          \n        </dd></dl>",
              "rationale": "queue",
              "steps": [
                {
                  "html": "<a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#queue-a-microtask\" id=\"ref-for-queue-a-microtask②\">Queue a microtask</a> to perform the following steps:",
                  "rationale": "set",
                  "steps": [
                    {
                      "html": "<p>Set <var>readAgainForBranch1</var> to false.</p>"
                    },
                    {
                      "html": "<p>Set <var>readAgainForBranch2</var> to false.</p>"
                    },
                    {
                      "html": "<p>Let <var>byobCanceled</var> be <var>canceled2</var> if <var>forBranch2</var> is true, and <var>canceled1</var> otherwise.</p>"
                    },
                    {
                      "html": "<p>Let <var>otherCanceled</var> be <var>canceled2</var> if <var>forBranch2</var> is false, and <var>canceled1</var> otherwise.</p>"
                    },
                    {
                      "html": "If <var>otherCanceled</var> is false,",
                      "rationale": "let",
                      "steps": [
                        {
                          "html": "<p>Let <var>cloneResult</var> be <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-cloneasuint8array\" id=\"ref-for-abstract-opdef-cloneasuint8array①\">CloneAsUint8Array</a>(<var>chunk</var>).</p>"
                        },
                        {
                          "html": "If <var>cloneResult</var> is an abrupt completion,",
                          "rationale": "perform",
                          "steps": [
                            {
                              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-error\" id=\"ref-for-readable-byte-stream-controller-error⑤\">ReadableByteStreamControllerError</a>(<var>byobBranch</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller②⑤\">[[controller]]</a>, <var>cloneResult</var>.[[Value]]).</p>"
                            },
                            {
                              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-error\" id=\"ref-for-readable-byte-stream-controller-error⑥\">ReadableByteStreamControllerError</a>(<var>otherBranch</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller②⑥\">[[controller]]</a>, <var>cloneResult</var>.[[Value]]).</p>"
                            },
                            {
                              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve①⑤\">Resolve</a> <var>cancelPromise</var> with ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-cancel\" id=\"ref-for-readable-stream-cancel⑧\">ReadableStreamCancel</a>(<var>stream</var>, <var>cloneResult</var>.[[Value]]).</p>"
                            },
                            {
                              "html": "<p>Return.</p>"
                            }
                          ]
                        },
                        {
                          "html": "<p>Otherwise, let <var>clonedChunk</var> be <var>cloneResult</var>.[[Value]].</p>"
                        },
                        {
                          "html": "<p>If <var>byobCanceled</var> is false, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond-with-new-view\" id=\"ref-for-readable-byte-stream-controller-respond-with-new-view①\">ReadableByteStreamControllerRespondWithNewView</a>(<var>byobBranch</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller②⑦\">[[controller]]</a>,\n  <var>chunk</var>).</p>"
                        },
                        {
                          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-enqueue\" id=\"ref-for-readable-byte-stream-controller-enqueue③\">ReadableByteStreamControllerEnqueue</a>(<var>otherBranch</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller②⑧\">[[controller]]</a>,\n  <var>clonedChunk</var>).</p>"
                        }
                      ]
                    },
                    {
                      "html": "<p>Otherwise, if <var>byobCanceled</var> is false, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond-with-new-view\" id=\"ref-for-readable-byte-stream-controller-respond-with-new-view②\">ReadableByteStreamControllerRespondWithNewView</a>(<var>byobBranch</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller②⑨\">[[controller]]</a>,\n  <var>chunk</var>).</p>"
                    },
                    {
                      "html": "<p>Set <var>reading</var> to false.</p>"
                    },
                    {
                      "html": "<p>If <var>readAgainForBranch1</var> is true, perform <var>pull1Algorithm</var>.</p>"
                    },
                    {
                      "html": "<p>Otherwise, if <var>readAgainForBranch2</var> is true, perform <var>pull2Algorithm</var>.</p>"
                    }
                  ]
                }
              ],
              "additional": [
                {
                  "html": "",
                  "rationale": "set",
                  "steps": [
                    {
                      "html": "<p>Set <var>reading</var> to false.</p>"
                    },
                    {
                      "html": "<p>Let <var>byobCanceled</var> be <var>canceled2</var> if <var>forBranch2</var> is true, and <var>canceled1</var> otherwise.</p>"
                    },
                    {
                      "html": "<p>Let <var>otherCanceled</var> be <var>canceled2</var> if <var>forBranch2</var> is false, and <var>canceled1</var> otherwise.</p>"
                    },
                    {
                      "html": "<p>If <var>byobCanceled</var> is false, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-close\" id=\"ref-for-readable-byte-stream-controller-close③\">ReadableByteStreamControllerClose</a>(<var>byobBranch</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller③⓪\">[[controller]]</a>).</p>"
                    },
                    {
                      "html": "<p>If <var>otherCanceled</var> is false, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-close\" id=\"ref-for-readable-byte-stream-controller-close④\">ReadableByteStreamControllerClose</a>(<var>otherBranch</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller③①\">[[controller]]</a>).</p>"
                    },
                    {
                      "html": "If <var>chunk</var> is not undefined,",
                      "rationale": "assert",
                      "steps": [
                        {
                          "html": "<p class=\"assertion\">Assert: <var>chunk</var>.[[ByteLength]] is 0.</p>"
                        },
                        {
                          "html": "<p>If <var>byobCanceled</var> is false, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond-with-new-view\" id=\"ref-for-readable-byte-stream-controller-respond-with-new-view③\">ReadableByteStreamControllerRespondWithNewView</a>(<var>byobBranch</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller③②\">[[controller]]</a>,\n  <var>chunk</var>).</p>"
                        },
                        {
                          "html": "<p>If <var>otherCanceled</var> is false and\n  <var>otherBranch</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller③③\">[[controller]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos⑥\">[[pendingPullIntos]]</a>\n  is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty⑧\">empty</a>, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond\" id=\"ref-for-readable-byte-stream-controller-respond③\">ReadableByteStreamControllerRespond</a>(<var>otherBranch</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller③④\">[[controller]]</a>, 0).</p>"
                        }
                      ]
                    },
                    {
                      "html": "<p>If <var>byobCanceled</var> is false or <var>otherCanceled</var> is false, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve①⑥\">resolve</a> <var>cancelPromise</var> with undefined.</p>"
                    }
                  ]
                },
                {
                  "html": "",
                  "rationale": "set",
                  "steps": [
                    {
                      "html": "<p>Set <var>reading</var> to false.</p>"
                    }
                  ]
                }
              ]
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-byob-reader-read\" id=\"ref-for-readable-stream-byob-reader-read①\">ReadableStreamBYOBReaderRead</a>(<var>reader</var>, <var>view</var>, 1, <var>readIntoRequest</var>).</p>"
            }
          ]
        },
        {
          "html": "Let <var>pull1Algorithm</var> be the following steps:",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>reading</var> is true,",
              "rationale": "set",
              "steps": [
                {
                  "html": "<p>Set <var>readAgainForBranch1</var> to true.</p>"
                },
                {
                  "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with⑧\">a promise resolved with</a> undefined.</p>"
                }
              ]
            },
            {
              "html": "<p>Set <var>reading</var> to true.</p>"
            },
            {
              "html": "<p>Let <var>byobRequest</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollergetbyobrequest\" id=\"ref-for-abstract-opdef-readablebytestreamcontrollergetbyobrequest①\">ReadableByteStreamControllerGetBYOBRequest</a>(<var>branch1</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller③⑤\">[[controller]]</a>).</p>"
            },
            {
              "html": "<p>If <var>byobRequest</var> is null, perform <var>pullWithDefaultReader</var>.</p>"
            },
            {
              "html": "<p>Otherwise, perform <var>pullWithBYOBReader</var>, given <var>byobRequest</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest-view\" id=\"ref-for-readablestreambyobrequest-view④\">[[view]]</a> and false.</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with⑨\">a promise resolved with</a> undefined.</p>"
            }
          ]
        },
        {
          "html": "Let <var>pull2Algorithm</var> be the following steps:",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>reading</var> is true,",
              "rationale": "set",
              "steps": [
                {
                  "html": "<p>Set <var>readAgainForBranch2</var> to true.</p>"
                },
                {
                  "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with①⓪\">a promise resolved with</a> undefined.</p>"
                }
              ]
            },
            {
              "html": "<p>Set <var>reading</var> to true.</p>"
            },
            {
              "html": "<p>Let <var>byobRequest</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollergetbyobrequest\" id=\"ref-for-abstract-opdef-readablebytestreamcontrollergetbyobrequest②\">ReadableByteStreamControllerGetBYOBRequest</a>(<var>branch2</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller③⑥\">[[controller]]</a>).</p>"
            },
            {
              "html": "<p>If <var>byobRequest</var> is null, perform <var>pullWithDefaultReader</var>.</p>"
            },
            {
              "html": "<p>Otherwise, perform <var>pullWithBYOBReader</var>, given <var>byobRequest</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest-view\" id=\"ref-for-readablestreambyobrequest-view⑤\">[[view]]</a> and true.</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with①①\">a promise resolved with</a> undefined.</p>"
            }
          ]
        },
        {
          "html": "Let <var>cancel1Algorithm</var> be the following steps, taking a <var>reason</var> argument:",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>canceled1</var> to true.</p>"
            },
            {
              "html": "<p>Set <var>reason1</var> to <var>reason</var>.</p>"
            },
            {
              "html": "If <var>canceled2</var> is true,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>compositeReason</var> be ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-createarrayfromlist\" id=\"ref-for-sec-createarrayfromlist②\">CreateArrayFromList</a>(« <var>reason1</var>, <var>reason2</var> »).</p>"
                },
                {
                  "html": "<p>Let <var>cancelResult</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-cancel\" id=\"ref-for-readable-stream-cancel⑨\">ReadableStreamCancel</a>(<var>stream</var>, <var>compositeReason</var>).</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve①⑦\">Resolve</a> <var>cancelPromise</var> with <var>cancelResult</var>.</p>"
                }
              ]
            },
            {
              "html": "<p>Return <var>cancelPromise</var>.</p>"
            }
          ]
        },
        {
          "html": "Let <var>cancel2Algorithm</var> be the following steps, taking a <var>reason</var> argument:",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>canceled2</var> to true.</p>"
            },
            {
              "html": "<p>Set <var>reason2</var> to <var>reason</var>.</p>"
            },
            {
              "html": "If <var>canceled1</var> is true,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>compositeReason</var> be ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-createarrayfromlist\" id=\"ref-for-sec-createarrayfromlist③\">CreateArrayFromList</a>(« <var>reason1</var>, <var>reason2</var> »).</p>"
                },
                {
                  "html": "<p>Let <var>cancelResult</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-cancel\" id=\"ref-for-readable-stream-cancel①⓪\">ReadableStreamCancel</a>(<var>stream</var>, <var>compositeReason</var>).</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve①⑧\">Resolve</a> <var>cancelPromise</var> with <var>cancelResult</var>.</p>"
                }
              ]
            },
            {
              "html": "<p>Return <var>cancelPromise</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>startAlgorithm</var> be an algorithm that returns undefined.</p>"
        },
        {
          "html": "<p>Set <var>branch1</var> to ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-createreadablebytestream\" id=\"ref-for-abstract-opdef-createreadablebytestream\">CreateReadableByteStream</a>(<var>startAlgorithm</var>, <var>pull1Algorithm</var>,\n  <var>cancel1Algorithm</var>).</p>"
        },
        {
          "html": "<p>Set <var>branch2</var> to ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-createreadablebytestream\" id=\"ref-for-abstract-opdef-createreadablebytestream①\">CreateReadableByteStream</a>(<var>startAlgorithm</var>, <var>pull2Algorithm</var>,\n  <var>cancel2Algorithm</var>).</p>"
        },
        {
          "html": "<p>Perform <var>forwardReaderError</var>, given <var>reader</var>.</p>"
        },
        {
          "html": "<p>Return « <var>branch1</var>, <var>branch2</var> ».</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamAddReadIntoRequest",
      "href": "https://streams.spec.whatwg.org/#readable-stream-add-read-into-request",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamAddReadIntoRequest\" id=\"readable-stream-add-read-into-request\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamAddReadIntoRequest(<var>stream</var>,\n <var>readRequest</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader②\">[[reader]]</a> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements①②\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader\" id=\"ref-for-readablestreambyobreader①③\">ReadableStreamBYOBReader</a></code>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state⑥\">[[state]]</a> is \"<code>readable</code>\" or \"<code>closed</code>\".</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append①\">Append</a> <var>readRequest</var> to\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader③\">[[reader]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader-readintorequests\" id=\"ref-for-readablestreambyobreader-readintorequests①\">[[readIntoRequests]]</a>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamAddReadRequest",
      "href": "https://streams.spec.whatwg.org/#readable-stream-add-read-request",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamAddReadRequest\" id=\"readable-stream-add-read-request\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamAddReadRequest(<var>stream</var>, <var>readRequest</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader④\">[[reader]]</a> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements①③\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader\" id=\"ref-for-readablestreamdefaultreader①②\">ReadableStreamDefaultReader</a></code>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state⑦\">[[state]]</a> is \"<code>readable</code>\".</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append②\">Append</a> <var>readRequest</var> to\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader⑤\">[[reader]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader-readrequests\" id=\"ref-for-readablestreamdefaultreader-readrequests②\">[[readRequests]]</a>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamCancel",
      "href": "https://streams.spec.whatwg.org/#readable-stream-cancel",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamCancel\" id=\"readable-stream-cancel\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamCancel(<var>stream</var>, <var>reason</var>)</dfn> performs the following\n steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-disturbed\" id=\"ref-for-readablestream-disturbed②\">[[disturbed]]</a> to true.</p>"
        },
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state⑧\">[[state]]</a> is \"<code>closed</code>\", return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with①②\">a promise resolved with</a>\n  undefined.</p>"
        },
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state⑨\">[[state]]</a> is \"<code>errored</code>\", return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with①⑤\">a promise rejected with</a>\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-storederror\" id=\"ref-for-readablestream-storederror④\">[[storedError]]</a>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-close\" id=\"ref-for-readable-stream-close①\">ReadableStreamClose</a>(<var>stream</var>).</p>"
        },
        {
          "html": "<p>Let <var>reader</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader⑥\">[[reader]]</a>.</p>"
        },
        {
          "html": "If <var>reader</var> is not undefined and <var>reader</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements①④\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader\" id=\"ref-for-readablestreambyobreader①④\">ReadableStreamBYOBReader</a></code>,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>readIntoRequests</var> be <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader-readintorequests\" id=\"ref-for-readablestreambyobreader-readintorequests②\">[[readIntoRequests]]</a>.</p>"
            },
            {
              "html": "<p>Set <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader-readintorequests\" id=\"ref-for-readablestreambyobreader-readintorequests③\">[[readIntoRequests]]</a> to an empty <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list⑥\">list</a>.</p>"
            },
            {
              "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate\">For each</a> <var>readIntoRequest</var> of <var>readIntoRequests</var>,",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform <var>readIntoRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-into-request-close-steps\" id=\"ref-for-read-into-request-close-steps③\">close steps</a>, given undefined.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Let <var>sourceCancelPromise</var> be !\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller③⑦\">[[controller]]</a>.<a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamcontroller-cancelsteps\" id=\"ref-for-abstract-opdef-readablestreamcontroller-cancelsteps②\">[[CancelSteps]]</a>(<var>reason</var>).</p>"
        },
        {
          "html": "<p>Return the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-perform-steps-once-promise-is-settled\" id=\"ref-for-dfn-perform-steps-once-promise-is-settled②\">reacting</a> to <var>sourceCancelPromise</var> with a fulfillment step that returns\n  undefined.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamClose",
      "href": "https://streams.spec.whatwg.org/#readable-stream-close",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamClose\" id=\"readable-stream-close\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamClose(<var>stream</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state①⓪\">[[state]]</a> is \"<code>readable</code>\".</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state①①\">[[state]]</a> to \"<code>closed</code>\".</p>"
        },
        {
          "html": "<p>Let <var>reader</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader⑦\">[[reader]]</a>.</p>"
        },
        {
          "html": "<p>If <var>reader</var> is undefined, return.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve①⑨\">Resolve</a> <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-closedpromise\" id=\"ref-for-readablestreamgenericreader-closedpromise⑥\">[[closedPromise]]</a> with undefined.</p>"
        },
        {
          "html": "If <var>reader</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements①⑤\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader\" id=\"ref-for-readablestreamdefaultreader①③\">ReadableStreamDefaultReader</a></code>,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>readRequests</var> be <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader-readrequests\" id=\"ref-for-readablestreamdefaultreader-readrequests③\">[[readRequests]]</a>.</p>"
            },
            {
              "html": "<p>Set <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader-readrequests\" id=\"ref-for-readablestreamdefaultreader-readrequests④\">[[readRequests]]</a> to an empty <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list⑦\">list</a>.</p>"
            },
            {
              "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate①\">For each</a> <var>readRequest</var> of <var>readRequests</var>,",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform <var>readRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-close-steps\" id=\"ref-for-read-request-close-steps④\">close steps</a>.</p>"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableStreamError",
      "href": "https://streams.spec.whatwg.org/#readable-stream-error",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamError\" id=\"readable-stream-error\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamError(<var>stream</var>,\n <var>e</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state①②\">[[state]]</a> is \"<code>readable</code>\".</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state①③\">[[state]]</a> to \"<code>errored</code>\".</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-storederror\" id=\"ref-for-readablestream-storederror⑤\">[[storedError]]</a> to <var>e</var>.</p>"
        },
        {
          "html": "<p>Let <var>reader</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader⑧\">[[reader]]</a>.</p>"
        },
        {
          "html": "<p>If <var>reader</var> is undefined, return.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject④\">Reject</a> <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-closedpromise\" id=\"ref-for-readablestreamgenericreader-closedpromise⑦\">[[closedPromise]]</a> with <var>e</var>.</p>"
        },
        {
          "html": "<p>Set <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-closedpromise\" id=\"ref-for-readablestreamgenericreader-closedpromise⑧\">[[closedPromise]]</a>.[[PromiseIsHandled]] to true.</p>"
        },
        {
          "html": "If <var>reader</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements①⑥\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader\" id=\"ref-for-readablestreamdefaultreader①④\">ReadableStreamDefaultReader</a></code>,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamdefaultreadererrorreadrequests\" id=\"ref-for-abstract-opdef-readablestreamdefaultreadererrorreadrequests\">ReadableStreamDefaultReaderErrorReadRequests</a>(<var>reader</var>, <var>e</var>).</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>reader</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements①⑦\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader\" id=\"ref-for-readablestreambyobreader①⑤\">ReadableStreamBYOBReader</a></code>.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreambyobreadererrorreadintorequests\" id=\"ref-for-abstract-opdef-readablestreambyobreadererrorreadintorequests\">ReadableStreamBYOBReaderErrorReadIntoRequests</a>(<var>reader</var>, <var>e</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableStreamFulfillReadIntoRequest",
      "href": "https://streams.spec.whatwg.org/#readable-stream-fulfill-read-into-request",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamFulfillReadIntoRequest\" id=\"readable-stream-fulfill-read-into-request\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamFulfillReadIntoRequest(<var>stream</var>,\n <var>chunk</var>, <var>done</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-has-byob-reader\" id=\"ref-for-readable-stream-has-byob-reader\">ReadableStreamHasBYOBReader</a>(<var>stream</var>) is true.</p>"
        },
        {
          "html": "<p>Let <var>reader</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader⑨\">[[reader]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader-readintorequests\" id=\"ref-for-readablestreambyobreader-readintorequests④\">[[readIntoRequests]]</a> is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty⑨\">empty</a>.</p>"
        },
        {
          "html": "<p>Let <var>readIntoRequest</var> be <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader-readintorequests\" id=\"ref-for-readablestreambyobreader-readintorequests⑤\">[[readIntoRequests]]</a>[0].</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-remove\" id=\"ref-for-list-remove\">Remove</a> <var>readIntoRequest</var> from\n  <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader-readintorequests\" id=\"ref-for-readablestreambyobreader-readintorequests⑥\">[[readIntoRequests]]</a>.</p>"
        },
        {
          "html": "<p>If <var>done</var> is true, perform <var>readIntoRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-into-request-close-steps\" id=\"ref-for-read-into-request-close-steps④\">close steps</a>, given <var>chunk</var>.</p>"
        },
        {
          "html": "<p>Otherwise, perform <var>readIntoRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-into-request-chunk-steps\" id=\"ref-for-read-into-request-chunk-steps②\">chunk steps</a>, given <var>chunk</var>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamFulfillReadRequest",
      "href": "https://streams.spec.whatwg.org/#readable-stream-fulfill-read-request",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamFulfillReadRequest\" id=\"readable-stream-fulfill-read-request\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamFulfillReadRequest(<var>stream</var>, <var>chunk</var>,\n <var>done</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-has-default-reader\" id=\"ref-for-readable-stream-has-default-reader①\">ReadableStreamHasDefaultReader</a>(<var>stream</var>) is true.</p>"
        },
        {
          "html": "<p>Let <var>reader</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader①⓪\">[[reader]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader-readrequests\" id=\"ref-for-readablestreamdefaultreader-readrequests⑤\">[[readRequests]]</a> is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty①⓪\">empty</a>.</p>"
        },
        {
          "html": "<p>Let <var>readRequest</var> be <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader-readrequests\" id=\"ref-for-readablestreamdefaultreader-readrequests⑥\">[[readRequests]]</a>[0].</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-remove\" id=\"ref-for-list-remove①\">Remove</a> <var>readRequest</var> from <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader-readrequests\" id=\"ref-for-readablestreamdefaultreader-readrequests⑦\">[[readRequests]]</a>.</p>"
        },
        {
          "html": "<p>If <var>done</var> is true, perform <var>readRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-close-steps\" id=\"ref-for-read-request-close-steps⑤\">close steps</a>.</p>"
        },
        {
          "html": "<p>Otherwise, perform <var>readRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-chunk-steps\" id=\"ref-for-read-request-chunk-steps⑤\">chunk steps</a>, given <var>chunk</var>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamGetNumReadIntoRequests",
      "href": "https://streams.spec.whatwg.org/#readable-stream-get-num-read-into-requests",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamGetNumReadIntoRequests\" id=\"readable-stream-get-num-read-into-requests\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamGetNumReadIntoRequests(<var>stream</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-has-byob-reader\" id=\"ref-for-readable-stream-has-byob-reader①\">ReadableStreamHasBYOBReader</a>(<var>stream</var>) is true.</p>"
        },
        {
          "html": "<p>Return\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader①①\">[[reader]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader-readintorequests\" id=\"ref-for-readablestreambyobreader-readintorequests⑦\">[[readIntoRequests]]</a>’s\n  <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-size\" id=\"ref-for-list-size\">size</a>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamGetNumReadRequests",
      "href": "https://streams.spec.whatwg.org/#readable-stream-get-num-read-requests",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamGetNumReadRequests\" id=\"readable-stream-get-num-read-requests\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamGetNumReadRequests(<var>stream</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-has-default-reader\" id=\"ref-for-readable-stream-has-default-reader②\">ReadableStreamHasDefaultReader</a>(<var>stream</var>) is true.</p>"
        },
        {
          "html": "<p>Return <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader①②\">[[reader]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader-readrequests\" id=\"ref-for-readablestreamdefaultreader-readrequests⑧\">[[readRequests]]</a>’s\n  <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-size\" id=\"ref-for-list-size①\">size</a>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamHasBYOBReader",
      "href": "https://streams.spec.whatwg.org/#readable-stream-has-byob-reader",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamHasBYOBReader\" id=\"readable-stream-has-byob-reader\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamHasBYOBReader(<var>stream</var>)</dfn> performs the\n following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>reader</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader①③\">[[reader]]</a>.</p>"
        },
        {
          "html": "<p>If <var>reader</var> is undefined, return false.</p>"
        },
        {
          "html": "<p>If <var>reader</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements①⑧\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader\" id=\"ref-for-readablestreambyobreader①⑥\">ReadableStreamBYOBReader</a></code>, return true.</p>"
        },
        {
          "html": "<p>Return false.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamHasDefaultReader",
      "href": "https://streams.spec.whatwg.org/#readable-stream-has-default-reader",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamHasDefaultReader\" id=\"readable-stream-has-default-reader\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamHasDefaultReader(<var>stream</var>)</dfn> performs the\n following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>reader</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader①④\">[[reader]]</a>.</p>"
        },
        {
          "html": "<p>If <var>reader</var> is undefined, return false.</p>"
        },
        {
          "html": "<p>If <var>reader</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements①⑨\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader\" id=\"ref-for-readablestreamdefaultreader①⑤\">ReadableStreamDefaultReader</a></code>, return true.</p>"
        },
        {
          "html": "<p>Return false.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamReaderGenericCancel",
      "href": "https://streams.spec.whatwg.org/#readable-stream-reader-generic-cancel",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamReaderGenericCancel\" id=\"readable-stream-reader-generic-cancel\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamReaderGenericCancel(<var>reader</var>,\n <var>reason</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-stream\" id=\"ref-for-readablestreamgenericreader-stream⑦\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var> is not undefined.</p>"
        },
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-cancel\" id=\"ref-for-readable-stream-cancel①①\">ReadableStreamCancel</a>(<var>stream</var>, <var>reason</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamReaderGenericInitialize",
      "href": "https://streams.spec.whatwg.org/#readable-stream-reader-generic-initialize",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamReaderGenericInitialize\" id=\"readable-stream-reader-generic-initialize\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamReaderGenericInitialize(<var>reader</var>,\n <var>stream</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Set <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-stream\" id=\"ref-for-readablestreamgenericreader-stream⑧\">[[stream]]</a> to <var>stream</var>.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader①⑤\">[[reader]]</a> to <var>reader</var>.</p>"
        },
        {
          "html": "If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state①④\">[[state]]</a> is \"<code>readable</code>\",",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-closedpromise\" id=\"ref-for-readablestreamgenericreader-closedpromise⑨\">[[closedPromise]]</a> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise⑥\">a new promise</a>.</p>"
            }
          ]
        },
        {
          "html": "Otherwise, if <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state①⑤\">[[state]]</a> is \"<code>closed</code>\",",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-closedpromise\" id=\"ref-for-readablestreamgenericreader-closedpromise①⓪\">[[closedPromise]]</a> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with①③\">a promise resolved with</a>\n  undefined.</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state①⑥\">[[state]]</a> is \"<code>errored</code>\".</p>"
            },
            {
              "html": "<p>Set <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-closedpromise\" id=\"ref-for-readablestreamgenericreader-closedpromise①①\">[[closedPromise]]</a> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with①⑥\">a promise rejected with</a>\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-storederror\" id=\"ref-for-readablestream-storederror⑥\">[[storedError]]</a>.</p>"
            },
            {
              "html": "<p>Set <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-closedpromise\" id=\"ref-for-readablestreamgenericreader-closedpromise①②\">[[closedPromise]]</a>.[[PromiseIsHandled]] to true.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableStreamReaderGenericRelease",
      "href": "https://streams.spec.whatwg.org/#readable-stream-reader-generic-release",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamReaderGenericRelease\" id=\"readable-stream-reader-generic-release\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamReaderGenericRelease(<var>reader</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-stream\" id=\"ref-for-readablestreamgenericreader-stream⑨\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var> is not undefined.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader①⑥\">[[reader]]</a> is <var>reader</var>.</p>"
        },
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state①⑦\">[[state]]</a> is \"<code>readable</code>\", <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject⑤\">reject</a>\n  <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-closedpromise\" id=\"ref-for-readablestreamgenericreader-closedpromise①③\">[[closedPromise]]</a> with a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror③①\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Otherwise, set <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-closedpromise\" id=\"ref-for-readablestreamgenericreader-closedpromise①④\">[[closedPromise]]</a> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with①⑦\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror③②\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Set <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-closedpromise\" id=\"ref-for-readablestreamgenericreader-closedpromise①⑤\">[[closedPromise]]</a>.[[PromiseIsHandled]] to true.</p>"
        },
        {
          "html": "<p>Perform ! <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller③⑧\">[[controller]]</a>.<a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamcontroller-releasesteps\" id=\"ref-for-abstract-opdef-readablestreamcontroller-releasesteps②\">[[ReleaseSteps]]</a>().</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader①⑦\">[[reader]]</a> to undefined.</p>"
        },
        {
          "html": "<p>Set <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-stream\" id=\"ref-for-readablestreamgenericreader-stream①⓪\">[[stream]]</a> to undefined.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamBYOBReaderErrorReadIntoRequests",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-readablestreambyobreadererrorreadintorequests",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamBYOBReaderErrorReadIntoRequests\" id=\"abstract-opdef-readablestreambyobreadererrorreadintorequests\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamBYOBReaderErrorReadIntoRequests(<var>reader</var>, <var>e</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>readIntoRequests</var> be <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader-readintorequests\" id=\"ref-for-readablestreambyobreader-readintorequests⑧\">[[readIntoRequests]]</a>.</p>"
        },
        {
          "html": "<p>Set <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader-readintorequests\" id=\"ref-for-readablestreambyobreader-readintorequests⑨\">[[readIntoRequests]]</a> to a new empty <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list⑧\">list</a>.</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate②\">For each</a> <var>readIntoRequest</var> of <var>readIntoRequests</var>,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform <var>readIntoRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-into-request-error-steps\" id=\"ref-for-read-into-request-error-steps②\">error steps</a>, given <var>e</var>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableStreamBYOBReaderRead",
      "href": "https://streams.spec.whatwg.org/#readable-stream-byob-reader-read",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamBYOBReaderRead\" id=\"readable-stream-byob-reader-read\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamBYOBReaderRead(<var>reader</var>, <var>view</var>, <var>min</var>,\n <var>readIntoRequest</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-stream\" id=\"ref-for-readablestreamgenericreader-stream①①\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var> is not undefined.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-disturbed\" id=\"ref-for-readablestream-disturbed③\">[[disturbed]]</a> to true.</p>"
        },
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state①⑧\">[[state]]</a> is \"<code>errored</code>\", perform <var>readIntoRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-into-request-error-steps\" id=\"ref-for-read-into-request-error-steps③\">error steps</a> given <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-storederror\" id=\"ref-for-readablestream-storederror⑦\">[[storedError]]</a>.</p>"
        },
        {
          "html": "<p>Otherwise, perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-pull-into\" id=\"ref-for-readable-byte-stream-controller-pull-into\">ReadableByteStreamControllerPullInto</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller③⑨\">[[controller]]</a>,\n  <var>view</var>, <var>min</var>, <var>readIntoRequest</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamBYOBReaderRelease",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-readablestreambyobreaderrelease",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamBYOBReaderRelease\" id=\"abstract-opdef-readablestreambyobreaderrelease\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamBYOBReaderRelease(<var>reader</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-reader-generic-release\" id=\"ref-for-readable-stream-reader-generic-release\">ReadableStreamReaderGenericRelease</a>(<var>reader</var>).</p>"
        },
        {
          "html": "<p>Let <var>e</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror③③\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreambyobreadererrorreadintorequests\" id=\"ref-for-abstract-opdef-readablestreambyobreadererrorreadintorequests①\">ReadableStreamBYOBReaderErrorReadIntoRequests</a>(<var>reader</var>, <var>e</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultReaderErrorReadRequests",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-readablestreamdefaultreadererrorreadrequests",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamDefaultReaderErrorReadRequests\" id=\"abstract-opdef-readablestreamdefaultreadererrorreadrequests\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamDefaultReaderErrorReadRequests(<var>reader</var>, <var>e</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>readRequests</var> be <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader-readrequests\" id=\"ref-for-readablestreamdefaultreader-readrequests⑨\">[[readRequests]]</a>.</p>"
        },
        {
          "html": "<p>Set <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader-readrequests\" id=\"ref-for-readablestreamdefaultreader-readrequests①⓪\">[[readRequests]]</a> to a new empty <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list⑨\">list</a>.</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate③\">For each</a> <var>readRequest</var> of <var>readRequests</var>,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform <var>readRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-error-steps\" id=\"ref-for-read-request-error-steps⑤\">error steps</a>, given <var>e</var>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultReaderRead",
      "href": "https://streams.spec.whatwg.org/#readable-stream-default-reader-read",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamDefaultReaderRead\" id=\"readable-stream-default-reader-read\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamDefaultReaderRead(<var>reader</var>,\n <var>readRequest</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamgenericreader-stream\" id=\"ref-for-readablestreamgenericreader-stream①②\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var> is not undefined.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-disturbed\" id=\"ref-for-readablestream-disturbed④\">[[disturbed]]</a> to true.</p>"
        },
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state①⑨\">[[state]]</a> is \"<code>closed</code>\", perform <var>readRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-close-steps\" id=\"ref-for-read-request-close-steps⑥\">close steps</a>.</p>"
        },
        {
          "html": "<p>Otherwise, if <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state②⓪\">[[state]]</a> is \"<code>errored</code>\", perform <var>readRequest</var>’s\n  <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-error-steps\" id=\"ref-for-read-request-error-steps⑥\">error steps</a> given <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-storederror\" id=\"ref-for-readablestream-storederror⑧\">[[storedError]]</a>.</p>"
        },
        {
          "html": "Otherwise,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state②①\">[[state]]</a> is \"<code>readable</code>\".</p>"
            },
            {
              "html": "<p>Perform !\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller④⓪\">[[controller]]</a>.<a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamcontroller-pullsteps\" id=\"ref-for-abstract-opdef-readablestreamcontroller-pullsteps②\">[[PullSteps]]</a>(<var>readRequest</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultReaderRelease",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-readablestreamdefaultreaderrelease",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamDefaultReaderRelease\" id=\"abstract-opdef-readablestreamdefaultreaderrelease\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamDefaultReaderRelease(<var>reader</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-reader-generic-release\" id=\"ref-for-readable-stream-reader-generic-release①\">ReadableStreamReaderGenericRelease</a>(<var>reader</var>).</p>"
        },
        {
          "html": "<p>Let <var>e</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror③④\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamdefaultreadererrorreadrequests\" id=\"ref-for-abstract-opdef-readablestreamdefaultreadererrorreadrequests①\">ReadableStreamDefaultReaderErrorReadRequests</a>(<var>reader</var>, <var>e</var>).</p>"
        }
      ]
    },
    {
      "name": "SetUpReadableStreamBYOBReader",
      "href": "https://streams.spec.whatwg.org/#set-up-readable-stream-byob-reader",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"SetUpReadableStreamBYOBReader\" id=\"set-up-readable-stream-byob-reader\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">SetUpReadableStreamBYOBReader(<var>reader</var>, <var>stream</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-readable-stream-locked\" id=\"ref-for-is-readable-stream-locked⑥\">IsReadableStreamLocked</a>(<var>stream</var>) is true, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror③⑤\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller④①\">[[controller]]</a> does not <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements②⓪\">implement</a>\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller\" id=\"ref-for-readablebytestreamcontroller①⑦\">ReadableByteStreamController</a></code>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror③⑥\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-reader-generic-initialize\" id=\"ref-for-readable-stream-reader-generic-initialize\">ReadableStreamReaderGenericInitialize</a>(<var>reader</var>, <var>stream</var>).</p>"
        },
        {
          "html": "<p>Set <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobreader-readintorequests\" id=\"ref-for-readablestreambyobreader-readintorequests①⓪\">[[readIntoRequests]]</a> to a new empty <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list①⓪\">list</a>.</p>"
        }
      ]
    },
    {
      "name": "SetUpReadableStreamDefaultReader",
      "href": "https://streams.spec.whatwg.org/#set-up-readable-stream-default-reader",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"SetUpReadableStreamDefaultReader\" id=\"set-up-readable-stream-default-reader\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">SetUpReadableStreamDefaultReader(<var>reader</var>,\n <var>stream</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-readable-stream-locked\" id=\"ref-for-is-readable-stream-locked⑦\">IsReadableStreamLocked</a>(<var>stream</var>) is true, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror③⑦\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-reader-generic-initialize\" id=\"ref-for-readable-stream-reader-generic-initialize①\">ReadableStreamReaderGenericInitialize</a>(<var>reader</var>, <var>stream</var>).</p>"
        },
        {
          "html": "<p>Set <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader-readrequests\" id=\"ref-for-readablestreamdefaultreader-readrequests①①\">[[readRequests]]</a> to a new empty <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list①①\">list</a>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultControllerCallPullIfNeeded",
      "href": "https://streams.spec.whatwg.org/#readable-stream-default-controller-call-pull-if-needed",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamDefaultControllerCallPullIfNeeded\" id=\"readable-stream-default-controller-call-pull-if-needed\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamDefaultControllerCallPullIfNeeded(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>shouldPull</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-should-call-pull\" id=\"ref-for-readable-stream-default-controller-should-call-pull\">ReadableStreamDefaultControllerShouldCallPull</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>If <var>shouldPull</var> is false, return.</p>"
        },
        {
          "html": "If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-pulling\" id=\"ref-for-readablestreamdefaultcontroller-pulling\">[[pulling]]</a> is true,",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-pullagain\" id=\"ref-for-readablestreamdefaultcontroller-pullagain\">[[pullAgain]]</a> to true.</p>"
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-pullagain\" id=\"ref-for-readablestreamdefaultcontroller-pullagain①\">[[pullAgain]]</a> is false.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-pulling\" id=\"ref-for-readablestreamdefaultcontroller-pulling①\">[[pulling]]</a> to true.</p>"
        },
        {
          "html": "<p>Let <var>pullPromise</var> be the result of performing\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-pullalgorithm\" id=\"ref-for-readablestreamdefaultcontroller-pullalgorithm\">[[pullAlgorithm]]</a>.</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-fulfillment\" id=\"ref-for-upon-fulfillment①\">Upon fulfillment</a> of <var>pullPromise</var>,",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-pulling\" id=\"ref-for-readablestreamdefaultcontroller-pulling②\">[[pulling]]</a> to false.</p>"
            },
            {
              "html": "If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-pullagain\" id=\"ref-for-readablestreamdefaultcontroller-pullagain②\">[[pullAgain]]</a> is true,",
              "rationale": "set",
              "steps": [
                {
                  "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-pullagain\" id=\"ref-for-readablestreamdefaultcontroller-pullagain③\">[[pullAgain]]</a> to false.</p>"
                },
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-call-pull-if-needed\" id=\"ref-for-readable-stream-default-controller-call-pull-if-needed②\">ReadableStreamDefaultControllerCallPullIfNeeded</a>(<var>controller</var>).</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-rejection\" id=\"ref-for-upon-rejection③\">Upon rejection</a> of <var>pullPromise</var> with reason <var>e</var>,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-error\" id=\"ref-for-readable-stream-default-controller-error⑤\">ReadableStreamDefaultControllerError</a>(<var>controller</var>, <var>e</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultControllerShouldCallPull",
      "href": "https://streams.spec.whatwg.org/#readable-stream-default-controller-should-call-pull",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamDefaultControllerShouldCallPull\" id=\"readable-stream-default-controller-should-call-pull\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamDefaultControllerShouldCallPull(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-stream\" id=\"ref-for-readablestreamdefaultcontroller-stream①\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-can-close-or-enqueue\" id=\"ref-for-readable-stream-default-controller-can-close-or-enqueue②\">ReadableStreamDefaultControllerCanCloseOrEnqueue</a>(<var>controller</var>) is false, return false.</p>"
        },
        {
          "html": "<p>If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-started\" id=\"ref-for-readablestreamdefaultcontroller-started\">[[started]]</a> is false, return false.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-readable-stream-locked\" id=\"ref-for-is-readable-stream-locked⑧\">IsReadableStreamLocked</a>(<var>stream</var>) is true and !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-get-num-read-requests\" id=\"ref-for-readable-stream-get-num-read-requests①\">ReadableStreamGetNumReadRequests</a>(<var>stream</var>) &gt; 0, return true.</p>"
        },
        {
          "html": "<p>Let <var>desiredSize</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-get-desired-size\" id=\"ref-for-readable-stream-default-controller-get-desired-size①\">ReadableStreamDefaultControllerGetDesiredSize</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>desiredSize</var> is not null.</p>"
        },
        {
          "html": "<p>If <var>desiredSize</var> &gt; 0, return true.</p>"
        },
        {
          "html": "<p>Return false.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultControllerClearAlgorithms",
      "href": "https://streams.spec.whatwg.org/#readable-stream-default-controller-clear-algorithms",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamDefaultControllerClearAlgorithms\" id=\"readable-stream-default-controller-clear-algorithms\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamDefaultControllerClearAlgorithms(<var>controller</var>)</dfn>\n is called once the stream is closed or errored and the algorithms will not be executed any more. By\n removing the algorithm references it permits the <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#underlying-source\" id=\"ref-for-underlying-source②⑤\">underlying source</a> object to be garbage\n collected even if the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream④⑤\">ReadableStream</a></code> itself is still referenced.\n\n \n    \n    <p>It performs the following steps:</p>",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-pullalgorithm\" id=\"ref-for-readablestreamdefaultcontroller-pullalgorithm①\">[[pullAlgorithm]]</a> to undefined.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-cancelalgorithm\" id=\"ref-for-readablestreamdefaultcontroller-cancelalgorithm①\">[[cancelAlgorithm]]</a> to undefined.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-strategysizealgorithm\" id=\"ref-for-readablestreamdefaultcontroller-strategysizealgorithm\">[[strategySizeAlgorithm]]</a> to undefined.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultControllerClose",
      "href": "https://streams.spec.whatwg.org/#readable-stream-default-controller-close",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamDefaultControllerClose\" id=\"readable-stream-default-controller-close\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamDefaultControllerClose(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-can-close-or-enqueue\" id=\"ref-for-readable-stream-default-controller-can-close-or-enqueue③\">ReadableStreamDefaultControllerCanCloseOrEnqueue</a>(<var>controller</var>) is false, return.</p>"
        },
        {
          "html": "<p>Let <var>stream</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-stream\" id=\"ref-for-readablestreamdefaultcontroller-stream②\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-closerequested\" id=\"ref-for-readablestreamdefaultcontroller-closerequested①\">[[closeRequested]]</a> to true.</p>"
        },
        {
          "html": "If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-queue\" id=\"ref-for-readablestreamdefaultcontroller-queue③\">[[queue]]</a> <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty①①\">is empty</a>,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-clear-algorithms\" id=\"ref-for-readable-stream-default-controller-clear-algorithms②\">ReadableStreamDefaultControllerClearAlgorithms</a>(<var>controller</var>).</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-close\" id=\"ref-for-readable-stream-close②\">ReadableStreamClose</a>(<var>stream</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultControllerEnqueue",
      "href": "https://streams.spec.whatwg.org/#readable-stream-default-controller-enqueue",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamDefaultControllerEnqueue\" id=\"readable-stream-default-controller-enqueue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamDefaultControllerEnqueue(<var>controller</var>,\n <var>chunk</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-can-close-or-enqueue\" id=\"ref-for-readable-stream-default-controller-can-close-or-enqueue④\">ReadableStreamDefaultControllerCanCloseOrEnqueue</a>(<var>controller</var>) is false, return.</p>"
        },
        {
          "html": "<p>Let <var>stream</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-stream\" id=\"ref-for-readablestreamdefaultcontroller-stream③\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-readable-stream-locked\" id=\"ref-for-is-readable-stream-locked⑨\">IsReadableStreamLocked</a>(<var>stream</var>) is true and !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-get-num-read-requests\" id=\"ref-for-readable-stream-get-num-read-requests②\">ReadableStreamGetNumReadRequests</a>(<var>stream</var>) &gt; 0, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-fulfill-read-request\" id=\"ref-for-readable-stream-fulfill-read-request\">ReadableStreamFulfillReadRequest</a>(<var>stream</var>, <var>chunk</var>, false).</p>"
        },
        {
          "html": "Otherwise,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>result</var> be the result of performing\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-strategysizealgorithm\" id=\"ref-for-readablestreamdefaultcontroller-strategysizealgorithm①\">[[strategySizeAlgorithm]]</a>, passing in <var>chunk</var>,\n  and interpreting the result as a <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-completion-record-specification-type\" id=\"ref-for-sec-completion-record-specification-type①\">completion record</a>.</p>"
            },
            {
              "html": "If <var>result</var> is an abrupt completion,",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-error\" id=\"ref-for-readable-stream-default-controller-error⑥\">ReadableStreamDefaultControllerError</a>(<var>controller</var>, <var>result</var>.[[Value]]).</p>"
                },
                {
                  "html": "<p>Return <var>result</var>.</p>"
                }
              ]
            },
            {
              "html": "<p>Let <var>chunkSize</var> be <var>result</var>.[[Value]].</p>"
            },
            {
              "html": "<p>Let <var>enqueueResult</var> be <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#enqueue-value-with-size\" id=\"ref-for-enqueue-value-with-size\">EnqueueValueWithSize</a>(<var>controller</var>, <var>chunk</var>, <var>chunkSize</var>).</p>"
            },
            {
              "html": "If <var>enqueueResult</var> is an abrupt completion,",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-error\" id=\"ref-for-readable-stream-default-controller-error⑦\">ReadableStreamDefaultControllerError</a>(<var>controller</var>, <var>enqueueResult</var>.[[Value]]).</p>"
                },
                {
                  "html": "<p>Return <var>enqueueResult</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-call-pull-if-needed\" id=\"ref-for-readable-stream-default-controller-call-pull-if-needed③\">ReadableStreamDefaultControllerCallPullIfNeeded</a>(<var>controller</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultControllerError",
      "href": "https://streams.spec.whatwg.org/#readable-stream-default-controller-error",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamDefaultControllerError\" id=\"readable-stream-default-controller-error\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamDefaultControllerError(<var>controller</var>,\n <var>e</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-stream\" id=\"ref-for-readablestreamdefaultcontroller-stream④\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state②②\">[[state]]</a> is not \"<code>readable</code>\", return.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#reset-queue\" id=\"ref-for-reset-queue②\">ResetQueue</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-clear-algorithms\" id=\"ref-for-readable-stream-default-controller-clear-algorithms③\">ReadableStreamDefaultControllerClearAlgorithms</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-error\" id=\"ref-for-readable-stream-error\">ReadableStreamError</a>(<var>stream</var>, <var>e</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultControllerGetDesiredSize",
      "href": "https://streams.spec.whatwg.org/#readable-stream-default-controller-get-desired-size",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamDefaultControllerGetDesiredSize\" id=\"readable-stream-default-controller-get-desired-size\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamDefaultControllerGetDesiredSize(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>state</var> be\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-stream\" id=\"ref-for-readablestreamdefaultcontroller-stream⑤\">[[stream]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state②③\">[[state]]</a>.</p>"
        },
        {
          "html": "<p>If <var>state</var> is \"<code>errored</code>\", return null.</p>"
        },
        {
          "html": "<p>If <var>state</var> is \"<code>closed</code>\", return 0.</p>"
        },
        {
          "html": "<p>Return <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-strategyhwm\" id=\"ref-for-readablestreamdefaultcontroller-strategyhwm\">[[strategyHWM]]</a> −\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-queuetotalsize\" id=\"ref-for-readablestreamdefaultcontroller-queuetotalsize\">[[queueTotalSize]]</a>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultControllerHasBackpressure",
      "href": "https://streams.spec.whatwg.org/#rs-default-controller-has-backpressure",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamDefaultControllerHasBackpressure\" id=\"rs-default-controller-has-backpressure\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamDefaultControllerHasBackpressure(<var>controller</var>)</dfn>\n is used in the implementation of <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#transformstream\" id=\"ref-for-transformstream②\">TransformStream</a></code>. It performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-should-call-pull\" id=\"ref-for-readable-stream-default-controller-should-call-pull①\">ReadableStreamDefaultControllerShouldCallPull</a>(<var>controller</var>) is true, return false.</p>"
        },
        {
          "html": "<p>Otherwise, return true.</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultControllerCanCloseOrEnqueue",
      "href": "https://streams.spec.whatwg.org/#readable-stream-default-controller-can-close-or-enqueue",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableStreamDefaultControllerCanCloseOrEnqueue\" id=\"readable-stream-default-controller-can-close-or-enqueue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableStreamDefaultControllerCanCloseOrEnqueue(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>state</var> be\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-stream\" id=\"ref-for-readablestreamdefaultcontroller-stream⑥\">[[stream]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state②④\">[[state]]</a>.</p>"
        },
        {
          "html": "<p>If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-closerequested\" id=\"ref-for-readablestreamdefaultcontroller-closerequested②\">[[closeRequested]]</a> is false and <var>state</var> is\n  \"<code>readable</code>\", return true.</p>"
        },
        {
          "html": "<p>Otherwise, return false.</p>"
        }
      ]
    },
    {
      "name": "SetUpReadableStreamDefaultController",
      "href": "https://streams.spec.whatwg.org/#set-up-readable-stream-default-controller",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"SetUpReadableStreamDefaultController\" id=\"set-up-readable-stream-default-controller\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">SetUpReadableStreamDefaultController(<var>stream</var>,\n <var>controller</var>, <var>startAlgorithm</var>, <var>pullAlgorithm</var>, <var>cancelAlgorithm</var>, <var>highWaterMark</var>,\n <var>sizeAlgorithm</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller④②\">[[controller]]</a> is undefined.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-stream\" id=\"ref-for-readablestreamdefaultcontroller-stream⑦\">[[stream]]</a> to <var>stream</var>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#reset-queue\" id=\"ref-for-reset-queue③\">ResetQueue</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-started\" id=\"ref-for-readablestreamdefaultcontroller-started①\">[[started]]</a>,\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-closerequested\" id=\"ref-for-readablestreamdefaultcontroller-closerequested④\">[[closeRequested]]</a>,\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-pullagain\" id=\"ref-for-readablestreamdefaultcontroller-pullagain④\">[[pullAgain]]</a>, and\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-pulling\" id=\"ref-for-readablestreamdefaultcontroller-pulling③\">[[pulling]]</a> to false.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-strategysizealgorithm\" id=\"ref-for-readablestreamdefaultcontroller-strategysizealgorithm②\">[[strategySizeAlgorithm]]</a> to\n  <var>sizeAlgorithm</var> and <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-strategyhwm\" id=\"ref-for-readablestreamdefaultcontroller-strategyhwm①\">[[strategyHWM]]</a> to\n  <var>highWaterMark</var>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-pullalgorithm\" id=\"ref-for-readablestreamdefaultcontroller-pullalgorithm②\">[[pullAlgorithm]]</a> to <var>pullAlgorithm</var>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-cancelalgorithm\" id=\"ref-for-readablestreamdefaultcontroller-cancelalgorithm②\">[[cancelAlgorithm]]</a> to <var>cancelAlgorithm</var>.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller④③\">[[controller]]</a> to <var>controller</var>.</p>"
        },
        {
          "html": "<p>Let <var>startResult</var> be the result of performing <var>startAlgorithm</var>. (This might throw an exception.)</p>"
        },
        {
          "html": "<p>Let <var>startPromise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with①④\">a promise resolved with</a> <var>startResult</var>.</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-fulfillment\" id=\"ref-for-upon-fulfillment②\">Upon fulfillment</a>  of <var>startPromise</var>,",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-started\" id=\"ref-for-readablestreamdefaultcontroller-started②\">[[started]]</a> to true.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-pulling\" id=\"ref-for-readablestreamdefaultcontroller-pulling④\">[[pulling]]</a> is false.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller-pullagain\" id=\"ref-for-readablestreamdefaultcontroller-pullagain⑤\">[[pullAgain]]</a> is false.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-call-pull-if-needed\" id=\"ref-for-readable-stream-default-controller-call-pull-if-needed④\">ReadableStreamDefaultControllerCallPullIfNeeded</a>(<var>controller</var>).</p>"
            }
          ]
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-rejection\" id=\"ref-for-upon-rejection④\">Upon rejection</a> of <var>startPromise</var> with reason <var>r</var>,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-error\" id=\"ref-for-readable-stream-default-controller-error⑧\">ReadableStreamDefaultControllerError</a>(<var>controller</var>, <var>r</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "SetUpReadableStreamDefaultControllerFromUnderlyingSource",
      "href": "https://streams.spec.whatwg.org/#set-up-readable-stream-default-controller-from-underlying-source",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"SetUpReadableStreamDefaultControllerFromUnderlyingSource\" id=\"set-up-readable-stream-default-controller-from-underlying-source\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">SetUpReadableStreamDefaultControllerFromUnderlyingSource(<var>stream</var>,\n <var>underlyingSource</var>, <var>underlyingSourceDict</var>, <var>highWaterMark</var>, <var>sizeAlgorithm</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>controller</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new⑨\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller\" id=\"ref-for-readablestreamdefaultcontroller①②\">ReadableStreamDefaultController</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>startAlgorithm</var> be an algorithm that returns undefined.</p>"
        },
        {
          "html": "<p>Let <var>pullAlgorithm</var> be an algorithm that returns <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with①⑤\">a promise resolved with</a> undefined.</p>"
        },
        {
          "html": "<p>Let <var>cancelAlgorithm</var> be an algorithm that returns <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with①⑥\">a promise resolved with</a> undefined.</p>"
        },
        {
          "html": "<p>If <var>underlyingSourceDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsource-start\" id=\"ref-for-dom-underlyingsource-start④\">start</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑤\">exists</a>, then set\n  <var>startAlgorithm</var> to an algorithm which returns the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#invoke-a-callback-function\" id=\"ref-for-invoke-a-callback-function①\">invoking</a>\n  <var>underlyingSourceDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsource-start\" id=\"ref-for-dom-underlyingsource-start⑤\">start</a></code>\"] with argument list\n  «&nbsp;<var>controller</var>&nbsp;» and <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-callback-this-value\" id=\"ref-for-dfn-callback-this-value\">callback this value</a> <var>underlyingSource</var>.</p>"
        },
        {
          "html": "<p>If <var>underlyingSourceDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsource-pull\" id=\"ref-for-dom-underlyingsource-pull④\">pull</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑥\">exists</a>, then set\n  <var>pullAlgorithm</var> to an algorithm which returns the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#invoke-a-callback-function\" id=\"ref-for-invoke-a-callback-function②\">invoking</a>\n  <var>underlyingSourceDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsource-pull\" id=\"ref-for-dom-underlyingsource-pull⑤\">pull</a></code>\"] with argument list\n  «&nbsp;<var>controller</var>&nbsp;» and <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-callback-this-value\" id=\"ref-for-dfn-callback-this-value①\">callback this value</a> <var>underlyingSource</var>.</p>"
        },
        {
          "html": "<p>If <var>underlyingSourceDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsource-cancel\" id=\"ref-for-dom-underlyingsource-cancel②\">cancel</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑦\">exists</a>, then set\n  <var>cancelAlgorithm</var> to an algorithm which takes an argument <var>reason</var> and returns the result of\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#invoke-a-callback-function\" id=\"ref-for-invoke-a-callback-function③\">invoking</a> <var>underlyingSourceDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsource-cancel\" id=\"ref-for-dom-underlyingsource-cancel③\">cancel</a></code>\"] with argument list\n  «&nbsp;<var>reason</var>&nbsp;» and <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-callback-this-value\" id=\"ref-for-dfn-callback-this-value②\">callback this value</a> <var>underlyingSource</var>.</p>"
        },
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-readable-stream-default-controller\" id=\"ref-for-set-up-readable-stream-default-controller①\">SetUpReadableStreamDefaultController</a>(<var>stream</var>, <var>controller</var>, <var>startAlgorithm</var>,\n  <var>pullAlgorithm</var>, <var>cancelAlgorithm</var>, <var>highWaterMark</var>, <var>sizeAlgorithm</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerCallPullIfNeeded",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-call-pull-if-needed",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerCallPullIfNeeded\" id=\"readable-byte-stream-controller-call-pull-if-needed\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerCallPullIfNeeded(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>shouldPull</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-should-call-pull\" id=\"ref-for-readable-byte-stream-controller-should-call-pull\">ReadableByteStreamControllerShouldCallPull</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>If <var>shouldPull</var> is false, return.</p>"
        },
        {
          "html": "If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pulling\" id=\"ref-for-readablebytestreamcontroller-pulling\">[[pulling]]</a> is true,",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pullagain\" id=\"ref-for-readablebytestreamcontroller-pullagain\">[[pullAgain]]</a> to true.</p>"
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pullagain\" id=\"ref-for-readablebytestreamcontroller-pullagain①\">[[pullAgain]]</a> is false.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pulling\" id=\"ref-for-readablebytestreamcontroller-pulling①\">[[pulling]]</a> to true.</p>"
        },
        {
          "html": "<p>Let <var>pullPromise</var> be the result of performing\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pullalgorithm\" id=\"ref-for-readablebytestreamcontroller-pullalgorithm\">[[pullAlgorithm]]</a>.</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-fulfillment\" id=\"ref-for-upon-fulfillment③\">Upon fulfillment</a> of <var>pullPromise</var>,",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pulling\" id=\"ref-for-readablebytestreamcontroller-pulling②\">[[pulling]]</a> to false.</p>"
            },
            {
              "html": "If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pullagain\" id=\"ref-for-readablebytestreamcontroller-pullagain②\">[[pullAgain]]</a> is true,",
              "rationale": "set",
              "steps": [
                {
                  "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pullagain\" id=\"ref-for-readablebytestreamcontroller-pullagain③\">[[pullAgain]]</a> to false.</p>"
                },
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-call-pull-if-needed\" id=\"ref-for-readable-byte-stream-controller-call-pull-if-needed①\">ReadableByteStreamControllerCallPullIfNeeded</a>(<var>controller</var>).</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-rejection\" id=\"ref-for-upon-rejection⑤\">Upon rejection</a> of <var>pullPromise</var> with reason <var>e</var>,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-error\" id=\"ref-for-readable-byte-stream-controller-error⑦\">ReadableByteStreamControllerError</a>(<var>controller</var>, <var>e</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerClearAlgorithms",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-clear-algorithms",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerClearAlgorithms\" id=\"readable-byte-stream-controller-clear-algorithms\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerClearAlgorithms(<var>controller</var>)</dfn>\n is called once the stream is closed or errored and the algorithms will not be executed any more. By\n removing the algorithm references it permits the <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#underlying-byte-source\" id=\"ref-for-underlying-byte-source①④\">underlying byte source</a> object to be garbage\n collected even if the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream④⑥\">ReadableStream</a></code> itself is still referenced.\n\n \n    \n    <p>It performs the following steps:</p>",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pullalgorithm\" id=\"ref-for-readablebytestreamcontroller-pullalgorithm①\">[[pullAlgorithm]]</a> to undefined.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-cancelalgorithm\" id=\"ref-for-readablebytestreamcontroller-cancelalgorithm①\">[[cancelAlgorithm]]</a> to undefined.</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerClearPendingPullIntos",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-clear-pending-pull-intos",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerClearPendingPullIntos\" id=\"readable-byte-stream-controller-clear-pending-pull-intos\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerClearPendingPullIntos(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-invalidate-byob-request\" id=\"ref-for-readable-byte-stream-controller-invalidate-byob-request\">ReadableByteStreamControllerInvalidateBYOBRequest</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos⑦\">[[pendingPullIntos]]</a> to a new empty <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list①②\">list</a>.</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerClose",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-close",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerClose\" id=\"readable-byte-stream-controller-close\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerClose(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream③\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p>If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-closerequested\" id=\"ref-for-readablebytestreamcontroller-closerequested②\">[[closeRequested]]</a> is true or\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state②⑤\">[[state]]</a> is not \"<code>readable</code>\", return.</p>"
        },
        {
          "html": "If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queuetotalsize\" id=\"ref-for-readablebytestreamcontroller-queuetotalsize②\">[[queueTotalSize]]</a> &gt; 0,",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-closerequested\" id=\"ref-for-readablebytestreamcontroller-closerequested③\">[[closeRequested]]</a> to true.</p>"
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos⑧\">[[pendingPullIntos]]</a> is not empty,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>firstPendingPullInto</var> be\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos⑨\">[[pendingPullIntos]]</a>[0].</p>"
            },
            {
              "html": "If the remainder after dividing <var>firstPendingPullInto</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled①\">bytes filled</a>\n  by <var>firstPendingPullInto</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-element-size\" id=\"ref-for-pull-into-descriptor-element-size②\">element size</a> is not 0,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>e</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror③⑧\">TypeError</a></code> exception.</p>"
                },
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-error\" id=\"ref-for-readable-byte-stream-controller-error⑧\">ReadableByteStreamControllerError</a>(<var>controller</var>, <var>e</var>).</p>"
                },
                {
                  "html": "<p>Throw <var>e</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-clear-algorithms\" id=\"ref-for-readable-byte-stream-controller-clear-algorithms①\">ReadableByteStreamControllerClearAlgorithms</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-close\" id=\"ref-for-readable-stream-close③\">ReadableStreamClose</a>(<var>stream</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerCommitPullIntoDescriptor",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-commit-pull-into-descriptor",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerCommitPullIntoDescriptor\" id=\"readable-byte-stream-controller-commit-pull-into-descriptor\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerCommitPullIntoDescriptor(<var>stream</var>,\n <var>pullIntoDescriptor</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state②⑥\">[[state]]</a> is not \"<code>errored</code>\".</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>pullIntoDescriptor</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-reader-type\" id=\"ref-for-pull-into-descriptor-reader-type②\">reader type</a> is not \"<code>none</code>\".</p>"
        },
        {
          "html": "<p>Let <var>done</var> be false.</p>"
        },
        {
          "html": "If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state②⑦\">[[state]]</a> is \"<code>closed</code>\",",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: the remainder after dividing <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled②\">bytes filled</a>\n  by <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-element-size\" id=\"ref-for-pull-into-descriptor-element-size③\">element size</a> is 0.</p>"
            },
            {
              "html": "<p>Set <var>done</var> to true.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>filledView</var> be !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-convert-pull-into-descriptor\" id=\"ref-for-readable-byte-stream-controller-convert-pull-into-descriptor\">ReadableByteStreamControllerConvertPullIntoDescriptor</a>(<var>pullIntoDescriptor</var>).</p>"
        },
        {
          "html": "If <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-reader-type\" id=\"ref-for-pull-into-descriptor-reader-type③\">reader type</a> is \"<code>default</code>\",",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-fulfill-read-request\" id=\"ref-for-readable-stream-fulfill-read-request①\">ReadableStreamFulfillReadRequest</a>(<var>stream</var>, <var>filledView</var>, <var>done</var>).</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-reader-type\" id=\"ref-for-pull-into-descriptor-reader-type④\">reader type</a> is \"<code>byob</code>\".</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-fulfill-read-into-request\" id=\"ref-for-readable-stream-fulfill-read-into-request\">ReadableStreamFulfillReadIntoRequest</a>(<var>stream</var>, <var>filledView</var>, <var>done</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerConvertPullIntoDescriptor",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-convert-pull-into-descriptor",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerConvertPullIntoDescriptor\" id=\"readable-byte-stream-controller-convert-pull-into-descriptor\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerConvertPullIntoDescriptor(<var>pullIntoDescriptor</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>bytesFilled</var> be <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled③\">bytes filled</a>.</p>"
        },
        {
          "html": "<p>Let <var>elementSize</var> be <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-element-size\" id=\"ref-for-pull-into-descriptor-element-size④\">element size</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>bytesFilled</var> ≤ <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-byte-length\" id=\"ref-for-pull-into-descriptor-byte-length①\">byte length</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: the remainder after dividing <var>bytesFilled</var> by <var>elementSize</var> is 0.</p>"
        },
        {
          "html": "<p>Let <var>buffer</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transfer-array-buffer\" id=\"ref-for-transfer-array-buffer①⓪\">TransferArrayBuffer</a>(<var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer\" id=\"ref-for-pull-into-descriptor-buffer⑧\">buffer</a>).</p>"
        },
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-construct\" id=\"ref-for-sec-construct①\">Construct</a>(<var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-view-constructor\" id=\"ref-for-pull-into-descriptor-view-constructor②\">view constructor</a>, «\n  <var>buffer</var>, <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-byte-offset\" id=\"ref-for-pull-into-descriptor-byte-offset①\">byte offset</a>,\n  <var>bytesFilled</var> ÷ <var>elementSize</var> »).</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerEnqueue",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-enqueue",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerEnqueue\" id=\"readable-byte-stream-controller-enqueue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerEnqueue(<var>controller</var>,\n <var>chunk</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream④\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p>If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-closerequested\" id=\"ref-for-readablebytestreamcontroller-closerequested④\">[[closeRequested]]</a> is true or\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state②⑧\">[[state]]</a> is not \"<code>readable</code>\", return.</p>"
        },
        {
          "html": "<p>Let <var>buffer</var> be <var>chunk</var>.[[ViewedArrayBuffer]].</p>"
        },
        {
          "html": "<p>Let <var>byteOffset</var> be <var>chunk</var>.[[ByteOffset]].</p>"
        },
        {
          "html": "<p>Let <var>byteLength</var> be <var>chunk</var>.[[ByteLength]].</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-isdetachedbuffer\" id=\"ref-for-sec-isdetachedbuffer③\">IsDetachedBuffer</a>(<var>buffer</var>) is true, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror③⑨\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Let <var>transferredBuffer</var> be ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transfer-array-buffer\" id=\"ref-for-transfer-array-buffer①\">TransferArrayBuffer</a>(<var>buffer</var>).</p>"
        },
        {
          "html": "If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos①⓪\">[[pendingPullIntos]]</a> is not\n  <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty①②\">empty</a>,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>firstPendingPullInto</var> be\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos①①\">[[pendingPullIntos]]</a>[0].</p>"
            },
            {
              "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-isdetachedbuffer\" id=\"ref-for-sec-isdetachedbuffer④\">IsDetachedBuffer</a>(<var>firstPendingPullInto</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer\" id=\"ref-for-pull-into-descriptor-buffer⑨\">buffer</a>)\n  is true, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror④⓪\">TypeError</a></code> exception.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-invalidate-byob-request\" id=\"ref-for-readable-byte-stream-controller-invalidate-byob-request①\">ReadableByteStreamControllerInvalidateBYOBRequest</a>(<var>controller</var>).</p>"
            },
            {
              "html": "<p>Set <var>firstPendingPullInto</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer\" id=\"ref-for-pull-into-descriptor-buffer①⓪\">buffer</a> to !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transfer-array-buffer\" id=\"ref-for-transfer-array-buffer②\">TransferArrayBuffer</a>(<var>firstPendingPullInto</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer\" id=\"ref-for-pull-into-descriptor-buffer①①\">buffer</a>).</p>"
            },
            {
              "html": "<p>If <var>firstPendingPullInto</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-reader-type\" id=\"ref-for-pull-into-descriptor-reader-type⑤\">reader type</a> is \"<code>none</code>\",\n  perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollerenqueuedetachedpullintotoqueue\" id=\"ref-for-abstract-opdef-readablebytestreamcontrollerenqueuedetachedpullintotoqueue\">ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue</a>(<var>controller</var>,\n  <var>firstPendingPullInto</var>).</p>"
            }
          ]
        },
        {
          "html": "If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-has-default-reader\" id=\"ref-for-readable-stream-has-default-reader③\">ReadableStreamHasDefaultReader</a>(<var>stream</var>) is true,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollerprocessreadrequestsusingqueue\" id=\"ref-for-abstract-opdef-readablebytestreamcontrollerprocessreadrequestsusingqueue\">ReadableByteStreamControllerProcessReadRequestsUsingQueue</a>(<var>controller</var>).</p>"
            },
            {
              "html": "If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-get-num-read-requests\" id=\"ref-for-readable-stream-get-num-read-requests③\">ReadableStreamGetNumReadRequests</a>(<var>stream</var>) is 0,",
              "rationale": "assert",
              "steps": [
                {
                  "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos①②\">[[pendingPullIntos]]</a> is\n  <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty①③\">empty</a>.</p>"
                },
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-enqueue-chunk-to-queue\" id=\"ref-for-readable-byte-stream-controller-enqueue-chunk-to-queue\">ReadableByteStreamControllerEnqueueChunkToQueue</a>(<var>controller</var>,\n  <var>transferredBuffer</var>, <var>byteOffset</var>, <var>byteLength</var>).</p>"
                }
              ]
            },
            {
              "html": "Otherwise,",
              "rationale": "assert",
              "steps": [
                {
                  "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queue\" id=\"ref-for-readablebytestreamcontroller-queue②\">[[queue]]</a> <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty①④\">is empty</a>.</p>"
                },
                {
                  "html": "If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos①③\">[[pendingPullIntos]]</a> is not\n  <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty①⑤\">empty</a>,",
                  "rationale": "assert",
                  "steps": [
                    {
                      "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos①④\">[[pendingPullIntos]]</a>[0]'s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-reader-type\" id=\"ref-for-pull-into-descriptor-reader-type⑥\">reader type</a> is \"<code>default</code>\".</p>"
                    },
                    {
                      "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-shift-pending-pull-into\" id=\"ref-for-readable-byte-stream-controller-shift-pending-pull-into\">ReadableByteStreamControllerShiftPendingPullInto</a>(<var>controller</var>).</p>"
                    }
                  ]
                },
                {
                  "html": "<p>Let <var>transferredView</var> be ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-construct\" id=\"ref-for-sec-construct②\">Construct</a>(<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-objects\" id=\"ref-for-sec-typedarray-objects④\">%Uint8Array%</a></code>, « <var>transferredBuffer</var>,\n  <var>byteOffset</var>, <var>byteLength</var> »).</p>"
                },
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-fulfill-read-request\" id=\"ref-for-readable-stream-fulfill-read-request②\">ReadableStreamFulfillReadRequest</a>(<var>stream</var>, <var>transferredView</var>, false).</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "Otherwise, if ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-has-byob-reader\" id=\"ref-for-readable-stream-has-byob-reader②\">ReadableStreamHasBYOBReader</a>(<var>stream</var>) is true,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-enqueue-chunk-to-queue\" id=\"ref-for-readable-byte-stream-controller-enqueue-chunk-to-queue①\">ReadableByteStreamControllerEnqueueChunkToQueue</a>(<var>controller</var>,\n  <var>transferredBuffer</var>, <var>byteOffset</var>, <var>byteLength</var>).</p>"
            },
            {
              "html": "<p>Let <var>filledPullIntos</var> be the result of performing\n  ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-process-pull-into-descriptors-using-queue\" id=\"ref-for-readable-byte-stream-controller-process-pull-into-descriptors-using-queue\">ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue</a>(<var>controller</var>).</p>"
            },
            {
              "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate④\">For each</a> <var>filledPullInto</var> of <var>filledPullIntos</var>,",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-commit-pull-into-descriptor\" id=\"ref-for-readable-byte-stream-controller-commit-pull-into-descriptor\">ReadableByteStreamControllerCommitPullIntoDescriptor</a>(<var>stream</var>, <var>filledPullInto</var>).</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-readable-stream-locked\" id=\"ref-for-is-readable-stream-locked①⓪\">IsReadableStreamLocked</a>(<var>stream</var>) is false.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-enqueue-chunk-to-queue\" id=\"ref-for-readable-byte-stream-controller-enqueue-chunk-to-queue②\">ReadableByteStreamControllerEnqueueChunkToQueue</a>(<var>controller</var>,\n  <var>transferredBuffer</var>, <var>byteOffset</var>, <var>byteLength</var>).</p>"
            }
          ]
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-call-pull-if-needed\" id=\"ref-for-readable-byte-stream-controller-call-pull-if-needed②\">ReadableByteStreamControllerCallPullIfNeeded</a>(<var>controller</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerEnqueueChunkToQueue",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-enqueue-chunk-to-queue",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerEnqueueChunkToQueue\" id=\"readable-byte-stream-controller-enqueue-chunk-to-queue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerEnqueueChunkToQueue(<var>controller</var>,\n <var>buffer</var>, <var>byteOffset</var>, <var>byteLength</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append③\">Append</a> a new <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-queue-entry\" id=\"ref-for-readable-byte-stream-queue-entry①\">readable byte stream queue entry</a> with <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-queue-entry-buffer\" id=\"ref-for-readable-byte-stream-queue-entry-buffer\">buffer</a> <var>buffer</var>, <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-queue-entry-byte-offset\" id=\"ref-for-readable-byte-stream-queue-entry-byte-offset\">byte offset</a> <var>byteOffset</var>, and\n  <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-queue-entry-byte-length\" id=\"ref-for-readable-byte-stream-queue-entry-byte-length\">byte length</a> <var>byteLength</var> to\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queue\" id=\"ref-for-readablebytestreamcontroller-queue③\">[[queue]]</a>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queuetotalsize\" id=\"ref-for-readablebytestreamcontroller-queuetotalsize③\">[[queueTotalSize]]</a> to\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queuetotalsize\" id=\"ref-for-readablebytestreamcontroller-queuetotalsize④\">[[queueTotalSize]]</a> + <var>byteLength</var>.</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerEnqueueClonedChunkToQueue",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollerenqueueclonedchunktoqueue",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerEnqueueClonedChunkToQueue\" id=\"abstract-opdef-readablebytestreamcontrollerenqueueclonedchunktoqueue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerEnqueueClonedChunkToQueue(<var>controller</var>,\n <var>buffer</var>, <var>byteOffset</var>, <var>byteLength</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>cloneResult</var> be <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-clonearraybuffer\" id=\"ref-for-sec-clonearraybuffer\">CloneArrayBuffer</a>(<var>buffer</var>, <var>byteOffset</var>, <var>byteLength</var>, <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-arraybuffer-constructor\" id=\"ref-for-sec-arraybuffer-constructor①\">%ArrayBuffer%</a></code>).</p>"
        },
        {
          "html": "If <var>cloneResult</var> is an abrupt completion,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-error\" id=\"ref-for-readable-byte-stream-controller-error⑨\">ReadableByteStreamControllerError</a>(<var>controller</var>, <var>cloneResult</var>.[[Value]]).</p>"
            },
            {
              "html": "<p>Return <var>cloneResult</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-enqueue-chunk-to-queue\" id=\"ref-for-readable-byte-stream-controller-enqueue-chunk-to-queue③\">ReadableByteStreamControllerEnqueueChunkToQueue</a>(<var>controller</var>,\n  <var>cloneResult</var>.[[Value]], 0, <var>byteLength</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollerenqueuedetachedpullintotoqueue",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue\" id=\"abstract-opdef-readablebytestreamcontrollerenqueuedetachedpullintotoqueue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(<var>controller</var>,\n <var>pullIntoDescriptor</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-reader-type\" id=\"ref-for-pull-into-descriptor-reader-type⑦\">reader type</a> is \"<code>none</code>\".</p>"
        },
        {
          "html": "<p>If <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled④\">bytes filled</a> &gt; 0, perform ?\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollerenqueueclonedchunktoqueue\" id=\"ref-for-abstract-opdef-readablebytestreamcontrollerenqueueclonedchunktoqueue\">ReadableByteStreamControllerEnqueueClonedChunkToQueue</a>(<var>controller</var>, <var>pullIntoDescriptor</var>’s\n  <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer\" id=\"ref-for-pull-into-descriptor-buffer①②\">buffer</a>, <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-byte-offset\" id=\"ref-for-pull-into-descriptor-byte-offset②\">byte offset</a>,\n  <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled⑤\">bytes filled</a>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-shift-pending-pull-into\" id=\"ref-for-readable-byte-stream-controller-shift-pending-pull-into①\">ReadableByteStreamControllerShiftPendingPullInto</a>(<var>controller</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerError",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-error",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerError\" id=\"readable-byte-stream-controller-error\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerError(<var>controller</var>,\n <var>e</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream⑤\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state②⑨\">[[state]]</a> is not \"<code>readable</code>\", return.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-clear-pending-pull-intos\" id=\"ref-for-readable-byte-stream-controller-clear-pending-pull-intos①\">ReadableByteStreamControllerClearPendingPullIntos</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#reset-queue\" id=\"ref-for-reset-queue④\">ResetQueue</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-clear-algorithms\" id=\"ref-for-readable-byte-stream-controller-clear-algorithms②\">ReadableByteStreamControllerClearAlgorithms</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-error\" id=\"ref-for-readable-stream-error①\">ReadableStreamError</a>(<var>stream</var>, <var>e</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerFillHeadPullIntoDescriptor",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-fill-head-pull-into-descriptor",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerFillHeadPullIntoDescriptor\" id=\"readable-byte-stream-controller-fill-head-pull-into-descriptor\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerFillHeadPullIntoDescriptor(<var>controller</var>,\n <var>size</var>, <var>pullIntoDescriptor</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: either <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos①⑤\">[[pendingPullIntos]]</a>\n  <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty①⑥\">is empty</a>, or <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos①⑥\">[[pendingPullIntos]]</a>[0]\n  is <var>pullIntoDescriptor</var>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-byobrequest\" id=\"ref-for-readablebytestreamcontroller-byobrequest\">[[byobRequest]]</a> is null.</p>"
        },
        {
          "html": "<p>Set <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled⑥\">bytes filled</a> to <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled⑦\">bytes filled</a> + <var>size</var>.</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerFillPullIntoDescriptorFromQueue",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-fill-pull-into-descriptor-from-queue",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerFillPullIntoDescriptorFromQueue\" id=\"readable-byte-stream-controller-fill-pull-into-descriptor-from-queue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(<var>controller</var>,\n <var>pullIntoDescriptor</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>maxBytesToCopy</var> be min(<var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queuetotalsize\" id=\"ref-for-readablebytestreamcontroller-queuetotalsize⑤\">[[queueTotalSize]]</a>,\n  <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-byte-length\" id=\"ref-for-pull-into-descriptor-byte-length②\">byte length</a> − <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled⑧\">bytes filled</a>).</p>"
        },
        {
          "html": "<p>Let <var>maxBytesFilled</var> be <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled⑨\">bytes filled</a> +\n  <var>maxBytesToCopy</var>.</p>"
        },
        {
          "html": "<p>Let <var>totalBytesToCopyRemaining</var> be <var>maxBytesToCopy</var>.</p>"
        },
        {
          "html": "<p>Let <var>ready</var> be false.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-isdetachedbuffer\" id=\"ref-for-sec-isdetachedbuffer⑤\">IsDetachedBuffer</a>(<var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer\" id=\"ref-for-pull-into-descriptor-buffer①③\">buffer</a>) is false.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled①⓪\">bytes filled</a> &lt; <var>pullIntoDescriptor</var>’s\n  <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-minimum-fill\" id=\"ref-for-pull-into-descriptor-minimum-fill①\">minimum fill</a>.</p>"
        },
        {
          "html": "<p>Let <var>remainderBytes</var> be the remainder after dividing <var>maxBytesFilled</var> by <var>pullIntoDescriptor</var>’s\n  <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-element-size\" id=\"ref-for-pull-into-descriptor-element-size⑤\">element size</a>.</p>"
        },
        {
          "html": "<p>Let <var>maxAlignedBytes</var> be <var>maxBytesFilled</var> − <var>remainderBytes</var>.</p>"
        },
        {
          "html": "If <var>maxAlignedBytes</var> ≥ <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-minimum-fill\" id=\"ref-for-pull-into-descriptor-minimum-fill②\">minimum fill</a>,",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>totalBytesToCopyRemaining</var> to <var>maxAlignedBytes</var> − <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled①①\">bytes filled</a>.</p>"
            },
            {
              "html": "<p>Set <var>ready</var> to true.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>queue</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queue\" id=\"ref-for-readablebytestreamcontroller-queue④\">[[queue]]</a>.</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#iteration-while\" id=\"ref-for-iteration-while\">While</a> <var>totalBytesToCopyRemaining</var> &gt; 0,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>headOfQueue</var> be <var>queue</var>[0].</p>"
            },
            {
              "html": "<p>Let <var>bytesToCopy</var> be min(<var>totalBytesToCopyRemaining</var>, <var>headOfQueue</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-queue-entry-byte-length\" id=\"ref-for-readable-byte-stream-queue-entry-byte-length①\">byte length</a>).</p>"
            },
            {
              "html": "<p>Let <var>destStart</var> be <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-byte-offset\" id=\"ref-for-pull-into-descriptor-byte-offset③\">byte offset</a> +\n  <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled①②\">bytes filled</a>.</p>"
            },
            {
              "html": "<p>Let <var>descriptorBuffer</var> be <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer\" id=\"ref-for-pull-into-descriptor-buffer①④\">buffer</a>.</p>"
            },
            {
              "html": "<p>Let <var>queueBuffer</var> be <var>headOfQueue</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-queue-entry-buffer\" id=\"ref-for-readable-byte-stream-queue-entry-buffer①\">buffer</a>.</p>"
            },
            {
              "html": "<p>Let <var>queueByteOffset</var> be <var>headOfQueue</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-queue-entry-byte-offset\" id=\"ref-for-readable-byte-stream-queue-entry-byte-offset①\">byte offset</a>.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-cancopydatablockbytes\" id=\"ref-for-abstract-opdef-cancopydatablockbytes\">CanCopyDataBlockBytes</a>(<var>descriptorBuffer</var>, <var>destStart</var>, <var>queueBuffer</var>,\n  <var>queueByteOffset</var>, <var>bytesToCopy</var>) is true.</p>\n        <p class=\"warning\">If this assertion were to fail (due to a bug in this specification or\n  its implementation), then the next step may read from or write to potentially invalid memory.\n  The user agent should always check this assertion, and stop in an <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#implementation-defined\" id=\"ref-for-implementation-defined\">implementation-defined</a>\n  manner if it fails (e.g. by crashing the process, or by\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-error\" id=\"ref-for-readable-byte-stream-controller-error①⓪\">erroring the stream</a>).\n</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-copydatablockbytes\" id=\"ref-for-sec-copydatablockbytes\">CopyDataBlockBytes</a>(<var>descriptorBuffer</var>.[[ArrayBufferData]], <var>destStart</var>,\n  <var>queueBuffer</var>.[[ArrayBufferData]], <var>queueByteOffset</var>, <var>bytesToCopy</var>).</p>"
            },
            {
              "html": "If <var>headOfQueue</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-queue-entry-byte-length\" id=\"ref-for-readable-byte-stream-queue-entry-byte-length②\">byte length</a> is <var>bytesToCopy</var>,",
              "rationale": "remove",
              "steps": [
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-remove\" id=\"ref-for-list-remove②\">Remove</a> <var>queue</var>[0].</p>"
                }
              ]
            },
            {
              "html": "Otherwise,",
              "rationale": "set",
              "steps": [
                {
                  "html": "<p>Set <var>headOfQueue</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-queue-entry-byte-offset\" id=\"ref-for-readable-byte-stream-queue-entry-byte-offset②\">byte offset</a> to <var>headOfQueue</var>’s\n  <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-queue-entry-byte-offset\" id=\"ref-for-readable-byte-stream-queue-entry-byte-offset③\">byte offset</a> + <var>bytesToCopy</var>.</p>"
                },
                {
                  "html": "<p>Set <var>headOfQueue</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-queue-entry-byte-length\" id=\"ref-for-readable-byte-stream-queue-entry-byte-length③\">byte length</a> to <var>headOfQueue</var>’s\n  <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-queue-entry-byte-length\" id=\"ref-for-readable-byte-stream-queue-entry-byte-length④\">byte length</a> − <var>bytesToCopy</var>.</p>"
                }
              ]
            },
            {
              "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queuetotalsize\" id=\"ref-for-readablebytestreamcontroller-queuetotalsize⑥\">[[queueTotalSize]]</a> to\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queuetotalsize\" id=\"ref-for-readablebytestreamcontroller-queuetotalsize⑦\">[[queueTotalSize]]</a> − <var>bytesToCopy</var>.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-fill-head-pull-into-descriptor\" id=\"ref-for-readable-byte-stream-controller-fill-head-pull-into-descriptor\">ReadableByteStreamControllerFillHeadPullIntoDescriptor</a>(<var>controller</var>,\n  <var>bytesToCopy</var>, <var>pullIntoDescriptor</var>).</p>"
            },
            {
              "html": "<p>Set <var>totalBytesToCopyRemaining</var> to <var>totalBytesToCopyRemaining</var> − <var>bytesToCopy</var>.</p>"
            }
          ]
        },
        {
          "html": "If <var>ready</var> is false,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queuetotalsize\" id=\"ref-for-readablebytestreamcontroller-queuetotalsize⑧\">[[queueTotalSize]]</a> is 0.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled①③\">bytes filled</a> &gt; 0.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled①④\">bytes filled</a> &lt;\n  <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-minimum-fill\" id=\"ref-for-pull-into-descriptor-minimum-fill③\">minimum fill</a>.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <var>ready</var>.</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerFillReadRequestFromQueue",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollerfillreadrequestfromqueue",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerFillReadRequestFromQueue\" id=\"abstract-opdef-readablebytestreamcontrollerfillreadrequestfromqueue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerFillReadRequestFromQueue(<var>controller</var>,\n <var>readRequest</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queuetotalsize\" id=\"ref-for-readablebytestreamcontroller-queuetotalsize⑨\">[[queueTotalSize]]</a> &gt; 0.</p>"
        },
        {
          "html": "<p>Let <var>entry</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queue\" id=\"ref-for-readablebytestreamcontroller-queue⑤\">[[queue]]</a>[0].</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-remove\" id=\"ref-for-list-remove③\">Remove</a> <var>entry</var> from <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queue\" id=\"ref-for-readablebytestreamcontroller-queue⑥\">[[queue]]</a>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queuetotalsize\" id=\"ref-for-readablebytestreamcontroller-queuetotalsize①⓪\">[[queueTotalSize]]</a> to\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queuetotalsize\" id=\"ref-for-readablebytestreamcontroller-queuetotalsize①①\">[[queueTotalSize]]</a> − <var>entry</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-queue-entry-byte-length\" id=\"ref-for-readable-byte-stream-queue-entry-byte-length⑤\">byte length</a>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-handle-queue-drain\" id=\"ref-for-readable-byte-stream-controller-handle-queue-drain\">ReadableByteStreamControllerHandleQueueDrain</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Let <var>view</var> be ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-construct\" id=\"ref-for-sec-construct③\">Construct</a>(<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-objects\" id=\"ref-for-sec-typedarray-objects⑤\">%Uint8Array%</a></code>, « <var>entry</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-queue-entry-buffer\" id=\"ref-for-readable-byte-stream-queue-entry-buffer②\">buffer</a>, <var>entry</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-queue-entry-byte-offset\" id=\"ref-for-readable-byte-stream-queue-entry-byte-offset④\">byte offset</a>, <var>entry</var>’s\n  <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-queue-entry-byte-length\" id=\"ref-for-readable-byte-stream-queue-entry-byte-length⑥\">byte length</a> »).</p>"
        },
        {
          "html": "<p>Perform <var>readRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-chunk-steps\" id=\"ref-for-read-request-chunk-steps⑥\">chunk steps</a>, given <var>view</var>.</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerGetBYOBRequest",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollergetbyobrequest",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerGetBYOBRequest\" id=\"abstract-opdef-readablebytestreamcontrollergetbyobrequest\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerGetBYOBRequest(<var>controller</var>)</dfn> performs\n the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-byobrequest\" id=\"ref-for-readablebytestreamcontroller-byobrequest①\">[[byobRequest]]</a> is null and\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos①⑦\">[[pendingPullIntos]]</a> is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty①⑦\">empty</a>,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>firstDescriptor</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos①⑧\">[[pendingPullIntos]]</a>[0].</p>"
            },
            {
              "html": "<p>Let <var>view</var> be ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-construct\" id=\"ref-for-sec-construct④\">Construct</a>(<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-objects\" id=\"ref-for-sec-typedarray-objects⑥\">%Uint8Array%</a></code>, « <var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer\" id=\"ref-for-pull-into-descriptor-buffer①⑤\">buffer</a>, <var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-byte-offset\" id=\"ref-for-pull-into-descriptor-byte-offset④\">byte offset</a> +\n  <var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled①⑤\">bytes filled</a>, <var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-byte-length\" id=\"ref-for-pull-into-descriptor-byte-length③\">byte length</a> − <var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled①⑥\">bytes filled</a> »).</p>"
            },
            {
              "html": "<p>Let <var>byobRequest</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new①⓪\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest\" id=\"ref-for-readablestreambyobrequest⑥\">ReadableStreamBYOBRequest</a></code>.</p>"
            },
            {
              "html": "<p>Set <var>byobRequest</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest-controller\" id=\"ref-for-readablestreambyobrequest-controller④\">[[controller]]</a> to <var>controller</var>.</p>"
            },
            {
              "html": "<p>Set <var>byobRequest</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest-view\" id=\"ref-for-readablestreambyobrequest-view⑥\">[[view]]</a> to <var>view</var>.</p>"
            },
            {
              "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-byobrequest\" id=\"ref-for-readablebytestreamcontroller-byobrequest②\">[[byobRequest]]</a> to <var>byobRequest</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-byobrequest\" id=\"ref-for-readablebytestreamcontroller-byobrequest③\">[[byobRequest]]</a>.</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerGetDesiredSize",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-get-desired-size",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerGetDesiredSize\" id=\"readable-byte-stream-controller-get-desired-size\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerGetDesiredSize(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>state</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream⑥\">[[stream]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state③⓪\">[[state]]</a>.</p>"
        },
        {
          "html": "<p>If <var>state</var> is \"<code>errored</code>\", return null.</p>"
        },
        {
          "html": "<p>If <var>state</var> is \"<code>closed</code>\", return 0.</p>"
        },
        {
          "html": "<p>Return <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-strategyhwm\" id=\"ref-for-readablebytestreamcontroller-strategyhwm\">[[strategyHWM]]</a> −\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queuetotalsize\" id=\"ref-for-readablebytestreamcontroller-queuetotalsize①②\">[[queueTotalSize]]</a>.</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerHandleQueueDrain",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-handle-queue-drain",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerHandleQueueDrain\" id=\"readable-byte-stream-controller-handle-queue-drain\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerHandleQueueDrain(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream⑦\">[[stream]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state③①\">[[state]]</a> is\n  \"<code>readable</code>\".</p>"
        },
        {
          "html": "If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queuetotalsize\" id=\"ref-for-readablebytestreamcontroller-queuetotalsize①③\">[[queueTotalSize]]</a> is 0 and\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-closerequested\" id=\"ref-for-readablebytestreamcontroller-closerequested⑤\">[[closeRequested]]</a> is true,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-clear-algorithms\" id=\"ref-for-readable-byte-stream-controller-clear-algorithms③\">ReadableByteStreamControllerClearAlgorithms</a>(<var>controller</var>).</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-close\" id=\"ref-for-readable-stream-close④\">ReadableStreamClose</a>(<var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream⑧\">[[stream]]</a>).</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-call-pull-if-needed\" id=\"ref-for-readable-byte-stream-controller-call-pull-if-needed③\">ReadableByteStreamControllerCallPullIfNeeded</a>(<var>controller</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerInvalidateBYOBRequest",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-invalidate-byob-request",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerInvalidateBYOBRequest\" id=\"readable-byte-stream-controller-invalidate-byob-request\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerInvalidateBYOBRequest(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-byobrequest\" id=\"ref-for-readablebytestreamcontroller-byobrequest④\">[[byobRequest]]</a> is null, return.</p>"
        },
        {
          "html": "<p>Set\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-byobrequest\" id=\"ref-for-readablebytestreamcontroller-byobrequest⑤\">[[byobRequest]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest-controller\" id=\"ref-for-readablestreambyobrequest-controller⑤\">[[controller]]</a>\n  to undefined.</p>"
        },
        {
          "html": "<p>Set\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-byobrequest\" id=\"ref-for-readablebytestreamcontroller-byobrequest⑥\">[[byobRequest]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest-view\" id=\"ref-for-readablestreambyobrequest-view⑦\">[[view]]</a>\n  to null.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-byobrequest\" id=\"ref-for-readablebytestreamcontroller-byobrequest⑦\">[[byobRequest]]</a> to null.</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-process-pull-into-descriptors-using-queue",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue\" id=\"readable-byte-stream-controller-process-pull-into-descriptors-using-queue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-closerequested\" id=\"ref-for-readablebytestreamcontroller-closerequested⑥\">[[closeRequested]]</a> is false.</p>"
        },
        {
          "html": "<p>Let <var>filledPullIntos</var> be a new empty <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list①③\">list</a>.</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#iteration-while\" id=\"ref-for-iteration-while①\">While</a> <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos①⑨\">[[pendingPullIntos]]</a> is not\n  <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty①⑧\">empty</a>,",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queuetotalsize\" id=\"ref-for-readablebytestreamcontroller-queuetotalsize①④\">[[queueTotalSize]]</a> is 0, then <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#iteration-break\" id=\"ref-for-iteration-break\">break</a>.</p>"
            },
            {
              "html": "<p>Let <var>pullIntoDescriptor</var> be\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos②⓪\">[[pendingPullIntos]]</a>[0].</p>"
            },
            {
              "html": "If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-fill-pull-into-descriptor-from-queue\" id=\"ref-for-readable-byte-stream-controller-fill-pull-into-descriptor-from-queue\">ReadableByteStreamControllerFillPullIntoDescriptorFromQueue</a>(<var>controller</var>,\n  <var>pullIntoDescriptor</var>) is true,",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-shift-pending-pull-into\" id=\"ref-for-readable-byte-stream-controller-shift-pending-pull-into②\">ReadableByteStreamControllerShiftPendingPullInto</a>(<var>controller</var>).</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append④\">Append</a> <var>pullIntoDescriptor</var> to <var>filledPullIntos</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <var>filledPullIntos</var>.</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerProcessReadRequestsUsingQueue",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollerprocessreadrequestsusingqueue",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerProcessReadRequestsUsingQueue\" id=\"abstract-opdef-readablebytestreamcontrollerprocessreadrequestsusingqueue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerProcessReadRequestsUsingQueue(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>reader</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream⑨\">[[stream]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-reader\" id=\"ref-for-readablestream-reader①⑧\">[[reader]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>reader</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements②①\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader\" id=\"ref-for-readablestreamdefaultreader①⑦\">ReadableStreamDefaultReader</a></code>.</p>"
        },
        {
          "html": "While <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader-readrequests\" id=\"ref-for-readablestreamdefaultreader-readrequests①②\">[[readRequests]]</a> is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty①⑨\">empty</a>,",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queuetotalsize\" id=\"ref-for-readablebytestreamcontroller-queuetotalsize①⑤\">[[queueTotalSize]]</a> is 0, return.</p>"
            },
            {
              "html": "<p>Let <var>readRequest</var> be <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader-readrequests\" id=\"ref-for-readablestreamdefaultreader-readrequests①③\">[[readRequests]]</a>[0].</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-remove\" id=\"ref-for-list-remove④\">Remove</a> <var>readRequest</var> from <var>reader</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader-readrequests\" id=\"ref-for-readablestreamdefaultreader-readrequests①④\">[[readRequests]]</a>.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollerfillreadrequestfromqueue\" id=\"ref-for-abstract-opdef-readablebytestreamcontrollerfillreadrequestfromqueue①\">ReadableByteStreamControllerFillReadRequestFromQueue</a>(<var>controller</var>, <var>readRequest</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerPullInto",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-pull-into",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerPullInto\" id=\"readable-byte-stream-controller-pull-into\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerPullInto(<var>controller</var>,\n <var>view</var>, <var>min</var>, <var>readIntoRequest</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream①⓪\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p>Let <var>elementSize</var> be 1.</p>"
        },
        {
          "html": "<p>Let <var>ctor</var> be <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview-constructor\" id=\"ref-for-sec-dataview-constructor①\">%DataView%</a></code>.</p>"
        },
        {
          "html": "If <var>view</var> has a [[TypedArrayName]] internal slot (i.e., it is not a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-dataview-objects\" id=\"ref-for-sec-dataview-objects②\">DataView</a></code>),",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>elementSize</var> to the element size specified in <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#table-49\" id=\"ref-for-table-49①\">the typed array constructors table</a> for\n  <var>view</var>.[[TypedArrayName]].</p>"
            },
            {
              "html": "<p>Set <var>ctor</var> to the constructor specified in <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#table-49\" id=\"ref-for-table-49②\">the typed array constructors table</a> for\n  <var>view</var>.[[TypedArrayName]].</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>minimumFill</var> be <var>min</var> × <var>elementSize</var>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>minimumFill</var> ≥ 0 and <var>minimumFill</var> ≤ <var>view</var>.[[ByteLength]].</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: the remainder after dividing <var>minimumFill</var> by <var>elementSize</var> is 0.</p>"
        },
        {
          "html": "<p>Let <var>byteOffset</var> be <var>view</var>.[[ByteOffset]].</p>"
        },
        {
          "html": "<p>Let <var>byteLength</var> be <var>view</var>.[[ByteLength]].</p>"
        },
        {
          "html": "<p>Let <var>bufferResult</var> be <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transfer-array-buffer\" id=\"ref-for-transfer-array-buffer③\">TransferArrayBuffer</a>(<var>view</var>.[[ViewedArrayBuffer]]).</p>"
        },
        {
          "html": "If <var>bufferResult</var> is an abrupt completion,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform <var>readIntoRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-into-request-error-steps\" id=\"ref-for-read-into-request-error-steps④\">error steps</a>, given <var>bufferResult</var>.[[Value]].</p>"
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>buffer</var> be <var>bufferResult</var>.[[Value]].</p>"
        },
        {
          "html": "<p>Let <var>pullIntoDescriptor</var> be a new <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor\" id=\"ref-for-pull-into-descriptor②\">pull-into descriptor</a> with</p>\n      <dl class=\"props\">\n       <dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer\" id=\"ref-for-pull-into-descriptor-buffer①⑥\">buffer</a>\n   \n       </dt><dd><var>buffer</var>\n\n   \n       </dd><dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer-byte-length\" id=\"ref-for-pull-into-descriptor-buffer-byte-length①\">buffer byte length</a>\n   \n       </dt><dd><var>buffer</var>.[[ArrayBufferByteLength]]\n\n   \n       </dd><dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-byte-offset\" id=\"ref-for-pull-into-descriptor-byte-offset⑤\">byte offset</a>\n   \n       </dt><dd><var>byteOffset</var>\n\n   \n       </dd><dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-byte-length\" id=\"ref-for-pull-into-descriptor-byte-length④\">byte length</a>\n   \n       </dt><dd><var>byteLength</var>\n\n   \n       </dd><dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled①⑦\">bytes filled</a>\n   \n       </dt><dd>0\n\n   \n       </dd><dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-minimum-fill\" id=\"ref-for-pull-into-descriptor-minimum-fill④\">minimum fill</a>\n   \n       </dt><dd><var>minimumFill</var>\n\n   \n       </dd><dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-element-size\" id=\"ref-for-pull-into-descriptor-element-size⑥\">element size</a>\n   \n       </dt><dd><var>elementSize</var>\n\n   \n       </dd><dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-view-constructor\" id=\"ref-for-pull-into-descriptor-view-constructor③\">view constructor</a>\n   \n       </dt><dd><var>ctor</var>\n\n   \n       </dd><dt><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-reader-type\" id=\"ref-for-pull-into-descriptor-reader-type⑧\">reader type</a>\n   \n       </dt><dd>\"<code>byob</code>\"\n  \n      </dd></dl>"
        },
        {
          "html": "If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos②①\">[[pendingPullIntos]]</a> is not empty,",
          "rationale": "append",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append⑤\">Append</a> <var>pullIntoDescriptor</var> to\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos②②\">[[pendingPullIntos]]</a>.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-add-read-into-request\" id=\"ref-for-readable-stream-add-read-into-request\">ReadableStreamAddReadIntoRequest</a>(<var>stream</var>, <var>readIntoRequest</var>).</p>"
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state③②\">[[state]]</a> is \"<code>closed</code>\",",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>emptyView</var> be ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-construct\" id=\"ref-for-sec-construct⑤\">Construct</a>(<var>ctor</var>, « <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer\" id=\"ref-for-pull-into-descriptor-buffer①⑦\">buffer</a>, <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-byte-offset\" id=\"ref-for-pull-into-descriptor-byte-offset⑥\">byte offset</a>, 0 »).</p>"
            },
            {
              "html": "<p>Perform <var>readIntoRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-into-request-close-steps\" id=\"ref-for-read-into-request-close-steps⑤\">close steps</a>, given <var>emptyView</var>.</p>"
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-queuetotalsize\" id=\"ref-for-readablebytestreamcontroller-queuetotalsize①⑥\">[[queueTotalSize]]</a> &gt; 0,",
          "rationale": "if",
          "steps": [
            {
              "html": "If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-fill-pull-into-descriptor-from-queue\" id=\"ref-for-readable-byte-stream-controller-fill-pull-into-descriptor-from-queue①\">ReadableByteStreamControllerFillPullIntoDescriptorFromQueue</a>(<var>controller</var>,\n  <var>pullIntoDescriptor</var>) is true,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>filledView</var> be !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-convert-pull-into-descriptor\" id=\"ref-for-readable-byte-stream-controller-convert-pull-into-descriptor①\">ReadableByteStreamControllerConvertPullIntoDescriptor</a>(<var>pullIntoDescriptor</var>).</p>"
                },
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-handle-queue-drain\" id=\"ref-for-readable-byte-stream-controller-handle-queue-drain①\">ReadableByteStreamControllerHandleQueueDrain</a>(<var>controller</var>).</p>"
                },
                {
                  "html": "<p>Perform <var>readIntoRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-into-request-chunk-steps\" id=\"ref-for-read-into-request-chunk-steps③\">chunk steps</a>, given <var>filledView</var>.</p>"
                },
                {
                  "html": "<p>Return.</p>"
                }
              ]
            },
            {
              "html": "If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-closerequested\" id=\"ref-for-readablebytestreamcontroller-closerequested⑦\">[[closeRequested]]</a> is true,",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>e</var> be a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror④①\">TypeError</a></code> exception.</p>"
                },
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-error\" id=\"ref-for-readable-byte-stream-controller-error①①\">ReadableByteStreamControllerError</a>(<var>controller</var>, <var>e</var>).</p>"
                },
                {
                  "html": "<p>Perform <var>readIntoRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-into-request-error-steps\" id=\"ref-for-read-into-request-error-steps⑤\">error steps</a>, given <var>e</var>.</p>"
                },
                {
                  "html": "<p>Return.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append⑥\">Append</a> <var>pullIntoDescriptor</var> to\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos②③\">[[pendingPullIntos]]</a>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-add-read-into-request\" id=\"ref-for-readable-stream-add-read-into-request①\">ReadableStreamAddReadIntoRequest</a>(<var>stream</var>, <var>readIntoRequest</var>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-call-pull-if-needed\" id=\"ref-for-readable-byte-stream-controller-call-pull-if-needed④\">ReadableByteStreamControllerCallPullIfNeeded</a>(<var>controller</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerRespond",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerRespond\" id=\"readable-byte-stream-controller-respond\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerRespond(<var>controller</var>,\n <var>bytesWritten</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos②④\">[[pendingPullIntos]]</a> is not empty.</p>"
        },
        {
          "html": "<p>Let <var>firstDescriptor</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos②⑤\">[[pendingPullIntos]]</a>[0].</p>"
        },
        {
          "html": "<p>Let <var>state</var> be\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream①①\">[[stream]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state③③\">[[state]]</a>.</p>"
        },
        {
          "html": "If <var>state</var> is \"<code>closed</code>\",",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>bytesWritten</var> is not 0, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror④②\">TypeError</a></code> exception.</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>state</var> is \"<code>readable</code>\".</p>"
            },
            {
              "html": "<p>If <var>bytesWritten</var> is 0, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror④③\">TypeError</a></code> exception.</p>"
            },
            {
              "html": "<p>If <var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled①⑧\">bytes filled</a> + <var>bytesWritten</var> &gt;\n  <var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-byte-length\" id=\"ref-for-pull-into-descriptor-byte-length⑤\">byte length</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-rangeerror\" id=\"ref-for-exceptiondef-rangeerror③\">RangeError</a></code> exception.</p>"
            }
          ]
        },
        {
          "html": "<p>Set <var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer\" id=\"ref-for-pull-into-descriptor-buffer①⑧\">buffer</a> to !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transfer-array-buffer\" id=\"ref-for-transfer-array-buffer④\">TransferArrayBuffer</a>(<var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer\" id=\"ref-for-pull-into-descriptor-buffer①⑨\">buffer</a>).</p>"
        },
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond-internal\" id=\"ref-for-readable-byte-stream-controller-respond-internal\">ReadableByteStreamControllerRespondInternal</a>(<var>controller</var>, <var>bytesWritten</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerRespondInClosedState",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond-in-closed-state",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerRespondInClosedState\" id=\"readable-byte-stream-controller-respond-in-closed-state\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerRespondInClosedState(<var>controller</var>,\n <var>firstDescriptor</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: the remainder after dividing <var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled①⑨\">bytes filled</a>\n  by <var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-element-size\" id=\"ref-for-pull-into-descriptor-element-size⑦\">element size</a> is 0.</p>"
        },
        {
          "html": "<p>If <var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-reader-type\" id=\"ref-for-pull-into-descriptor-reader-type⑨\">reader type</a> is \"<code>none</code>\",\n  perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-shift-pending-pull-into\" id=\"ref-for-readable-byte-stream-controller-shift-pending-pull-into③\">ReadableByteStreamControllerShiftPendingPullInto</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Let <var>stream</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream①②\">[[stream]]</a>.</p>"
        },
        {
          "html": "If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-has-byob-reader\" id=\"ref-for-readable-stream-has-byob-reader③\">ReadableStreamHasBYOBReader</a>(<var>stream</var>) is true,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>filledPullIntos</var> be a new empty <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list①④\">list</a>.</p>"
            },
            {
              "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#iteration-while\" id=\"ref-for-iteration-while②\">While</a> <var>filledPullIntos</var>’s <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-size\" id=\"ref-for-list-size②\">size</a> &lt; !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-get-num-read-into-requests\" id=\"ref-for-readable-stream-get-num-read-into-requests\">ReadableStreamGetNumReadIntoRequests</a>(<var>stream</var>),",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>pullIntoDescriptor</var> be !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-shift-pending-pull-into\" id=\"ref-for-readable-byte-stream-controller-shift-pending-pull-into④\">ReadableByteStreamControllerShiftPendingPullInto</a>(<var>controller</var>).</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append⑦\">Append</a> <var>pullIntoDescriptor</var> to <var>filledPullIntos</var>.</p>"
                }
              ]
            },
            {
              "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate⑤\">For each</a> <var>filledPullInto</var> of <var>filledPullIntos</var>,",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-commit-pull-into-descriptor\" id=\"ref-for-readable-byte-stream-controller-commit-pull-into-descriptor①\">ReadableByteStreamControllerCommitPullIntoDescriptor</a>(<var>stream</var>,\n  <var>filledPullInto</var>).</p>"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerRespondInReadableState",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond-in-readable-state",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerRespondInReadableState\" id=\"readable-byte-stream-controller-respond-in-readable-state\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerRespondInReadableState(<var>controller</var>,\n <var>bytesWritten</var>, <var>pullIntoDescriptor</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled②⓪\">bytes filled</a> + <var>bytesWritten</var> ≤\n  <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-byte-length\" id=\"ref-for-pull-into-descriptor-byte-length⑥\">byte length</a>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-fill-head-pull-into-descriptor\" id=\"ref-for-readable-byte-stream-controller-fill-head-pull-into-descriptor①\">ReadableByteStreamControllerFillHeadPullIntoDescriptor</a>(<var>controller</var>,\n  <var>bytesWritten</var>, <var>pullIntoDescriptor</var>).</p>"
        },
        {
          "html": "If <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-reader-type\" id=\"ref-for-pull-into-descriptor-reader-type①⓪\">reader type</a> is \"<code>none</code>\",",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollerenqueuedetachedpullintotoqueue\" id=\"ref-for-abstract-opdef-readablebytestreamcontrollerenqueuedetachedpullintotoqueue①\">ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue</a>(<var>controller</var>,\n  <var>pullIntoDescriptor</var>).</p>"
            },
            {
              "html": "<p>Let <var>filledPullIntos</var> be the result of performing\n  ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-process-pull-into-descriptors-using-queue\" id=\"ref-for-readable-byte-stream-controller-process-pull-into-descriptors-using-queue①\">ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue</a>(<var>controller</var>).</p>"
            },
            {
              "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate⑥\">For each</a> <var>filledPullInto</var> of <var>filledPullIntos</var>,",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-commit-pull-into-descriptor\" id=\"ref-for-readable-byte-stream-controller-commit-pull-into-descriptor②\">ReadableByteStreamControllerCommitPullIntoDescriptor</a>(<var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream①③\">[[stream]]</a>,\n  <var>filledPullInto</var>).</p>"
                }
              ]
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "<p>If <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled②①\">bytes filled</a> &lt; <var>pullIntoDescriptor</var>’s\n  <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-minimum-fill\" id=\"ref-for-pull-into-descriptor-minimum-fill⑤\">minimum fill</a>, return.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-shift-pending-pull-into\" id=\"ref-for-readable-byte-stream-controller-shift-pending-pull-into⑤\">ReadableByteStreamControllerShiftPendingPullInto</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Let <var>remainderSize</var> be the remainder after dividing <var>pullIntoDescriptor</var>’s\n  <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled②②\">bytes filled</a> by <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-element-size\" id=\"ref-for-pull-into-descriptor-element-size⑧\">element size</a>.</p>"
        },
        {
          "html": "If <var>remainderSize</var> &gt; 0,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>end</var> be <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-byte-offset\" id=\"ref-for-pull-into-descriptor-byte-offset⑦\">byte offset</a> +\n  <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled②③\">bytes filled</a>.</p>"
            },
            {
              "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollerenqueueclonedchunktoqueue\" id=\"ref-for-abstract-opdef-readablebytestreamcontrollerenqueueclonedchunktoqueue①\">ReadableByteStreamControllerEnqueueClonedChunkToQueue</a>(<var>controller</var>,\n  <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer\" id=\"ref-for-pull-into-descriptor-buffer②⓪\">buffer</a>, <var>end</var> − <var>remainderSize</var>,\n  <var>remainderSize</var>).</p>"
            }
          ]
        },
        {
          "html": "<p>Set <var>pullIntoDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled②④\">bytes filled</a> to <var>pullIntoDescriptor</var>’s\n  <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled②⑤\">bytes filled</a> − <var>remainderSize</var>.</p>"
        },
        {
          "html": "<p>Let <var>filledPullIntos</var> be the result of performing\n  ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-process-pull-into-descriptors-using-queue\" id=\"ref-for-readable-byte-stream-controller-process-pull-into-descriptors-using-queue②\">ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-commit-pull-into-descriptor\" id=\"ref-for-readable-byte-stream-controller-commit-pull-into-descriptor③\">ReadableByteStreamControllerCommitPullIntoDescriptor</a>(<var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream①④\">[[stream]]</a>,\n  <var>pullIntoDescriptor</var>).</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate⑦\">For each</a> <var>filledPullInto</var> of <var>filledPullIntos</var>,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-commit-pull-into-descriptor\" id=\"ref-for-readable-byte-stream-controller-commit-pull-into-descriptor④\">ReadableByteStreamControllerCommitPullIntoDescriptor</a>(<var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream①⑤\">[[stream]]</a>,\n  <var>filledPullInto</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerRespondInternal",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond-internal",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerRespondInternal\" id=\"readable-byte-stream-controller-respond-internal\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerRespondInternal(<var>controller</var>,\n <var>bytesWritten</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>firstDescriptor</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos②⑥\">[[pendingPullIntos]]</a>[0].</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#can-transfer-array-buffer\" id=\"ref-for-can-transfer-array-buffer\">CanTransferArrayBuffer</a>(<var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer\" id=\"ref-for-pull-into-descriptor-buffer②①\">buffer</a>) is true.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-invalidate-byob-request\" id=\"ref-for-readable-byte-stream-controller-invalidate-byob-request②\">ReadableByteStreamControllerInvalidateBYOBRequest</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Let <var>state</var> be\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream①⑥\">[[stream]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state③④\">[[state]]</a>.</p>"
        },
        {
          "html": "If <var>state</var> is \"<code>closed</code>\",",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>bytesWritten</var> is 0.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond-in-closed-state\" id=\"ref-for-readable-byte-stream-controller-respond-in-closed-state\">ReadableByteStreamControllerRespondInClosedState</a>(<var>controller</var>,\n  <var>firstDescriptor</var>).</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>state</var> is \"<code>readable</code>\".</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>bytesWritten</var> &gt; 0.</p>"
            },
            {
              "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond-in-readable-state\" id=\"ref-for-readable-byte-stream-controller-respond-in-readable-state\">ReadableByteStreamControllerRespondInReadableState</a>(<var>controller</var>, <var>bytesWritten</var>,\n  <var>firstDescriptor</var>).</p>"
            }
          ]
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-call-pull-if-needed\" id=\"ref-for-readable-byte-stream-controller-call-pull-if-needed⑤\">ReadableByteStreamControllerCallPullIfNeeded</a>(<var>controller</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerRespondWithNewView",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond-with-new-view",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerRespondWithNewView\" id=\"readable-byte-stream-controller-respond-with-new-view\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerRespondWithNewView(<var>controller</var>,\n <var>view</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos②⑦\">[[pendingPullIntos]]</a> is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty②⓪\">empty</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-isdetachedbuffer\" id=\"ref-for-sec-isdetachedbuffer⑥\">IsDetachedBuffer</a>(<var>view</var>.[[ViewedArrayBuffer]]) is false.</p>"
        },
        {
          "html": "<p>Let <var>firstDescriptor</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos②⑧\">[[pendingPullIntos]]</a>[0].</p>"
        },
        {
          "html": "<p>Let <var>state</var> be\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream①⑦\">[[stream]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state③⑤\">[[state]]</a>.</p>"
        },
        {
          "html": "If <var>state</var> is \"<code>closed</code>\",",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>view</var>.[[ByteLength]] is not 0, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror④④\">TypeError</a></code> exception.</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>state</var> is \"<code>readable</code>\".</p>"
            },
            {
              "html": "<p>If <var>view</var>.[[ByteLength]] is 0, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror④⑤\">TypeError</a></code> exception.</p>"
            }
          ]
        },
        {
          "html": "<p>If <var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-byte-offset\" id=\"ref-for-pull-into-descriptor-byte-offset⑧\">byte offset</a> + <var>firstDescriptor</var>’ <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled②⑥\">bytes filled</a> is not <var>view</var>.[[ByteOffset]], throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-rangeerror\" id=\"ref-for-exceptiondef-rangeerror④\">RangeError</a></code> exception.</p>"
        },
        {
          "html": "<p>If <var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer-byte-length\" id=\"ref-for-pull-into-descriptor-buffer-byte-length②\">buffer byte length</a> is not\n  <var>view</var>.[[ViewedArrayBuffer]].[[ByteLength]], throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-rangeerror\" id=\"ref-for-exceptiondef-rangeerror⑤\">RangeError</a></code> exception.</p>"
        },
        {
          "html": "<p>If <var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-bytes-filled\" id=\"ref-for-pull-into-descriptor-bytes-filled②⑦\">bytes filled</a> + <var>view</var>.[[ByteLength]] &gt;\n  <var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-byte-length\" id=\"ref-for-pull-into-descriptor-byte-length⑦\">byte length</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-rangeerror\" id=\"ref-for-exceptiondef-rangeerror⑥\">RangeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Let <var>viewByteLength</var> be <var>view</var>.[[ByteLength]].</p>"
        },
        {
          "html": "<p>Set <var>firstDescriptor</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pull-into-descriptor-buffer\" id=\"ref-for-pull-into-descriptor-buffer②②\">buffer</a> to ?\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transfer-array-buffer\" id=\"ref-for-transfer-array-buffer⑤\">TransferArrayBuffer</a>(<var>view</var>.[[ViewedArrayBuffer]]).</p>"
        },
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond-internal\" id=\"ref-for-readable-byte-stream-controller-respond-internal①\">ReadableByteStreamControllerRespondInternal</a>(<var>controller</var>, <var>viewByteLength</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerShiftPendingPullInto",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-shift-pending-pull-into",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerShiftPendingPullInto\" id=\"readable-byte-stream-controller-shift-pending-pull-into\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerShiftPendingPullInto(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-byobrequest\" id=\"ref-for-readablebytestreamcontroller-byobrequest⑧\">[[byobRequest]]</a> is null.</p>"
        },
        {
          "html": "<p>Let <var>descriptor</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos②⑨\">[[pendingPullIntos]]</a>[0].</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-remove\" id=\"ref-for-list-remove⑤\">Remove</a> <var>descriptor</var> from\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos③⓪\">[[pendingPullIntos]]</a>.</p>"
        },
        {
          "html": "<p>Return <var>descriptor</var>.</p>"
        }
      ]
    },
    {
      "name": "ReadableByteStreamControllerShouldCallPull",
      "href": "https://streams.spec.whatwg.org/#readable-byte-stream-controller-should-call-pull",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ReadableByteStreamControllerShouldCallPull\" id=\"readable-byte-stream-controller-should-call-pull\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ReadableByteStreamControllerShouldCallPull(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream①⑧\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state③⑥\">[[state]]</a> is not \"<code>readable</code>\", return false.</p>"
        },
        {
          "html": "<p>If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-closerequested\" id=\"ref-for-readablebytestreamcontroller-closerequested⑧\">[[closeRequested]]</a> is true, return false.</p>"
        },
        {
          "html": "<p>If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-started\" id=\"ref-for-readablebytestreamcontroller-started\">[[started]]</a> is false, return false.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-has-default-reader\" id=\"ref-for-readable-stream-has-default-reader④\">ReadableStreamHasDefaultReader</a>(<var>stream</var>) is true and !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-get-num-read-requests\" id=\"ref-for-readable-stream-get-num-read-requests④\">ReadableStreamGetNumReadRequests</a>(<var>stream</var>) &gt; 0, return true.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-has-byob-reader\" id=\"ref-for-readable-stream-has-byob-reader④\">ReadableStreamHasBYOBReader</a>(<var>stream</var>) is true and !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-get-num-read-into-requests\" id=\"ref-for-readable-stream-get-num-read-into-requests①\">ReadableStreamGetNumReadIntoRequests</a>(<var>stream</var>) &gt; 0, return true.</p>"
        },
        {
          "html": "<p>Let <var>desiredSize</var> be  ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-get-desired-size\" id=\"ref-for-readable-byte-stream-controller-get-desired-size①\">ReadableByteStreamControllerGetDesiredSize</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>desiredSize</var> is not null.</p>"
        },
        {
          "html": "<p>If <var>desiredSize</var> &gt; 0, return true.</p>"
        },
        {
          "html": "<p>Return false.</p>"
        }
      ]
    },
    {
      "name": "SetUpReadableByteStreamController",
      "href": "https://streams.spec.whatwg.org/#set-up-readable-byte-stream-controller",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"SetUpReadableByteStreamController\" id=\"set-up-readable-byte-stream-controller\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">SetUpReadableByteStreamController(<var>stream</var>,\n <var>controller</var>, <var>startAlgorithm</var>, <var>pullAlgorithm</var>, <var>cancelAlgorithm</var>, <var>highWaterMark</var>,\n <var>autoAllocateChunkSize</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller④④\">[[controller]]</a> is undefined.</p>"
        },
        {
          "html": "If <var>autoAllocateChunkSize</var> is not undefined,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/#sec-isinteger\" id=\"ref-for-sec-isinteger\">IsInteger</a>(<var>autoAllocateChunkSize</var>) is true.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>autoAllocateChunkSize</var> is positive.</p>"
            }
          ]
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-stream\" id=\"ref-for-readablebytestreamcontroller-stream①⑨\">[[stream]]</a> to <var>stream</var>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pullagain\" id=\"ref-for-readablebytestreamcontroller-pullagain④\">[[pullAgain]]</a> and\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pulling\" id=\"ref-for-readablebytestreamcontroller-pulling③\">[[pulling]]</a> to false.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-byobrequest\" id=\"ref-for-readablebytestreamcontroller-byobrequest⑨\">[[byobRequest]]</a> to null.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#reset-queue\" id=\"ref-for-reset-queue⑤\">ResetQueue</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-closerequested\" id=\"ref-for-readablebytestreamcontroller-closerequested⑨\">[[closeRequested]]</a> and\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-started\" id=\"ref-for-readablebytestreamcontroller-started①\">[[started]]</a> to false.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-strategyhwm\" id=\"ref-for-readablebytestreamcontroller-strategyhwm①\">[[strategyHWM]]</a> to <var>highWaterMark</var>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pullalgorithm\" id=\"ref-for-readablebytestreamcontroller-pullalgorithm②\">[[pullAlgorithm]]</a> to <var>pullAlgorithm</var>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-cancelalgorithm\" id=\"ref-for-readablebytestreamcontroller-cancelalgorithm②\">[[cancelAlgorithm]]</a> to <var>cancelAlgorithm</var>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-autoallocatechunksize\" id=\"ref-for-readablebytestreamcontroller-autoallocatechunksize①\">[[autoAllocateChunkSize]]</a> to\n  <var>autoAllocateChunkSize</var>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos③①\">[[pendingPullIntos]]</a> to a new empty <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list①⑤\">list</a>.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller④⑤\">[[controller]]</a> to <var>controller</var>.</p>"
        },
        {
          "html": "<p>Let <var>startResult</var> be the result of performing <var>startAlgorithm</var>.</p>"
        },
        {
          "html": "<p>Let <var>startPromise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with①⑦\">a promise resolved with</a> <var>startResult</var>.</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-fulfillment\" id=\"ref-for-upon-fulfillment④\">Upon fulfillment</a>  of <var>startPromise</var>,",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-started\" id=\"ref-for-readablebytestreamcontroller-started②\">[[started]]</a> to true.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pulling\" id=\"ref-for-readablebytestreamcontroller-pulling④\">[[pulling]]</a> is false.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pullagain\" id=\"ref-for-readablebytestreamcontroller-pullagain⑤\">[[pullAgain]]</a> is false.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-call-pull-if-needed\" id=\"ref-for-readable-byte-stream-controller-call-pull-if-needed⑥\">ReadableByteStreamControllerCallPullIfNeeded</a>(<var>controller</var>).</p>"
            }
          ]
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-rejection\" id=\"ref-for-upon-rejection⑥\">Upon rejection</a> of <var>startPromise</var> with reason <var>r</var>,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-error\" id=\"ref-for-readable-byte-stream-controller-error①②\">ReadableByteStreamControllerError</a>(<var>controller</var>, <var>r</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "SetUpReadableByteStreamControllerFromUnderlyingSource",
      "href": "https://streams.spec.whatwg.org/#set-up-readable-byte-stream-controller-from-underlying-source",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"SetUpReadableByteStreamControllerFromUnderlyingSource\" id=\"set-up-readable-byte-stream-controller-from-underlying-source\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">SetUpReadableByteStreamControllerFromUnderlyingSource(<var>stream</var>,\n <var>underlyingSource</var>, <var>underlyingSourceDict</var>, <var>highWaterMark</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>controller</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new①①\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller\" id=\"ref-for-readablebytestreamcontroller①⑧\">ReadableByteStreamController</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>startAlgorithm</var> be an algorithm that returns undefined.</p>"
        },
        {
          "html": "<p>Let <var>pullAlgorithm</var> be an algorithm that returns <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with①⑧\">a promise resolved with</a> undefined.</p>"
        },
        {
          "html": "<p>Let <var>cancelAlgorithm</var> be an algorithm that returns <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with①⑨\">a promise resolved with</a> undefined.</p>"
        },
        {
          "html": "<p>If <var>underlyingSourceDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsource-start\" id=\"ref-for-dom-underlyingsource-start⑥\">start</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑧\">exists</a>, then set\n  <var>startAlgorithm</var> to an algorithm which returns the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#invoke-a-callback-function\" id=\"ref-for-invoke-a-callback-function④\">invoking</a>\n  <var>underlyingSourceDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsource-start\" id=\"ref-for-dom-underlyingsource-start⑦\">start</a></code>\"] with argument list\n  «&nbsp;<var>controller</var>&nbsp;» and <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-callback-this-value\" id=\"ref-for-dfn-callback-this-value③\">callback this value</a> <var>underlyingSource</var>.</p>"
        },
        {
          "html": "<p>If <var>underlyingSourceDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsource-pull\" id=\"ref-for-dom-underlyingsource-pull⑥\">pull</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists⑨\">exists</a>, then set\n  <var>pullAlgorithm</var> to an algorithm which returns the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#invoke-a-callback-function\" id=\"ref-for-invoke-a-callback-function⑤\">invoking</a>\n  <var>underlyingSourceDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsource-pull\" id=\"ref-for-dom-underlyingsource-pull⑦\">pull</a></code>\"] with argument list\n  «&nbsp;<var>controller</var>&nbsp;» and <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-callback-this-value\" id=\"ref-for-dfn-callback-this-value④\">callback this value</a> <var>underlyingSource</var>.</p>"
        },
        {
          "html": "<p>If <var>underlyingSourceDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsource-cancel\" id=\"ref-for-dom-underlyingsource-cancel④\">cancel</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①⓪\">exists</a>, then set\n  <var>cancelAlgorithm</var> to an algorithm which takes an argument <var>reason</var> and returns the result of\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#invoke-a-callback-function\" id=\"ref-for-invoke-a-callback-function⑥\">invoking</a> <var>underlyingSourceDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsource-cancel\" id=\"ref-for-dom-underlyingsource-cancel⑤\">cancel</a></code>\"] with argument list\n  «&nbsp;<var>reason</var>&nbsp;» and <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-callback-this-value\" id=\"ref-for-dfn-callback-this-value⑤\">callback this value</a> <var>underlyingSource</var>.</p>"
        },
        {
          "html": "<p>Let <var>autoAllocateChunkSize</var> be\n  <var>underlyingSourceDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsource-autoallocatechunksize\" id=\"ref-for-dom-underlyingsource-autoallocatechunksize①\">autoAllocateChunkSize</a></code>\"], if it <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①①\">exists</a>, or\n  undefined otherwise.</p>"
        },
        {
          "html": "<p>If <var>autoAllocateChunkSize</var> is 0, then throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror④⑥\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-readable-byte-stream-controller\" id=\"ref-for-set-up-readable-byte-stream-controller①\">SetUpReadableByteStreamController</a>(<var>stream</var>, <var>controller</var>, <var>startAlgorithm</var>,\n  <var>pullAlgorithm</var>, <var>cancelAlgorithm</var>, <var>highWaterMark</var>, <var>autoAllocateChunkSize</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStream/WritableStream(underlyingSink, strategy)",
      "href": "https://streams.spec.whatwg.org/#ws-constructor",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WritableStream\" data-dfn-type=\"constructor\" data-export=\"\" data-lt=\"WritableStream(underlyingSink, strategy)|constructor(underlyingSink, strategy)|WritableStream(underlyingSink)|constructor(underlyingSink)|WritableStream()|constructor()\" id=\"ws-constructor\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>new WritableStream(<var>underlyingSink</var>, <var>strategy</var>)</code></dfn> constructor steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>underlyingSink</var> is missing, set it to null.</p>"
        },
        {
          "html": "<p>Let <var>underlyingSinkDict</var> be <var>underlyingSink</var>, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-convert-ecmascript-to-idl-value\" id=\"ref-for-dfn-convert-ecmascript-to-idl-value①\">converted to an IDL value</a> of type\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dictdef-underlyingsink\" id=\"ref-for-dictdef-underlyingsink\">UnderlyingSink</a></code>.</p>"
        },
        {
          "html": "<p>If <var>underlyingSinkDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsink-type\" id=\"ref-for-dom-underlyingsink-type①\">type</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①②\">exists</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-rangeerror\" id=\"ref-for-exceptiondef-rangeerror⑦\">RangeError</a></code>\n  exception.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#initialize-writable-stream\" id=\"ref-for-initialize-writable-stream\">InitializeWritableStream</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑦④\">this</a>).</p>"
        },
        {
          "html": "<p>Let <var>sizeAlgorithm</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#make-size-algorithm-from-size-function\" id=\"ref-for-make-size-algorithm-from-size-function①\">ExtractSizeAlgorithm</a>(<var>strategy</var>).</p>"
        },
        {
          "html": "<p>Let <var>highWaterMark</var> be ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#validate-and-normalize-high-water-mark\" id=\"ref-for-validate-and-normalize-high-water-mark②\">ExtractHighWaterMark</a>(<var>strategy</var>, 1).</p>"
        },
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-writable-stream-default-controller-from-underlying-sink\" id=\"ref-for-set-up-writable-stream-default-controller-from-underlying-sink\">SetUpWritableStreamDefaultControllerFromUnderlyingSink</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑦⑤\">this</a>, <var>underlyingSink</var>,\n  <var>underlyingSinkDict</var>, <var>highWaterMark</var>, <var>sizeAlgorithm</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStream/locked",
      "href": "https://streams.spec.whatwg.org/#ws-locked",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WritableStream\" data-dfn-type=\"attribute\" data-export=\"\" id=\"ws-locked\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>locked</code></dfn> getter steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-writable-stream-locked\" id=\"ref-for-is-writable-stream-locked③\">IsWritableStreamLocked</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑦⑥\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "WritableStream/abort(reason)",
      "href": "https://streams.spec.whatwg.org/#ws-abort",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WritableStream\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"abort(reason)|abort()\" id=\"ws-abort\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>abort(<var>reason</var>)</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-writable-stream-locked\" id=\"ref-for-is-writable-stream-locked④\">IsWritableStreamLocked</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑦⑦\">this</a>) is true, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with①⑧\">a promise rejected with</a> a\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑤⓪\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-abort\" id=\"ref-for-writable-stream-abort⑤\">WritableStreamAbort</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑦⑧\">this</a>, <var>reason</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStream/close()",
      "href": "https://streams.spec.whatwg.org/#ws-close",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WritableStream\" data-dfn-type=\"method\" data-export=\"\" id=\"ws-close\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>close()</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-writable-stream-locked\" id=\"ref-for-is-writable-stream-locked⑤\">IsWritableStreamLocked</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑦⑨\">this</a>) is true, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with①⑨\">a promise rejected with</a> a\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑤①\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-close-queued-or-in-flight\" id=\"ref-for-writable-stream-close-queued-or-in-flight③\">WritableStreamCloseQueuedOrInFlight</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑧⓪\">this</a>) is true, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with②⓪\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑤②\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-close\" id=\"ref-for-writable-stream-close\">WritableStreamClose</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑧①\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "WritableStream/getWriter()",
      "href": "https://streams.spec.whatwg.org/#ws-get-writer",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WritableStream\" data-dfn-type=\"method\" data-export=\"\" id=\"ws-get-writer\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>getWriter()</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#acquire-writable-stream-default-writer\" id=\"ref-for-acquire-writable-stream-default-writer①\">AcquireWritableStreamDefaultWriter</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑧②\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "WritableStream transfer steps",
      "html": "<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestream\" id=\"ref-for-writablestream①⑤\">WritableStream</a></code> objects are <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#transferable-objects\" id=\"ref-for-transferable-objects②\">transferable objects</a>. Their <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#transfer-steps\" id=\"ref-for-transfer-steps①\">transfer steps</a>, given <var>value</var>\n and <var>dataHolder</var>, are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-writable-stream-locked\" id=\"ref-for-is-writable-stream-locked⑥\">IsWritableStreamLocked</a>(<var>value</var>) is true, throw a \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#datacloneerror\" id=\"ref-for-datacloneerror①\">DataCloneError</a></code>\" <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-DOMException\" id=\"ref-for-idl-DOMException①\">DOMException</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>port1</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new①②\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/web-messaging.html#messageport\" id=\"ref-for-messageport②\">MessagePort</a></code> in <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#current-realm\" id=\"ref-for-current-realm④\">the current Realm</a>.</p>"
        },
        {
          "html": "<p>Let <var>port2</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new①③\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/web-messaging.html#messageport\" id=\"ref-for-messageport③\">MessagePort</a></code> in <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#current-realm\" id=\"ref-for-current-realm⑤\">the current Realm</a>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/web-messaging.html#entangle\" id=\"ref-for-entangle①\">Entangle</a> <var>port1</var> and <var>port2</var>.</p>"
        },
        {
          "html": "<p>Let <var>readable</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new①④\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream④⑦\">ReadableStream</a></code> in <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#current-realm\" id=\"ref-for-current-realm⑥\">the current Realm</a>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-setupcrossrealmtransformreadable\" id=\"ref-for-abstract-opdef-setupcrossrealmtransformreadable①\">SetUpCrossRealmTransformReadable</a>(<var>readable</var>, <var>port1</var>).</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-pipe-to\" id=\"ref-for-readable-stream-pipe-to③\">ReadableStreamPipeTo</a>(<var>readable</var>, <var>value</var>, false, false, false).</p>"
        },
        {
          "html": "<p>Set <var>promise</var>.[[PromiseIsHandled]] to true.</p>"
        },
        {
          "html": "<p>Set <var>dataHolder</var>.[[port]] to ! <a data-link-type=\"abstract-op\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializewithtransfer\" id=\"ref-for-structuredserializewithtransfer①\">StructuredSerializeWithTransfer</a>(<var>port2</var>, « <var>port2</var> »).</p>"
        }
      ]
    },
    {
      "name": "WritableStream transfer-receiving steps",
      "html": "Their <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#transfer-receiving-steps\" id=\"ref-for-transfer-receiving-steps①\">transfer-receiving steps</a>, given <var>dataHolder</var> and <var>value</var>, are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>deserializedRecord</var> be ! <a data-link-type=\"abstract-op\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#structureddeserializewithtransfer\" id=\"ref-for-structureddeserializewithtransfer①\">StructuredDeserializeWithTransfer</a>(<var>dataHolder</var>.[[port]],\n  <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#current-realm\" id=\"ref-for-current-realm⑦\">the current Realm</a>).</p>"
        },
        {
          "html": "<p>Let <var>port</var> be a <var>deserializedRecord</var>.[[Deserialized]].</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-setupcrossrealmtransformwritable\" id=\"ref-for-abstract-opdef-setupcrossrealmtransformwritable①\">SetUpCrossRealmTransformWritable</a>(<var>value</var>, <var>port</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultWriter/WritableStreamDefaultWriter(stream)",
      "href": "https://streams.spec.whatwg.org/#default-writer-constructor",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WritableStreamDefaultWriter\" data-dfn-type=\"constructor\" data-export=\"\" data-lt=\"WritableStreamDefaultWriter(stream)|constructor(stream)\" id=\"default-writer-constructor\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>new WritableStreamDefaultWriter(<var>stream</var>)</code></dfn>\n constructor steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-writable-stream-default-writer\" id=\"ref-for-set-up-writable-stream-default-writer\">SetUpWritableStreamDefaultWriter</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑧③\">this</a>, <var>stream</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultWriter/closed",
      "href": "https://streams.spec.whatwg.org/#default-writer-closed",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WritableStreamDefaultWriter\" data-dfn-type=\"attribute\" data-export=\"\" id=\"default-writer-closed\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>closed</code></dfn>\n getter steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑧④\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-closedpromise\" id=\"ref-for-writablestreamdefaultwriter-closedpromise\">[[closedPromise]]</a>.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultWriter/desiredSize",
      "href": "https://streams.spec.whatwg.org/#default-writer-desired-size",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WritableStreamDefaultWriter\" data-dfn-type=\"attribute\" data-export=\"\" id=\"default-writer-desired-size\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>desiredSize</code></dfn> getter steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑧⑤\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-stream\" id=\"ref-for-writablestreamdefaultwriter-stream\">[[stream]]</a> is undefined, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑤③\">TypeError</a></code>\n  exception.</p>"
        },
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-writer-get-desired-size\" id=\"ref-for-writable-stream-default-writer-get-desired-size②\">WritableStreamDefaultWriterGetDesiredSize</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑧⑥\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultWriter/ready",
      "href": "https://streams.spec.whatwg.org/#default-writer-ready",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WritableStreamDefaultWriter\" data-dfn-type=\"attribute\" data-export=\"\" id=\"default-writer-ready\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>ready</code></dfn> getter\n steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑧⑦\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-readypromise\" id=\"ref-for-writablestreamdefaultwriter-readypromise\">[[readyPromise]]</a>.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultWriter/abort(reason)",
      "href": "https://streams.spec.whatwg.org/#default-writer-abort",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WritableStreamDefaultWriter\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"abort(reason)|abort()\" id=\"default-writer-abort\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>abort(<var>reason</var>)</code></dfn>\n method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑧⑧\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-stream\" id=\"ref-for-writablestreamdefaultwriter-stream①\">[[stream]]</a> is undefined, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with②①\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑤④\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-writer-abort\" id=\"ref-for-writable-stream-default-writer-abort\">WritableStreamDefaultWriterAbort</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑧⑨\">this</a>, <var>reason</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultWriter/close()",
      "href": "https://streams.spec.whatwg.org/#default-writer-close",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WritableStreamDefaultWriter\" data-dfn-type=\"method\" data-export=\"\" id=\"default-writer-close\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>close()</code></dfn> method\n steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑨⓪\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-stream\" id=\"ref-for-writablestreamdefaultwriter-stream②\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p>If <var>stream</var> is undefined, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with②②\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑤⑤\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-close-queued-or-in-flight\" id=\"ref-for-writable-stream-close-queued-or-in-flight④\">WritableStreamCloseQueuedOrInFlight</a>(<var>stream</var>) is true, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with②③\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑤⑥\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-writer-close\" id=\"ref-for-writable-stream-default-writer-close\">WritableStreamDefaultWriterClose</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑨①\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultWriter/releaseLock()",
      "href": "https://streams.spec.whatwg.org/#default-writer-release-lock",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WritableStreamDefaultWriter\" data-dfn-type=\"method\" data-export=\"\" id=\"default-writer-release-lock\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>releaseLock()</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑨②\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-stream\" id=\"ref-for-writablestreamdefaultwriter-stream③\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p>If <var>stream</var> is undefined, return.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writer\" id=\"ref-for-writablestream-writer\">[[writer]]</a> is not undefined.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-writer-release\" id=\"ref-for-writable-stream-default-writer-release①\">WritableStreamDefaultWriterRelease</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑨③\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultWriter/write(chunk)",
      "href": "https://streams.spec.whatwg.org/#default-writer-write",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WritableStreamDefaultWriter\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"write(chunk)|write()\" id=\"default-writer-write\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>write(<var>chunk</var>)</code></dfn>\n method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑨④\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-stream\" id=\"ref-for-writablestreamdefaultwriter-stream④\">[[stream]]</a> is undefined, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with②④\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑤⑦\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-writer-write\" id=\"ref-for-writable-stream-default-writer-write\">WritableStreamDefaultWriterWrite</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑨⑤\">this</a>, <var>chunk</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultController/signal",
      "href": "https://streams.spec.whatwg.org/#ws-default-controller-signal",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WritableStreamDefaultController\" data-dfn-type=\"attribute\" data-export=\"\" id=\"ws-default-controller-signal\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>signal</code></dfn> getter steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑨⑥\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-abortcontroller\" id=\"ref-for-writablestreamdefaultcontroller-abortcontroller\">[[abortController]]</a>’s\n  <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortcontroller-signal\" id=\"ref-for-abortcontroller-signal\">signal</a>.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultController/error(e)",
      "href": "https://streams.spec.whatwg.org/#ws-default-controller-error",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"WritableStreamDefaultController\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"error(e)|error()\" id=\"ws-default-controller-error\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>error(<var>e</var>)</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>state</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑨⑦\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-stream\" id=\"ref-for-writablestreamdefaultcontroller-stream\">[[stream]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state⑤\">[[state]]</a>.</p>"
        },
        {
          "html": "<p>If <var>state</var> is not \"<code>writable</code>\", return.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-error\" id=\"ref-for-writable-stream-default-controller-error\">WritableStreamDefaultControllerError</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑨⑧\">this</a>, <var>e</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultController/[[AbortSteps]]",
      "href": "https://streams.spec.whatwg.org/#ws-default-controller-private-abort",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"WritableStreamDefaultController\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"[[AbortSteps]]\" id=\"ws-default-controller-private-abort\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><span class=\"bs-old-id\" id=\"writable-stream-default-controller-abort\"></span>[[AbortSteps]](<var>reason</var>)</dfn> implements the\n <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-writablestreamcontroller-abortsteps\" id=\"ref-for-abstract-opdef-writablestreamcontroller-abortsteps\">[[AbortSteps]]</a> contract. It performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>result</var> be the result of performing\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this⑨⑨\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-abortalgorithm\" id=\"ref-for-writablestreamdefaultcontroller-abortalgorithm\">[[abortAlgorithm]]</a>, passing <var>reason</var>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-clear-algorithms\" id=\"ref-for-writable-stream-default-controller-clear-algorithms\">WritableStreamDefaultControllerClearAlgorithms</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①⓪⓪\">this</a>).</p>"
        },
        {
          "html": "<p>Return <var>result</var>.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultController/[[ErrorSteps]]",
      "href": "https://streams.spec.whatwg.org/#ws-default-controller-private-error",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"WritableStreamDefaultController\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"[[ErrorSteps]]\" id=\"ws-default-controller-private-error\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">[[ErrorSteps]]()</dfn> implements the\n <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-writablestreamcontroller-errorsteps\" id=\"ref-for-abstract-opdef-writablestreamcontroller-errorsteps\">[[ErrorSteps]]</a> contract. It performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#reset-queue\" id=\"ref-for-reset-queue⑥\">ResetQueue</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①⓪①\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "AcquireWritableStreamDefaultWriter",
      "href": "https://streams.spec.whatwg.org/#acquire-writable-stream-default-writer",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"AcquireWritableStreamDefaultWriter\" id=\"acquire-writable-stream-default-writer\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">AcquireWritableStreamDefaultWriter(<var>stream</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>writer</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new①⑤\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter\" id=\"ref-for-writablestreamdefaultwriter⑨\">WritableStreamDefaultWriter</a></code>.</p>"
        },
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-writable-stream-default-writer\" id=\"ref-for-set-up-writable-stream-default-writer①\">SetUpWritableStreamDefaultWriter</a>(<var>writer</var>, <var>stream</var>).</p>"
        },
        {
          "html": "<p>Return <var>writer</var>.</p>"
        }
      ]
    },
    {
      "name": "CreateWritableStream",
      "href": "https://streams.spec.whatwg.org/#create-writable-stream",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"CreateWritableStream\" id=\"create-writable-stream\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">CreateWritableStream(<var>startAlgorithm</var>, <var>writeAlgorithm</var>,\n <var>closeAlgorithm</var>, <var>abortAlgorithm</var>, <var>highWaterMark</var>, <var>sizeAlgorithm</var>)</dfn> performs the following\n steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-non-negative-number\" id=\"ref-for-is-non-negative-number①\">IsNonNegativeNumber</a>(<var>highWaterMark</var>) is true.</p>"
        },
        {
          "html": "<p>Let <var>stream</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new①⑥\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestream\" id=\"ref-for-writablestream②③\">WritableStream</a></code>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#initialize-writable-stream\" id=\"ref-for-initialize-writable-stream①\">InitializeWritableStream</a>(<var>stream</var>).</p>"
        },
        {
          "html": "<p>Let <var>controller</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new①⑦\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller\" id=\"ref-for-writablestreamdefaultcontroller①⓪\">WritableStreamDefaultController</a></code>.</p>"
        },
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-writable-stream-default-controller\" id=\"ref-for-set-up-writable-stream-default-controller\">SetUpWritableStreamDefaultController</a>(<var>stream</var>, <var>controller</var>, <var>startAlgorithm</var>,\n  <var>writeAlgorithm</var>, <var>closeAlgorithm</var>, <var>abortAlgorithm</var>, <var>highWaterMark</var>, <var>sizeAlgorithm</var>).</p>"
        },
        {
          "html": "<p>Return <var>stream</var>.</p>"
        }
      ]
    },
    {
      "name": "InitializeWritableStream",
      "href": "https://streams.spec.whatwg.org/#initialize-writable-stream",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"InitializeWritableStream\" id=\"initialize-writable-stream\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">InitializeWritableStream(<var>stream</var>)</dfn> performs the following\n steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state⑥\">[[state]]</a> to \"<code>writable</code>\".</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror③\">[[storedError]]</a>, <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writer\" id=\"ref-for-writablestream-writer①\">[[writer]]</a>,\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-controller\" id=\"ref-for-writablestream-controller\">[[controller]]</a>,\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightwriterequest\" id=\"ref-for-writablestream-inflightwriterequest①\">[[inFlightWriteRequest]]</a>,\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-closerequest\" id=\"ref-for-writablestream-closerequest①\">[[closeRequest]]</a>,\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightcloserequest\" id=\"ref-for-writablestream-inflightcloserequest①\">[[inFlightCloseRequest]]</a>, and\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-pendingabortrequest\" id=\"ref-for-writablestream-pendingabortrequest\">[[pendingAbortRequest]]</a> to undefined.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writerequests\" id=\"ref-for-writablestream-writerequests①\">[[writeRequests]]</a> to a new empty <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list①⑧\">list</a>.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-backpressure\" id=\"ref-for-writablestream-backpressure\">[[backpressure]]</a> to false.</p>"
        }
      ]
    },
    {
      "name": "IsWritableStreamLocked",
      "href": "https://streams.spec.whatwg.org/#is-writable-stream-locked",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"IsWritableStreamLocked\" id=\"is-writable-stream-locked\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">IsWritableStreamLocked(<var>stream</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writer\" id=\"ref-for-writablestream-writer②\">[[writer]]</a> is undefined, return false.</p>"
        },
        {
          "html": "<p>Return true.</p>"
        }
      ]
    },
    {
      "name": "SetUpWritableStreamDefaultWriter",
      "href": "https://streams.spec.whatwg.org/#set-up-writable-stream-default-writer",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"SetUpWritableStreamDefaultWriter\" id=\"set-up-writable-stream-default-writer\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">SetUpWritableStreamDefaultWriter(<var>writer</var>,\n <var>stream</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-writable-stream-locked\" id=\"ref-for-is-writable-stream-locked⑦\">IsWritableStreamLocked</a>(<var>stream</var>) is true, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑤⑧\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-stream\" id=\"ref-for-writablestreamdefaultwriter-stream⑤\">[[stream]]</a> to <var>stream</var>.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writer\" id=\"ref-for-writablestream-writer③\">[[writer]]</a> to <var>writer</var>.</p>"
        },
        {
          "html": "<p>Let <var>state</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state⑦\">[[state]]</a>.</p>"
        },
        {
          "html": "If <var>state</var> is \"<code>writable</code>\",",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-close-queued-or-in-flight\" id=\"ref-for-writable-stream-close-queued-or-in-flight⑤\">WritableStreamCloseQueuedOrInFlight</a>(<var>stream</var>) is false and\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-backpressure\" id=\"ref-for-writablestream-backpressure①\">[[backpressure]]</a> is true, set\n  <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-readypromise\" id=\"ref-for-writablestreamdefaultwriter-readypromise①\">[[readyPromise]]</a> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise⑦\">a new promise</a>.</p>"
            },
            {
              "html": "<p>Otherwise, set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-readypromise\" id=\"ref-for-writablestreamdefaultwriter-readypromise②\">[[readyPromise]]</a> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with②⓪\">a promise resolved with</a> undefined.</p>"
            },
            {
              "html": "<p>Set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-closedpromise\" id=\"ref-for-writablestreamdefaultwriter-closedpromise①\">[[closedPromise]]</a> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise⑧\">a new promise</a>.</p>"
            }
          ]
        },
        {
          "html": "Otherwise, if <var>state</var> is \"<code>erroring</code>\",",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-readypromise\" id=\"ref-for-writablestreamdefaultwriter-readypromise③\">[[readyPromise]]</a> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with②⑤\">a promise rejected with</a>\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror④\">[[storedError]]</a>.</p>"
            },
            {
              "html": "<p>Set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-readypromise\" id=\"ref-for-writablestreamdefaultwriter-readypromise④\">[[readyPromise]]</a>.[[PromiseIsHandled]] to true.</p>"
            },
            {
              "html": "<p>Set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-closedpromise\" id=\"ref-for-writablestreamdefaultwriter-closedpromise②\">[[closedPromise]]</a> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise⑨\">a new promise</a>.</p>"
            }
          ]
        },
        {
          "html": "Otherwise, if <var>state</var> is \"<code>closed</code>\",",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-readypromise\" id=\"ref-for-writablestreamdefaultwriter-readypromise⑤\">[[readyPromise]]</a> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with②①\">a promise resolved with</a>\n  undefined.</p>"
            },
            {
              "html": "<p>Set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-closedpromise\" id=\"ref-for-writablestreamdefaultwriter-closedpromise③\">[[closedPromise]]</a> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with②②\">a promise resolved with</a>\n  undefined.</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>state</var> is \"<code>errored</code>\".</p>"
            },
            {
              "html": "<p>Let <var>storedError</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror⑤\">[[storedError]]</a>.</p>"
            },
            {
              "html": "<p>Set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-readypromise\" id=\"ref-for-writablestreamdefaultwriter-readypromise⑥\">[[readyPromise]]</a> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with②⑥\">a promise rejected with</a>\n  <var>storedError</var>.</p>"
            },
            {
              "html": "<p>Set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-readypromise\" id=\"ref-for-writablestreamdefaultwriter-readypromise⑦\">[[readyPromise]]</a>.[[PromiseIsHandled]] to true.</p>"
            },
            {
              "html": "<p>Set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-closedpromise\" id=\"ref-for-writablestreamdefaultwriter-closedpromise④\">[[closedPromise]]</a> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with②⑦\">a promise rejected with</a>\n  <var>storedError</var>.</p>"
            },
            {
              "html": "<p>Set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-closedpromise\" id=\"ref-for-writablestreamdefaultwriter-closedpromise⑤\">[[closedPromise]]</a>.[[PromiseIsHandled]] to true.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "WritableStreamAbort",
      "href": "https://streams.spec.whatwg.org/#writable-stream-abort",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamAbort\" id=\"writable-stream-abort\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamAbort(<var>stream</var>, <var>reason</var>)</dfn> performs the following\n steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state⑧\">[[state]]</a> is \"<code>closed</code>\" or \"<code>errored</code>\", return\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with②③\">a promise resolved with</a> undefined.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#abortcontroller-signal-abort\" id=\"ref-for-abortcontroller-signal-abort\">Signal abort</a> on\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-controller\" id=\"ref-for-writablestream-controller①\">[[controller]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-abortcontroller\" id=\"ref-for-writablestreamdefaultcontroller-abortcontroller①\">[[abortController]]</a>\n  with <var>reason</var>.</p>"
        },
        {
          "html": "<p>Let <var>state</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state⑨\">[[state]]</a>.</p>"
        },
        {
          "html": "<p>If <var>state</var> is \"<code>closed</code>\" or \"<code>errored</code>\", return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with②④\">a promise resolved with</a> undefined.</p>"
        },
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-pendingabortrequest\" id=\"ref-for-writablestream-pendingabortrequest①\">[[pendingAbortRequest]]</a> is not undefined, return\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-pendingabortrequest\" id=\"ref-for-writablestream-pendingabortrequest②\">[[pendingAbortRequest]]</a>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pending-abort-request-promise\" id=\"ref-for-pending-abort-request-promise\">promise</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>state</var> is \"<code>writable</code>\" or \"<code>erroring</code>\".</p>"
        },
        {
          "html": "<p>Let <var>wasAlreadyErroring</var> be false.</p>"
        },
        {
          "html": "If <var>state</var> is \"<code>erroring</code>\",",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>wasAlreadyErroring</var> to true.</p>"
            },
            {
              "html": "<p>Set <var>reason</var> to undefined.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>promise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise①⓪\">a new promise</a>.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-pendingabortrequest\" id=\"ref-for-writablestream-pendingabortrequest③\">[[pendingAbortRequest]]</a> to a new <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pending-abort-request\" id=\"ref-for-pending-abort-request①\">pending abort request</a> whose\n  <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pending-abort-request-promise\" id=\"ref-for-pending-abort-request-promise①\">promise</a> is <var>promise</var>, <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pending-abort-request-reason\" id=\"ref-for-pending-abort-request-reason\">reason</a> is <var>reason</var>,\n  and <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pending-abort-request-was-already-erroring\" id=\"ref-for-pending-abort-request-was-already-erroring\">was already erroring</a> is <var>wasAlreadyErroring</var>.</p>"
        },
        {
          "html": "<p>If <var>wasAlreadyErroring</var> is false, perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-start-erroring\" id=\"ref-for-writable-stream-start-erroring\">WritableStreamStartErroring</a>(<var>stream</var>, <var>reason</var>).</p>"
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamClose",
      "href": "https://streams.spec.whatwg.org/#writable-stream-close",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamClose\" id=\"writable-stream-close\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamClose(<var>stream</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>state</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state①⓪\">[[state]]</a>.</p>"
        },
        {
          "html": "<p>If <var>state</var> is \"<code>closed</code>\" or \"<code>errored</code>\", return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with②⑧\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑤⑨\">TypeError</a></code>\n  exception.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>state</var> is \"<code>writable</code>\" or \"<code>erroring</code>\".</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-close-queued-or-in-flight\" id=\"ref-for-writable-stream-close-queued-or-in-flight⑥\">WritableStreamCloseQueuedOrInFlight</a>(<var>stream</var>) is false.</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise①①\">a new promise</a>.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-closerequest\" id=\"ref-for-writablestream-closerequest②\">[[closeRequest]]</a> to <var>promise</var>.</p>"
        },
        {
          "html": "<p>Let <var>writer</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writer\" id=\"ref-for-writablestream-writer④\">[[writer]]</a>.</p>"
        },
        {
          "html": "<p>If <var>writer</var> is not undefined, and <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-backpressure\" id=\"ref-for-writablestream-backpressure②\">[[backpressure]]</a> is true, and\n  <var>state</var> is \"<code>writable</code>\", <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve②⓪\">resolve</a> <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-readypromise\" id=\"ref-for-writablestreamdefaultwriter-readypromise⑧\">[[readyPromise]]</a>\n  with undefined.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-close\" id=\"ref-for-writable-stream-default-controller-close\">WritableStreamDefaultControllerClose</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-controller\" id=\"ref-for-writablestream-controller②\">[[controller]]</a>).</p>"
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamAddWriteRequest",
      "href": "https://streams.spec.whatwg.org/#writable-stream-add-write-request",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamAddWriteRequest\" id=\"writable-stream-add-write-request\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamAddWriteRequest(<var>stream</var>)</dfn> performs the\n following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-writable-stream-locked\" id=\"ref-for-is-writable-stream-locked⑧\">IsWritableStreamLocked</a>(<var>stream</var>) is true.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state①①\">[[state]]</a> is \"<code>writable</code>\".</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise①②\">a new promise</a>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append⑧\">Append</a> <var>promise</var> to <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writerequests\" id=\"ref-for-writablestream-writerequests②\">[[writeRequests]]</a>.</p>"
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamCloseQueuedOrInFlight",
      "href": "https://streams.spec.whatwg.org/#writable-stream-close-queued-or-in-flight",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamCloseQueuedOrInFlight\" id=\"writable-stream-close-queued-or-in-flight\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamCloseQueuedOrInFlight(<var>stream</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-closerequest\" id=\"ref-for-writablestream-closerequest③\">[[closeRequest]]</a> is undefined and\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightcloserequest\" id=\"ref-for-writablestream-inflightcloserequest②\">[[inFlightCloseRequest]]</a> is undefined, return false.</p>"
        },
        {
          "html": "<p>Return true.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDealWithRejection",
      "href": "https://streams.spec.whatwg.org/#writable-stream-deal-with-rejection",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDealWithRejection\" id=\"writable-stream-deal-with-rejection\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDealWithRejection(<var>stream</var>, <var>error</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>state</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state①②\">[[state]]</a>.</p>"
        },
        {
          "html": "If <var>state</var> is \"<code>writable</code>\",",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-start-erroring\" id=\"ref-for-writable-stream-start-erroring①\">WritableStreamStartErroring</a>(<var>stream</var>, <var>error</var>).</p>"
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>state</var> is \"<code>erroring</code>\".</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-finish-erroring\" id=\"ref-for-writable-stream-finish-erroring\">WritableStreamFinishErroring</a>(<var>stream</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamFinishErroring",
      "href": "https://streams.spec.whatwg.org/#writable-stream-finish-erroring",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamFinishErroring\" id=\"writable-stream-finish-erroring\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamFinishErroring(<var>stream</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state①③\">[[state]]</a> is \"<code>erroring</code>\".</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-has-operation-marked-in-flight\" id=\"ref-for-writable-stream-has-operation-marked-in-flight\">WritableStreamHasOperationMarkedInFlight</a>(<var>stream</var>) is false.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state①④\">[[state]]</a> to \"<code>errored</code>\".</p>"
        },
        {
          "html": "<p>Perform !\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-controller\" id=\"ref-for-writablestream-controller③\">[[controller]]</a>.<a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-writablestreamcontroller-errorsteps\" id=\"ref-for-abstract-opdef-writablestreamcontroller-errorsteps①\">[[ErrorSteps]]</a>().</p>"
        },
        {
          "html": "<p>Let <var>storedError</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror⑥\">[[storedError]]</a>.</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-iterate\" id=\"ref-for-list-iterate⑧\">For each</a> <var>writeRequest</var> of <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writerequests\" id=\"ref-for-writablestream-writerequests③\">[[writeRequests]]</a>:",
          "rationale": "reject",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject⑥\">Reject</a> <var>writeRequest</var> with <var>storedError</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writerequests\" id=\"ref-for-writablestream-writerequests④\">[[writeRequests]]</a> to an empty <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list①⑨\">list</a>.</p>"
        },
        {
          "html": "If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-pendingabortrequest\" id=\"ref-for-writablestream-pendingabortrequest④\">[[pendingAbortRequest]]</a> is undefined,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-reject-close-and-closed-promise-if-needed\" id=\"ref-for-writable-stream-reject-close-and-closed-promise-if-needed\">WritableStreamRejectCloseAndClosedPromiseIfNeeded</a>(<var>stream</var>).</p>"
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>abortRequest</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-pendingabortrequest\" id=\"ref-for-writablestream-pendingabortrequest⑤\">[[pendingAbortRequest]]</a>.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-pendingabortrequest\" id=\"ref-for-writablestream-pendingabortrequest⑥\">[[pendingAbortRequest]]</a> to undefined.</p>"
        },
        {
          "html": "If <var>abortRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pending-abort-request-was-already-erroring\" id=\"ref-for-pending-abort-request-was-already-erroring①\">was already erroring</a> is true,",
          "rationale": "reject",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject⑦\">Reject</a> <var>abortRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pending-abort-request-promise\" id=\"ref-for-pending-abort-request-promise②\">promise</a> with <var>storedError</var>.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-reject-close-and-closed-promise-if-needed\" id=\"ref-for-writable-stream-reject-close-and-closed-promise-if-needed①\">WritableStreamRejectCloseAndClosedPromiseIfNeeded</a>(<var>stream</var>).</p>"
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>promise</var> be !\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-controller\" id=\"ref-for-writablestream-controller④\">[[controller]]</a>.<a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-writablestreamcontroller-abortsteps\" id=\"ref-for-abstract-opdef-writablestreamcontroller-abortsteps①\">[[AbortSteps]]</a>(<var>abortRequest</var>’s\n  <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pending-abort-request-reason\" id=\"ref-for-pending-abort-request-reason①\">reason</a>).</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-fulfillment\" id=\"ref-for-upon-fulfillment⑤\">Upon fulfillment</a> of <var>promise</var>,",
          "rationale": "resolve",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve②①\">Resolve</a> <var>abortRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pending-abort-request-promise\" id=\"ref-for-pending-abort-request-promise③\">promise</a> with undefined.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-reject-close-and-closed-promise-if-needed\" id=\"ref-for-writable-stream-reject-close-and-closed-promise-if-needed②\">WritableStreamRejectCloseAndClosedPromiseIfNeeded</a>(<var>stream</var>).</p>"
            }
          ]
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-rejection\" id=\"ref-for-upon-rejection⑦\">Upon rejection</a> of <var>promise</var> with reason <var>reason</var>,",
          "rationale": "reject",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject⑧\">Reject</a> <var>abortRequest</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pending-abort-request-promise\" id=\"ref-for-pending-abort-request-promise④\">promise</a> with <var>reason</var>.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-reject-close-and-closed-promise-if-needed\" id=\"ref-for-writable-stream-reject-close-and-closed-promise-if-needed③\">WritableStreamRejectCloseAndClosedPromiseIfNeeded</a>(<var>stream</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "WritableStreamFinishInFlightClose",
      "href": "https://streams.spec.whatwg.org/#writable-stream-finish-in-flight-close",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamFinishInFlightClose\" id=\"writable-stream-finish-in-flight-close\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamFinishInFlightClose(<var>stream</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightcloserequest\" id=\"ref-for-writablestream-inflightcloserequest③\">[[inFlightCloseRequest]]</a> is not undefined.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve②②\">Resolve</a> <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightcloserequest\" id=\"ref-for-writablestream-inflightcloserequest④\">[[inFlightCloseRequest]]</a> with undefined.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightcloserequest\" id=\"ref-for-writablestream-inflightcloserequest⑤\">[[inFlightCloseRequest]]</a> to undefined.</p>"
        },
        {
          "html": "<p>Let <var>state</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state①⑤\">[[state]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state①⑥\">[[state]]</a> is \"<code>writable</code>\" or \"<code>erroring</code>\".</p>"
        },
        {
          "html": "If <var>state</var> is \"<code>erroring</code>\",",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror⑦\">[[storedError]]</a> to undefined.</p>"
            },
            {
              "html": "If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-pendingabortrequest\" id=\"ref-for-writablestream-pendingabortrequest⑦\">[[pendingAbortRequest]]</a> is not undefined,",
              "rationale": "resolve",
              "steps": [
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve②③\">Resolve</a> <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-pendingabortrequest\" id=\"ref-for-writablestream-pendingabortrequest⑧\">[[pendingAbortRequest]]</a>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pending-abort-request-promise\" id=\"ref-for-pending-abort-request-promise⑤\">promise</a> with undefined.</p>"
                },
                {
                  "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-pendingabortrequest\" id=\"ref-for-writablestream-pendingabortrequest⑨\">[[pendingAbortRequest]]</a> to undefined.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state①⑦\">[[state]]</a> to \"<code>closed</code>\".</p>"
        },
        {
          "html": "<p>Let <var>writer</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writer\" id=\"ref-for-writablestream-writer⑤\">[[writer]]</a>.</p>"
        },
        {
          "html": "<p>If <var>writer</var> is not undefined, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve②④\">resolve</a>\n  <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-closedpromise\" id=\"ref-for-writablestreamdefaultwriter-closedpromise⑥\">[[closedPromise]]</a> with undefined.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-pendingabortrequest\" id=\"ref-for-writablestream-pendingabortrequest①⓪\">[[pendingAbortRequest]]</a> is undefined.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror⑧\">[[storedError]]</a> is undefined.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamFinishInFlightCloseWithError",
      "href": "https://streams.spec.whatwg.org/#writable-stream-finish-in-flight-close-with-error",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamFinishInFlightCloseWithError\" id=\"writable-stream-finish-in-flight-close-with-error\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamFinishInFlightCloseWithError(<var>stream</var>,\n <var>error</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightcloserequest\" id=\"ref-for-writablestream-inflightcloserequest⑥\">[[inFlightCloseRequest]]</a> is not undefined.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject⑨\">Reject</a> <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightcloserequest\" id=\"ref-for-writablestream-inflightcloserequest⑦\">[[inFlightCloseRequest]]</a> with <var>error</var>.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightcloserequest\" id=\"ref-for-writablestream-inflightcloserequest⑧\">[[inFlightCloseRequest]]</a> to undefined.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state①⑧\">[[state]]</a> is \"<code>writable</code>\" or \"<code>erroring</code>\".</p>"
        },
        {
          "html": "If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-pendingabortrequest\" id=\"ref-for-writablestream-pendingabortrequest①①\">[[pendingAbortRequest]]</a> is not undefined,",
          "rationale": "reject",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject①⓪\">Reject</a> <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-pendingabortrequest\" id=\"ref-for-writablestream-pendingabortrequest①②\">[[pendingAbortRequest]]</a>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#pending-abort-request-promise\" id=\"ref-for-pending-abort-request-promise⑥\">promise</a> with <var>error</var>.</p>"
            },
            {
              "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-pendingabortrequest\" id=\"ref-for-writablestream-pendingabortrequest①③\">[[pendingAbortRequest]]</a> to undefined.</p>"
            }
          ]
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-deal-with-rejection\" id=\"ref-for-writable-stream-deal-with-rejection\">WritableStreamDealWithRejection</a>(<var>stream</var>, <var>error</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamFinishInFlightWrite",
      "href": "https://streams.spec.whatwg.org/#writable-stream-finish-in-flight-write",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamFinishInFlightWrite\" id=\"writable-stream-finish-in-flight-write\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamFinishInFlightWrite(<var>stream</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightwriterequest\" id=\"ref-for-writablestream-inflightwriterequest②\">[[inFlightWriteRequest]]</a> is not undefined.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve②⑤\">Resolve</a> <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightwriterequest\" id=\"ref-for-writablestream-inflightwriterequest③\">[[inFlightWriteRequest]]</a> with undefined.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightwriterequest\" id=\"ref-for-writablestream-inflightwriterequest④\">[[inFlightWriteRequest]]</a> to undefined.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamFinishInFlightWriteWithError",
      "href": "https://streams.spec.whatwg.org/#writable-stream-finish-in-flight-write-with-error",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamFinishInFlightWriteWithError\" id=\"writable-stream-finish-in-flight-write-with-error\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamFinishInFlightWriteWithError(<var>stream</var>,\n <var>error</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightwriterequest\" id=\"ref-for-writablestream-inflightwriterequest⑤\">[[inFlightWriteRequest]]</a> is not undefined.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject①①\">Reject</a> <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightwriterequest\" id=\"ref-for-writablestream-inflightwriterequest⑥\">[[inFlightWriteRequest]]</a> with <var>error</var>.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightwriterequest\" id=\"ref-for-writablestream-inflightwriterequest⑦\">[[inFlightWriteRequest]]</a> to undefined.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state①⑨\">[[state]]</a> is \"<code>writable</code>\" or \"<code>erroring</code>\".</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-deal-with-rejection\" id=\"ref-for-writable-stream-deal-with-rejection①\">WritableStreamDealWithRejection</a>(<var>stream</var>, <var>error</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamHasOperationMarkedInFlight",
      "href": "https://streams.spec.whatwg.org/#writable-stream-has-operation-marked-in-flight",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamHasOperationMarkedInFlight\" id=\"writable-stream-has-operation-marked-in-flight\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamHasOperationMarkedInFlight(<var>stream</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightwriterequest\" id=\"ref-for-writablestream-inflightwriterequest⑧\">[[inFlightWriteRequest]]</a> is undefined and\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightcloserequest\" id=\"ref-for-writablestream-inflightcloserequest⑨\">[[inFlightCloseRequest]]</a> is undefined, return false.</p>"
        },
        {
          "html": "<p>Return true.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamMarkCloseRequestInFlight",
      "href": "https://streams.spec.whatwg.org/#writable-stream-mark-close-request-in-flight",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamMarkCloseRequestInFlight\" id=\"writable-stream-mark-close-request-in-flight\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamMarkCloseRequestInFlight(<var>stream</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightcloserequest\" id=\"ref-for-writablestream-inflightcloserequest①⓪\">[[inFlightCloseRequest]]</a> is undefined.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-closerequest\" id=\"ref-for-writablestream-closerequest④\">[[closeRequest]]</a> is not undefined.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightcloserequest\" id=\"ref-for-writablestream-inflightcloserequest①①\">[[inFlightCloseRequest]]</a> to\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-closerequest\" id=\"ref-for-writablestream-closerequest⑤\">[[closeRequest]]</a>.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-closerequest\" id=\"ref-for-writablestream-closerequest⑥\">[[closeRequest]]</a> to undefined.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamMarkFirstWriteRequestInFlight",
      "href": "https://streams.spec.whatwg.org/#writable-stream-mark-first-write-request-in-flight",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamMarkFirstWriteRequestInFlight\" id=\"writable-stream-mark-first-write-request-in-flight\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamMarkFirstWriteRequestInFlight(<var>stream</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightwriterequest\" id=\"ref-for-writablestream-inflightwriterequest⑨\">[[inFlightWriteRequest]]</a> is undefined.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writerequests\" id=\"ref-for-writablestream-writerequests⑤\">[[writeRequests]]</a> is not empty.</p>"
        },
        {
          "html": "<p>Let <var>writeRequest</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writerequests\" id=\"ref-for-writablestream-writerequests⑥\">[[writeRequests]]</a>[0].</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-remove\" id=\"ref-for-list-remove⑥\">Remove</a> <var>writeRequest</var> from <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writerequests\" id=\"ref-for-writablestream-writerequests⑦\">[[writeRequests]]</a>.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightwriterequest\" id=\"ref-for-writablestream-inflightwriterequest①⓪\">[[inFlightWriteRequest]]</a> to <var>writeRequest</var>.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamRejectCloseAndClosedPromiseIfNeeded",
      "href": "https://streams.spec.whatwg.org/#writable-stream-reject-close-and-closed-promise-if-needed",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamRejectCloseAndClosedPromiseIfNeeded\" id=\"writable-stream-reject-close-and-closed-promise-if-needed\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamRejectCloseAndClosedPromiseIfNeeded(<var>stream</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state②⓪\">[[state]]</a> is \"<code>errored</code>\".</p>"
        },
        {
          "html": "If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-closerequest\" id=\"ref-for-writablestream-closerequest⑦\">[[closeRequest]]</a> is not undefined,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightcloserequest\" id=\"ref-for-writablestream-inflightcloserequest①②\">[[inFlightCloseRequest]]</a> is undefined.</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject①②\">Reject</a> <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-closerequest\" id=\"ref-for-writablestream-closerequest⑧\">[[closeRequest]]</a> with\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror⑨\">[[storedError]]</a>.</p>"
            },
            {
              "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-closerequest\" id=\"ref-for-writablestream-closerequest⑨\">[[closeRequest]]</a> to undefined.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>writer</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writer\" id=\"ref-for-writablestream-writer⑥\">[[writer]]</a>.</p>"
        },
        {
          "html": "If <var>writer</var> is not undefined,",
          "rationale": "reject",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject①③\">Reject</a> <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-closedpromise\" id=\"ref-for-writablestreamdefaultwriter-closedpromise⑦\">[[closedPromise]]</a> with\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror①⓪\">[[storedError]]</a>.</p>"
            },
            {
              "html": "<p>Set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-closedpromise\" id=\"ref-for-writablestreamdefaultwriter-closedpromise⑧\">[[closedPromise]]</a>.[[PromiseIsHandled]] to true.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "WritableStreamStartErroring",
      "href": "https://streams.spec.whatwg.org/#writable-stream-start-erroring",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamStartErroring\" id=\"writable-stream-start-erroring\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamStartErroring(<var>stream</var>, <var>reason</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror①①\">[[storedError]]</a> is undefined.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state②①\">[[state]]</a> is \"<code>writable</code>\".</p>"
        },
        {
          "html": "<p>Let <var>controller</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-controller\" id=\"ref-for-writablestream-controller⑤\">[[controller]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>controller</var> is not undefined.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state②②\">[[state]]</a> to \"<code>erroring</code>\".</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror①②\">[[storedError]]</a> to <var>reason</var>.</p>"
        },
        {
          "html": "<p>Let <var>writer</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writer\" id=\"ref-for-writablestream-writer⑦\">[[writer]]</a>.</p>"
        },
        {
          "html": "<p>If <var>writer</var> is not undefined, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-writer-ensure-ready-promise-rejected\" id=\"ref-for-writable-stream-default-writer-ensure-ready-promise-rejected\">WritableStreamDefaultWriterEnsureReadyPromiseRejected</a>(<var>writer</var>, <var>reason</var>).</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-has-operation-marked-in-flight\" id=\"ref-for-writable-stream-has-operation-marked-in-flight①\">WritableStreamHasOperationMarkedInFlight</a>(<var>stream</var>) is false and\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-started\" id=\"ref-for-writablestreamdefaultcontroller-started\">[[started]]</a> is true, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-finish-erroring\" id=\"ref-for-writable-stream-finish-erroring①\">WritableStreamFinishErroring</a>(<var>stream</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamUpdateBackpressure",
      "href": "https://streams.spec.whatwg.org/#writable-stream-update-backpressure",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamUpdateBackpressure\" id=\"writable-stream-update-backpressure\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamUpdateBackpressure(<var>stream</var>,\n <var>backpressure</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state②③\">[[state]]</a> is \"<code>writable</code>\".</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-close-queued-or-in-flight\" id=\"ref-for-writable-stream-close-queued-or-in-flight⑦\">WritableStreamCloseQueuedOrInFlight</a>(<var>stream</var>) is false.</p>"
        },
        {
          "html": "<p>Let <var>writer</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writer\" id=\"ref-for-writablestream-writer⑧\">[[writer]]</a>.</p>"
        },
        {
          "html": "If <var>writer</var> is not undefined and <var>backpressure</var> is not\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-backpressure\" id=\"ref-for-writablestream-backpressure③\">[[backpressure]]</a>,",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>backpressure</var> is true, set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-readypromise\" id=\"ref-for-writablestreamdefaultwriter-readypromise⑨\">[[readyPromise]]</a> to\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise①③\">a new promise</a>.</p>"
            },
            {
              "html": "Otherwise,",
              "rationale": "assert",
              "steps": [
                {
                  "html": "<p class=\"assertion\">Assert: <var>backpressure</var> is false.</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve②⑥\">Resolve</a> <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-readypromise\" id=\"ref-for-writablestreamdefaultwriter-readypromise①⓪\">[[readyPromise]]</a> with undefined.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-backpressure\" id=\"ref-for-writablestream-backpressure④\">[[backpressure]]</a> to <var>backpressure</var>.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultWriterAbort",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-writer-abort",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultWriterAbort\" id=\"writable-stream-default-writer-abort\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultWriterAbort(<var>writer</var>,\n <var>reason</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-stream\" id=\"ref-for-writablestreamdefaultwriter-stream⑥\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var> is not undefined.</p>"
        },
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-abort\" id=\"ref-for-writable-stream-abort⑥\">WritableStreamAbort</a>(<var>stream</var>, <var>reason</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultWriterClose",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-writer-close",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultWriterClose\" id=\"writable-stream-default-writer-close\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultWriterClose(<var>writer</var>)</dfn> performs\n the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-stream\" id=\"ref-for-writablestreamdefaultwriter-stream⑦\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var> is not undefined.</p>"
        },
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-close\" id=\"ref-for-writable-stream-close①\">WritableStreamClose</a>(<var>stream</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultWriterCloseWithErrorPropagation",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-writer-close-with-error-propagation",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultWriterCloseWithErrorPropagation\" id=\"writable-stream-default-writer-close-with-error-propagation\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultWriterCloseWithErrorPropagation(<var>writer</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-stream\" id=\"ref-for-writablestreamdefaultwriter-stream⑧\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var> is not undefined.</p>"
        },
        {
          "html": "<p>Let <var>state</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state②④\">[[state]]</a>.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-close-queued-or-in-flight\" id=\"ref-for-writable-stream-close-queued-or-in-flight⑧\">WritableStreamCloseQueuedOrInFlight</a>(<var>stream</var>) is true or <var>state</var> is \"<code>closed</code>\", return\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with②⑤\">a promise resolved with</a> undefined.</p>"
        },
        {
          "html": "<p>If <var>state</var> is \"<code>errored</code>\", return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with②⑨\">a promise rejected with</a>\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror①③\">[[storedError]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>state</var> is \"<code>writable</code>\" or \"<code>erroring</code>\".</p>"
        },
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-writer-close\" id=\"ref-for-writable-stream-default-writer-close①\">WritableStreamDefaultWriterClose</a>(<var>writer</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultWriterEnsureClosedPromiseRejected",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-writer-ensure-closed-promise-rejected",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultWriterEnsureClosedPromiseRejected\" id=\"writable-stream-default-writer-ensure-closed-promise-rejected\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultWriterEnsureClosedPromiseRejected(<var>writer</var>,\n <var>error</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-closedpromise\" id=\"ref-for-writablestreamdefaultwriter-closedpromise⑨\">[[closedPromise]]</a>.[[PromiseState]] is \"<code>pending</code>\",\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject①④\">reject</a> <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-closedpromise\" id=\"ref-for-writablestreamdefaultwriter-closedpromise①⓪\">[[closedPromise]]</a> with <var>error</var>.</p>"
        },
        {
          "html": "<p>Otherwise, set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-closedpromise\" id=\"ref-for-writablestreamdefaultwriter-closedpromise①①\">[[closedPromise]]</a> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with③⓪\">a promise rejected with</a> <var>error</var>.</p>"
        },
        {
          "html": "<p>Set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-closedpromise\" id=\"ref-for-writablestreamdefaultwriter-closedpromise①②\">[[closedPromise]]</a>.[[PromiseIsHandled]] to true.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultWriterEnsureReadyPromiseRejected",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-writer-ensure-ready-promise-rejected",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultWriterEnsureReadyPromiseRejected\" id=\"writable-stream-default-writer-ensure-ready-promise-rejected\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultWriterEnsureReadyPromiseRejected(<var>writer</var>,\n <var>error</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-readypromise\" id=\"ref-for-writablestreamdefaultwriter-readypromise①①\">[[readyPromise]]</a>.[[PromiseState]] is \"<code>pending</code>\",\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject①⑤\">reject</a> <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-readypromise\" id=\"ref-for-writablestreamdefaultwriter-readypromise①②\">[[readyPromise]]</a> with <var>error</var>.</p>"
        },
        {
          "html": "<p>Otherwise, set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-readypromise\" id=\"ref-for-writablestreamdefaultwriter-readypromise①③\">[[readyPromise]]</a> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with③①\">a promise rejected with</a> <var>error</var>.</p>"
        },
        {
          "html": "<p>Set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-readypromise\" id=\"ref-for-writablestreamdefaultwriter-readypromise①④\">[[readyPromise]]</a>.[[PromiseIsHandled]] to true.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultWriterGetDesiredSize",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-writer-get-desired-size",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultWriterGetDesiredSize\" id=\"writable-stream-default-writer-get-desired-size\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultWriterGetDesiredSize(<var>writer</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-stream\" id=\"ref-for-writablestreamdefaultwriter-stream⑨\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p>Let <var>state</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state②⑤\">[[state]]</a>.</p>"
        },
        {
          "html": "<p>If <var>state</var> is \"<code>errored</code>\" or \"<code>erroring</code>\", return null.</p>"
        },
        {
          "html": "<p>If <var>state</var> is \"<code>closed</code>\", return 0.</p>"
        },
        {
          "html": "<p>Return !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-get-desired-size\" id=\"ref-for-writable-stream-default-controller-get-desired-size\">WritableStreamDefaultControllerGetDesiredSize</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-controller\" id=\"ref-for-writablestream-controller⑥\">[[controller]]</a>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultWriterRelease",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-writer-release",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultWriterRelease\" id=\"writable-stream-default-writer-release\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultWriterRelease(<var>writer</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-stream\" id=\"ref-for-writablestreamdefaultwriter-stream①⓪\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var> is not undefined.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writer\" id=\"ref-for-writablestream-writer⑨\">[[writer]]</a> is <var>writer</var>.</p>"
        },
        {
          "html": "<p>Let <var>releasedError</var> be a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑥⓪\">TypeError</a></code>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-writer-ensure-ready-promise-rejected\" id=\"ref-for-writable-stream-default-writer-ensure-ready-promise-rejected①\">WritableStreamDefaultWriterEnsureReadyPromiseRejected</a>(<var>writer</var>, <var>releasedError</var>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-writer-ensure-closed-promise-rejected\" id=\"ref-for-writable-stream-default-writer-ensure-closed-promise-rejected\">WritableStreamDefaultWriterEnsureClosedPromiseRejected</a>(<var>writer</var>, <var>releasedError</var>).</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-writer\" id=\"ref-for-writablestream-writer①⓪\">[[writer]]</a> to undefined.</p>"
        },
        {
          "html": "<p>Set <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-stream\" id=\"ref-for-writablestreamdefaultwriter-stream①①\">[[stream]]</a> to undefined.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultWriterWrite",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-writer-write",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultWriterWrite\" id=\"writable-stream-default-writer-write\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultWriterWrite(<var>writer</var>, <var>chunk</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-stream\" id=\"ref-for-writablestreamdefaultwriter-stream①②\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var> is not undefined.</p>"
        },
        {
          "html": "<p>Let <var>controller</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-controller\" id=\"ref-for-writablestream-controller⑦\">[[controller]]</a>.</p>"
        },
        {
          "html": "<p>Let <var>chunkSize</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-get-chunk-size\" id=\"ref-for-writable-stream-default-controller-get-chunk-size\">WritableStreamDefaultControllerGetChunkSize</a>(<var>controller</var>, <var>chunk</var>).</p>"
        },
        {
          "html": "<p>If <var>stream</var> is not equal to <var>writer</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter-stream\" id=\"ref-for-writablestreamdefaultwriter-stream①③\">[[stream]]</a>, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with③②\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑥①\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Let <var>state</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state②⑥\">[[state]]</a>.</p>"
        },
        {
          "html": "<p>If <var>state</var> is \"<code>errored</code>\", return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with③③\">a promise rejected with</a>\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror①④\">[[storedError]]</a>.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-close-queued-or-in-flight\" id=\"ref-for-writable-stream-close-queued-or-in-flight⑨\">WritableStreamCloseQueuedOrInFlight</a>(<var>stream</var>) is true or <var>state</var> is \"<code>closed</code>\", return\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with③④\">a promise rejected with</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑥②\">TypeError</a></code> exception indicating that the stream is closing or\n  closed.</p>"
        },
        {
          "html": "<p>If <var>state</var> is \"<code>erroring</code>\", return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with③⑤\">a promise rejected with</a>\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror①⑤\">[[storedError]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>state</var> is \"<code>writable</code>\".</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-add-write-request\" id=\"ref-for-writable-stream-add-write-request\">WritableStreamAddWriteRequest</a>(<var>stream</var>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-write\" id=\"ref-for-writable-stream-default-controller-write\">WritableStreamDefaultControllerWrite</a>(<var>controller</var>, <var>chunk</var>, <var>chunkSize</var>).</p>"
        },
        {
          "html": "<p>Return <var>promise</var>.</p>"
        }
      ]
    },
    {
      "name": "SetUpWritableStreamDefaultController",
      "href": "https://streams.spec.whatwg.org/#set-up-writable-stream-default-controller",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"SetUpWritableStreamDefaultController\" id=\"set-up-writable-stream-default-controller\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">SetUpWritableStreamDefaultController(<var>stream</var>,\n <var>controller</var>, <var>startAlgorithm</var>, <var>writeAlgorithm</var>, <var>closeAlgorithm</var>, <var>abortAlgorithm</var>,\n <var>highWaterMark</var>, <var>sizeAlgorithm</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements②②\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestream\" id=\"ref-for-writablestream②⑧\">WritableStream</a></code>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-controller\" id=\"ref-for-writablestream-controller⑧\">[[controller]]</a> is undefined.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-stream\" id=\"ref-for-writablestreamdefaultcontroller-stream①\">[[stream]]</a> to <var>stream</var>.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-controller\" id=\"ref-for-writablestream-controller⑨\">[[controller]]</a> to <var>controller</var>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#reset-queue\" id=\"ref-for-reset-queue⑦\">ResetQueue</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-abortcontroller\" id=\"ref-for-writablestreamdefaultcontroller-abortcontroller②\">[[abortController]]</a> to a new\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#abortcontroller\" id=\"ref-for-abortcontroller②\">AbortController</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-started\" id=\"ref-for-writablestreamdefaultcontroller-started①\">[[started]]</a> to false.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-strategysizealgorithm\" id=\"ref-for-writablestreamdefaultcontroller-strategysizealgorithm\">[[strategySizeAlgorithm]]</a> to\n  <var>sizeAlgorithm</var>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-strategyhwm\" id=\"ref-for-writablestreamdefaultcontroller-strategyhwm\">[[strategyHWM]]</a> to <var>highWaterMark</var>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-writealgorithm\" id=\"ref-for-writablestreamdefaultcontroller-writealgorithm\">[[writeAlgorithm]]</a> to <var>writeAlgorithm</var>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-closealgorithm\" id=\"ref-for-writablestreamdefaultcontroller-closealgorithm\">[[closeAlgorithm]]</a> to <var>closeAlgorithm</var>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-abortalgorithm\" id=\"ref-for-writablestreamdefaultcontroller-abortalgorithm①\">[[abortAlgorithm]]</a> to <var>abortAlgorithm</var>.</p>"
        },
        {
          "html": "<p>Let <var>backpressure</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-get-backpressure\" id=\"ref-for-writable-stream-default-controller-get-backpressure\">WritableStreamDefaultControllerGetBackpressure</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-update-backpressure\" id=\"ref-for-writable-stream-update-backpressure\">WritableStreamUpdateBackpressure</a>(<var>stream</var>, <var>backpressure</var>).</p>"
        },
        {
          "html": "<p>Let <var>startResult</var> be the result of performing <var>startAlgorithm</var>. (This may throw an exception.)</p>"
        },
        {
          "html": "<p>Let <var>startPromise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with②⑥\">a promise resolved with</a> <var>startResult</var>.</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-fulfillment\" id=\"ref-for-upon-fulfillment⑥\">Upon fulfillment</a> of <var>startPromise</var>,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state②⑦\">[[state]]</a> is \"<code>writable</code>\" or \"<code>erroring</code>\".</p>"
            },
            {
              "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-started\" id=\"ref-for-writablestreamdefaultcontroller-started②\">[[started]]</a> to true.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-advance-queue-if-needed\" id=\"ref-for-writable-stream-default-controller-advance-queue-if-needed\">WritableStreamDefaultControllerAdvanceQueueIfNeeded</a>(<var>controller</var>).</p>"
            }
          ]
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-rejection\" id=\"ref-for-upon-rejection⑧\">Upon rejection</a> of <var>startPromise</var> with reason <var>r</var>,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state②⑧\">[[state]]</a> is \"<code>writable</code>\" or \"<code>erroring</code>\".</p>"
            },
            {
              "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-started\" id=\"ref-for-writablestreamdefaultcontroller-started③\">[[started]]</a> to true.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-deal-with-rejection\" id=\"ref-for-writable-stream-deal-with-rejection②\">WritableStreamDealWithRejection</a>(<var>stream</var>, <var>r</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "SetUpWritableStreamDefaultControllerFromUnderlyingSink",
      "href": "https://streams.spec.whatwg.org/#set-up-writable-stream-default-controller-from-underlying-sink",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"SetUpWritableStreamDefaultControllerFromUnderlyingSink\" id=\"set-up-writable-stream-default-controller-from-underlying-sink\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">SetUpWritableStreamDefaultControllerFromUnderlyingSink(<var>stream</var>,\n <var>underlyingSink</var>, <var>underlyingSinkDict</var>, <var>highWaterMark</var>, <var>sizeAlgorithm</var>)</dfn> performs the\n following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>controller</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new①⑧\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller\" id=\"ref-for-writablestreamdefaultcontroller①④\">WritableStreamDefaultController</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>startAlgorithm</var> be an algorithm that returns undefined.</p>"
        },
        {
          "html": "<p>Let <var>writeAlgorithm</var> be an algorithm that returns <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with②⑦\">a promise resolved with</a> undefined.</p>"
        },
        {
          "html": "<p>Let <var>closeAlgorithm</var> be an algorithm that returns <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with②⑧\">a promise resolved with</a> undefined.</p>"
        },
        {
          "html": "<p>Let <var>abortAlgorithm</var> be an algorithm that returns <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with②⑨\">a promise resolved with</a> undefined.</p>"
        },
        {
          "html": "<p>If <var>underlyingSinkDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsink-start\" id=\"ref-for-dom-underlyingsink-start③\">start</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①③\">exists</a>, then set <var>startAlgorithm</var> to\n  an algorithm which returns the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#invoke-a-callback-function\" id=\"ref-for-invoke-a-callback-function⑧\">invoking</a>\n  <var>underlyingSinkDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsink-start\" id=\"ref-for-dom-underlyingsink-start④\">start</a></code>\"] with argument list «&nbsp;<var>controller</var>&nbsp;»,\n  exception behavior \"<code>rethrow</code>\", and <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-callback-this-value\" id=\"ref-for-dfn-callback-this-value⑥\">callback this value</a> <var>underlyingSink</var>.</p>"
        },
        {
          "html": "<p>If <var>underlyingSinkDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsink-write\" id=\"ref-for-dom-underlyingsink-write④\">write</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①④\">exists</a>, then set <var>writeAlgorithm</var> to\n  an algorithm which takes an argument <var>chunk</var> and returns the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#invoke-a-callback-function\" id=\"ref-for-invoke-a-callback-function⑨\">invoking</a>\n  <var>underlyingSinkDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsink-write\" id=\"ref-for-dom-underlyingsink-write⑤\">write</a></code>\"] with argument list «&nbsp;<var>chunk</var>,\n  <var>controller</var>&nbsp;» and <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-callback-this-value\" id=\"ref-for-dfn-callback-this-value⑦\">callback this value</a> <var>underlyingSink</var>.</p>"
        },
        {
          "html": "<p>If <var>underlyingSinkDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsink-close\" id=\"ref-for-dom-underlyingsink-close④\">close</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①⑤\">exists</a>, then set <var>closeAlgorithm</var> to\n  an algorithm which returns the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#invoke-a-callback-function\" id=\"ref-for-invoke-a-callback-function①⓪\">invoking</a>\n  <var>underlyingSinkDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsink-close\" id=\"ref-for-dom-underlyingsink-close⑤\">close</a></code>\"] with argument list «» and <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-callback-this-value\" id=\"ref-for-dfn-callback-this-value⑧\">callback this value</a> <var>underlyingSink</var>.</p>"
        },
        {
          "html": "<p>If <var>underlyingSinkDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsink-abort\" id=\"ref-for-dom-underlyingsink-abort③\">abort</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①⑥\">exists</a>, then set <var>abortAlgorithm</var> to\n  an algorithm which takes an argument <var>reason</var> and returns the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#invoke-a-callback-function\" id=\"ref-for-invoke-a-callback-function①①\">invoking</a>\n  <var>underlyingSinkDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-underlyingsink-abort\" id=\"ref-for-dom-underlyingsink-abort④\">abort</a></code>\"] with argument list «&nbsp;<var>reason</var>&nbsp;» and\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-callback-this-value\" id=\"ref-for-dfn-callback-this-value⑨\">callback this value</a> <var>underlyingSink</var>.</p>"
        },
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-writable-stream-default-controller\" id=\"ref-for-set-up-writable-stream-default-controller①\">SetUpWritableStreamDefaultController</a>(<var>stream</var>, <var>controller</var>, <var>startAlgorithm</var>,\n  <var>writeAlgorithm</var>, <var>closeAlgorithm</var>, <var>abortAlgorithm</var>, <var>highWaterMark</var>, <var>sizeAlgorithm</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultControllerAdvanceQueueIfNeeded",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-controller-advance-queue-if-needed",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultControllerAdvanceQueueIfNeeded\" id=\"writable-stream-default-controller-advance-queue-if-needed\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultControllerAdvanceQueueIfNeeded(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-stream\" id=\"ref-for-writablestreamdefaultcontroller-stream②\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p>If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-started\" id=\"ref-for-writablestreamdefaultcontroller-started④\">[[started]]</a> is false, return.</p>"
        },
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-inflightwriterequest\" id=\"ref-for-writablestream-inflightwriterequest①①\">[[inFlightWriteRequest]]</a> is not undefined, return.</p>"
        },
        {
          "html": "<p>Let <var>state</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state②⑨\">[[state]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>state</var> is not \"<code>closed</code>\" or \"<code>errored</code>\".</p>"
        },
        {
          "html": "If <var>state</var> is \"<code>erroring</code>\",",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-finish-erroring\" id=\"ref-for-writable-stream-finish-erroring②\">WritableStreamFinishErroring</a>(<var>stream</var>).</p>"
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "<p>If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-queue\" id=\"ref-for-writablestreamdefaultcontroller-queue②\">[[queue]]</a> is empty, return.</p>"
        },
        {
          "html": "<p>Let <var>value</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#peek-queue-value\" id=\"ref-for-peek-queue-value\">PeekQueueValue</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>If <var>value</var> is the <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#close-sentinel\" id=\"ref-for-close-sentinel\">close sentinel</a>, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-process-close\" id=\"ref-for-writable-stream-default-controller-process-close\">WritableStreamDefaultControllerProcessClose</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Otherwise, perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-process-write\" id=\"ref-for-writable-stream-default-controller-process-write\">WritableStreamDefaultControllerProcessWrite</a>(<var>controller</var>,\n  <var>value</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultControllerClearAlgorithms",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-controller-clear-algorithms",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultControllerClearAlgorithms\" id=\"writable-stream-default-controller-clear-algorithms\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultControllerClearAlgorithms(<var>controller</var>)</dfn>\n is called once the stream is closed or errored and the algorithms will not be executed any more. By\n removing the algorithm references it permits the <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#underlying-sink\" id=\"ref-for-underlying-sink③②\">underlying sink</a> object to be garbage\n collected even if the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestream\" id=\"ref-for-writablestream②⑨\">WritableStream</a></code> itself is still referenced.\n\n \n    \n    <p>It performs the following steps:</p>",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-writealgorithm\" id=\"ref-for-writablestreamdefaultcontroller-writealgorithm①\">[[writeAlgorithm]]</a> to undefined.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-closealgorithm\" id=\"ref-for-writablestreamdefaultcontroller-closealgorithm①\">[[closeAlgorithm]]</a> to undefined.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-abortalgorithm\" id=\"ref-for-writablestreamdefaultcontroller-abortalgorithm②\">[[abortAlgorithm]]</a> to undefined.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-strategysizealgorithm\" id=\"ref-for-writablestreamdefaultcontroller-strategysizealgorithm①\">[[strategySizeAlgorithm]]</a> to undefined.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultControllerClose",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-controller-close",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultControllerClose\" id=\"writable-stream-default-controller-close\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultControllerClose(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#enqueue-value-with-size\" id=\"ref-for-enqueue-value-with-size①\">EnqueueValueWithSize</a>(<var>controller</var>, <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#close-sentinel\" id=\"ref-for-close-sentinel①\">close sentinel</a>, 0).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-advance-queue-if-needed\" id=\"ref-for-writable-stream-default-controller-advance-queue-if-needed①\">WritableStreamDefaultControllerAdvanceQueueIfNeeded</a>(<var>controller</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultControllerError",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-controller-error",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultControllerError\" id=\"writable-stream-default-controller-error\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultControllerError(<var>controller</var>,\n <var>error</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-stream\" id=\"ref-for-writablestreamdefaultcontroller-stream③\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state③⓪\">[[state]]</a> is \"<code>writable</code>\".</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-clear-algorithms\" id=\"ref-for-writable-stream-default-controller-clear-algorithms①\">WritableStreamDefaultControllerClearAlgorithms</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-start-erroring\" id=\"ref-for-writable-stream-start-erroring②\">WritableStreamStartErroring</a>(<var>stream</var>, <var>error</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultControllerErrorIfNeeded",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-controller-error-if-needed",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultControllerErrorIfNeeded\" id=\"writable-stream-default-controller-error-if-needed\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultControllerErrorIfNeeded(<var>controller</var>,\n <var>error</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-stream\" id=\"ref-for-writablestreamdefaultcontroller-stream④\">[[stream]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state③①\">[[state]]</a> is\n  \"<code>writable</code>\", perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-error\" id=\"ref-for-writable-stream-default-controller-error①\">WritableStreamDefaultControllerError</a>(<var>controller</var>, <var>error</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultControllerGetBackpressure",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-controller-get-backpressure",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultControllerGetBackpressure\" id=\"writable-stream-default-controller-get-backpressure\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultControllerGetBackpressure(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>desiredSize</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-get-desired-size\" id=\"ref-for-writable-stream-default-controller-get-desired-size①\">WritableStreamDefaultControllerGetDesiredSize</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p>Return true if <var>desiredSize</var> ≤ 0, or false otherwise.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultControllerGetChunkSize",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-controller-get-chunk-size",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultControllerGetChunkSize\" id=\"writable-stream-default-controller-get-chunk-size\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultControllerGetChunkSize(<var>controller</var>,\n <var>chunk</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-strategysizealgorithm\" id=\"ref-for-writablestreamdefaultcontroller-strategysizealgorithm②\">[[strategySizeAlgorithm]]</a> is undefined, then:",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-stream\" id=\"ref-for-writablestreamdefaultcontroller-stream⑤\">[[stream]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state③②\">[[state]]</a> is not\n  \"<code>writable</code>\".</p>"
            },
            {
              "html": "<p>Return 1.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>returnValue</var> be the result of performing\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-strategysizealgorithm\" id=\"ref-for-writablestreamdefaultcontroller-strategysizealgorithm③\">[[strategySizeAlgorithm]]</a>, passing in <var>chunk</var>,\n  and interpreting the result as a <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-completion-record-specification-type\" id=\"ref-for-sec-completion-record-specification-type②\">completion record</a>.</p>"
        },
        {
          "html": "If <var>returnValue</var> is an abrupt completion,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-error-if-needed\" id=\"ref-for-writable-stream-default-controller-error-if-needed\">WritableStreamDefaultControllerErrorIfNeeded</a>(<var>controller</var>,\n  <var>returnValue</var>.[[Value]]).</p>"
            },
            {
              "html": "<p>Return 1.</p>"
            }
          ]
        },
        {
          "html": "<p>Return <var>returnValue</var>.[[Value]].</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultControllerGetDesiredSize",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-controller-get-desired-size",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultControllerGetDesiredSize\" id=\"writable-stream-default-controller-get-desired-size\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultControllerGetDesiredSize(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-strategyhwm\" id=\"ref-for-writablestreamdefaultcontroller-strategyhwm①\">[[strategyHWM]]</a> −\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-queuetotalsize\" id=\"ref-for-writablestreamdefaultcontroller-queuetotalsize\">[[queueTotalSize]]</a>.</p>"
        }
      ]
    },
    {
      "name": "WritableStreamDefaultControllerProcessClose",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-controller-process-close",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultControllerProcessClose\" id=\"writable-stream-default-controller-process-close\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultControllerProcessClose(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-stream\" id=\"ref-for-writablestreamdefaultcontroller-stream⑥\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-mark-close-request-in-flight\" id=\"ref-for-writable-stream-mark-close-request-in-flight\">WritableStreamMarkCloseRequestInFlight</a>(<var>stream</var>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#dequeue-value\" id=\"ref-for-dequeue-value①\">DequeueValue</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-queue\" id=\"ref-for-writablestreamdefaultcontroller-queue③\">[[queue]]</a> is empty.</p>"
        },
        {
          "html": "<p>Let <var>sinkClosePromise</var> be the result of performing\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-closealgorithm\" id=\"ref-for-writablestreamdefaultcontroller-closealgorithm②\">[[closeAlgorithm]]</a>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-clear-algorithms\" id=\"ref-for-writable-stream-default-controller-clear-algorithms②\">WritableStreamDefaultControllerClearAlgorithms</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-fulfillment\" id=\"ref-for-upon-fulfillment⑦\">Upon fulfillment</a> of <var>sinkClosePromise</var>,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-finish-in-flight-close\" id=\"ref-for-writable-stream-finish-in-flight-close\">WritableStreamFinishInFlightClose</a>(<var>stream</var>).</p>"
            }
          ]
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-rejection\" id=\"ref-for-upon-rejection⑨\">Upon rejection</a> of <var>sinkClosePromise</var> with reason <var>reason</var>,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-finish-in-flight-close-with-error\" id=\"ref-for-writable-stream-finish-in-flight-close-with-error\">WritableStreamFinishInFlightCloseWithError</a>(<var>stream</var>, <var>reason</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "WritableStreamDefaultControllerProcessWrite",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-controller-process-write",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultControllerProcessWrite\" id=\"writable-stream-default-controller-process-write\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultControllerProcessWrite(<var>controller</var>,\n <var>chunk</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-stream\" id=\"ref-for-writablestreamdefaultcontroller-stream⑦\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-mark-first-write-request-in-flight\" id=\"ref-for-writable-stream-mark-first-write-request-in-flight\">WritableStreamMarkFirstWriteRequestInFlight</a>(<var>stream</var>).</p>"
        },
        {
          "html": "<p>Let <var>sinkWritePromise</var> be the result of performing\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-writealgorithm\" id=\"ref-for-writablestreamdefaultcontroller-writealgorithm②\">[[writeAlgorithm]]</a>, passing in <var>chunk</var>.</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-fulfillment\" id=\"ref-for-upon-fulfillment⑧\">Upon fulfillment</a> of <var>sinkWritePromise</var>,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-finish-in-flight-write\" id=\"ref-for-writable-stream-finish-in-flight-write\">WritableStreamFinishInFlightWrite</a>(<var>stream</var>).</p>"
            },
            {
              "html": "<p>Let <var>state</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state③③\">[[state]]</a>.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>state</var> is \"<code>writable</code>\" or \"<code>erroring</code>\".</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#dequeue-value\" id=\"ref-for-dequeue-value②\">DequeueValue</a>(<var>controller</var>).</p>"
            },
            {
              "html": "If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-close-queued-or-in-flight\" id=\"ref-for-writable-stream-close-queued-or-in-flight①⓪\">WritableStreamCloseQueuedOrInFlight</a>(<var>stream</var>) is false and <var>state</var> is \"<code>writable</code>\",",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>backpressure</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-get-backpressure\" id=\"ref-for-writable-stream-default-controller-get-backpressure①\">WritableStreamDefaultControllerGetBackpressure</a>(<var>controller</var>).</p>"
                },
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-update-backpressure\" id=\"ref-for-writable-stream-update-backpressure①\">WritableStreamUpdateBackpressure</a>(<var>stream</var>, <var>backpressure</var>).</p>"
                }
              ]
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-advance-queue-if-needed\" id=\"ref-for-writable-stream-default-controller-advance-queue-if-needed②\">WritableStreamDefaultControllerAdvanceQueueIfNeeded</a>(<var>controller</var>).</p>"
            }
          ]
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#upon-rejection\" id=\"ref-for-upon-rejection①⓪\">Upon rejection</a> of <var>sinkWritePromise</var> with <var>reason</var>,",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state③④\">[[state]]</a> is \"<code>writable</code>\", perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-clear-algorithms\" id=\"ref-for-writable-stream-default-controller-clear-algorithms③\">WritableStreamDefaultControllerClearAlgorithms</a>(<var>controller</var>).</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-finish-in-flight-write-with-error\" id=\"ref-for-writable-stream-finish-in-flight-write-with-error\">WritableStreamFinishInFlightWriteWithError</a>(<var>stream</var>, <var>reason</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "WritableStreamDefaultControllerWrite",
      "href": "https://streams.spec.whatwg.org/#writable-stream-default-controller-write",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"WritableStreamDefaultControllerWrite\" id=\"writable-stream-default-controller-write\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">WritableStreamDefaultControllerWrite(<var>controller</var>,\n <var>chunk</var>, <var>chunkSize</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>enqueueResult</var> be <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#enqueue-value-with-size\" id=\"ref-for-enqueue-value-with-size②\">EnqueueValueWithSize</a>(<var>controller</var>, <var>chunk</var>, <var>chunkSize</var>).</p>"
        },
        {
          "html": "If <var>enqueueResult</var> is an abrupt completion,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-error-if-needed\" id=\"ref-for-writable-stream-default-controller-error-if-needed①\">WritableStreamDefaultControllerErrorIfNeeded</a>(<var>controller</var>,\n  <var>enqueueResult</var>.[[Value]]).</p>"
            },
            {
              "html": "<p>Return.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>stream</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller-stream\" id=\"ref-for-writablestreamdefaultcontroller-stream⑧\">[[stream]]</a>.</p>"
        },
        {
          "html": "If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-close-queued-or-in-flight\" id=\"ref-for-writable-stream-close-queued-or-in-flight①①\">WritableStreamCloseQueuedOrInFlight</a>(<var>stream</var>) is false and\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state③⑤\">[[state]]</a> is \"<code>writable</code>\",",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>backpressure</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-get-backpressure\" id=\"ref-for-writable-stream-default-controller-get-backpressure②\">WritableStreamDefaultControllerGetBackpressure</a>(<var>controller</var>).</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-update-backpressure\" id=\"ref-for-writable-stream-update-backpressure②\">WritableStreamUpdateBackpressure</a>(<var>stream</var>, <var>backpressure</var>).</p>"
            }
          ]
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-advance-queue-if-needed\" id=\"ref-for-writable-stream-default-controller-advance-queue-if-needed③\">WritableStreamDefaultControllerAdvanceQueueIfNeeded</a>(<var>controller</var>).</p>"
        }
      ]
    },
    {
      "name": "TransformStream/TransformStream(transformer, writableStrategy, readableStrategy)",
      "href": "https://streams.spec.whatwg.org/#ts-constructor",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"TransformStream\" data-dfn-type=\"constructor\" data-export=\"\" data-lt=\"TransformStream(transformer, writableStrategy, readableStrategy)|constructor(transformer, writableStrategy, readableStrategy)|TransformStream(transformer, writableStrategy)|constructor(transformer, writableStrategy)|TransformStream(transformer)|constructor(transformer)|TransformStream()|constructor()\" id=\"ts-constructor\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>new TransformStream(<var>transformer</var>, <var>writableStrategy</var>,\n <var>readableStrategy</var>)</code></dfn> constructor steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>transformer</var> is missing, set it to null.</p>"
        },
        {
          "html": "<p>Let <var>transformerDict</var> be <var>transformer</var>, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-convert-ecmascript-to-idl-value\" id=\"ref-for-dfn-convert-ecmascript-to-idl-value②\">converted to an IDL value</a> of type <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dictdef-transformer\" id=\"ref-for-dictdef-transformer\">Transformer</a></code>.</p>"
        },
        {
          "html": "<p>If <var>transformerDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-transformer-readabletype\" id=\"ref-for-dom-transformer-readabletype①\">readableType</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①⑦\">exists</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-rangeerror\" id=\"ref-for-exceptiondef-rangeerror⑧\">RangeError</a></code>\n  exception.</p>"
        },
        {
          "html": "<p>If <var>transformerDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-transformer-writabletype\" id=\"ref-for-dom-transformer-writabletype①\">writableType</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①⑧\">exists</a>, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-rangeerror\" id=\"ref-for-exceptiondef-rangeerror⑨\">RangeError</a></code>\n  exception.</p>"
        },
        {
          "html": "<p>Let <var>readableHighWaterMark</var> be ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#validate-and-normalize-high-water-mark\" id=\"ref-for-validate-and-normalize-high-water-mark③\">ExtractHighWaterMark</a>(<var>readableStrategy</var>, 0).</p>"
        },
        {
          "html": "<p>Let <var>readableSizeAlgorithm</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#make-size-algorithm-from-size-function\" id=\"ref-for-make-size-algorithm-from-size-function②\">ExtractSizeAlgorithm</a>(<var>readableStrategy</var>).</p>"
        },
        {
          "html": "<p>Let <var>writableHighWaterMark</var> be ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#validate-and-normalize-high-water-mark\" id=\"ref-for-validate-and-normalize-high-water-mark④\">ExtractHighWaterMark</a>(<var>writableStrategy</var>, 1).</p>"
        },
        {
          "html": "<p>Let <var>writableSizeAlgorithm</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#make-size-algorithm-from-size-function\" id=\"ref-for-make-size-algorithm-from-size-function③\">ExtractSizeAlgorithm</a>(<var>writableStrategy</var>).</p>"
        },
        {
          "html": "<p>Let <var>startPromise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise①④\">a new promise</a>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#initialize-transform-stream\" id=\"ref-for-initialize-transform-stream\">InitializeTransformStream</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①⓪②\">this</a>, <var>startPromise</var>, <var>writableHighWaterMark</var>,\n  <var>writableSizeAlgorithm</var>, <var>readableHighWaterMark</var>, <var>readableSizeAlgorithm</var>).</p>"
        },
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-transform-stream-default-controller-from-transformer\" id=\"ref-for-set-up-transform-stream-default-controller-from-transformer\">SetUpTransformStreamDefaultControllerFromTransformer</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①⓪③\">this</a>, <var>transformer</var>,\n  <var>transformerDict</var>).</p>"
        },
        {
          "html": "<p>If <var>transformerDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-transformer-start\" id=\"ref-for-dom-transformer-start③\">start</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists①⑨\">exists</a>, then <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve②⑦\">resolve</a> <var>startPromise</var>\n  with the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#invoke-a-callback-function\" id=\"ref-for-invoke-a-callback-function①③\">invoking</a> <var>transformerDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-transformer-start\" id=\"ref-for-dom-transformer-start④\">start</a></code>\"] with argument list\n  «&nbsp;<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①⓪④\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-controller\" id=\"ref-for-transformstream-controller\">[[controller]]</a>&nbsp;» and <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-callback-this-value\" id=\"ref-for-dfn-callback-this-value①⓪\">callback this value</a>\n  <var>transformer</var>.</p>"
        },
        {
          "html": "<p>Otherwise, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve②⑧\">resolve</a> <var>startPromise</var> with undefined.</p>"
        }
      ]
    },
    {
      "name": "TransformStream/readable",
      "href": "https://streams.spec.whatwg.org/#ts-readable",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"TransformStream\" data-dfn-type=\"attribute\" data-export=\"\" id=\"ts-readable\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>readable</code></dfn> getter steps\n are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①⓪⑤\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-readable\" id=\"ref-for-transformstream-readable②\">[[readable]]</a>.</p>"
        }
      ]
    },
    {
      "name": "TransformStream/writable",
      "href": "https://streams.spec.whatwg.org/#ts-writable",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"TransformStream\" data-dfn-type=\"attribute\" data-export=\"\" id=\"ts-writable\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>writable</code></dfn> getter steps\n are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①⓪⑥\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-writable\" id=\"ref-for-transformstream-writable①\">[[writable]]</a>.</p>"
        }
      ]
    },
    {
      "name": "TransformStream transfer steps",
      "html": "<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#transformstream\" id=\"ref-for-transformstream①①\">TransformStream</a></code> objects are <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#transferable-objects\" id=\"ref-for-transferable-objects③\">transferable objects</a>. Their <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#transfer-steps\" id=\"ref-for-transfer-steps②\">transfer steps</a>, given <var>value</var>\n and <var>dataHolder</var>, are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>readable</var> be <var>value</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-readable\" id=\"ref-for-transformstream-readable③\">[[readable]]</a>.</p>"
        },
        {
          "html": "<p>Let <var>writable</var> be <var>value</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-writable\" id=\"ref-for-transformstream-writable②\">[[writable]]</a>.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-readable-stream-locked\" id=\"ref-for-is-readable-stream-locked①①\">IsReadableStreamLocked</a>(<var>readable</var>) is true, throw a \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#datacloneerror\" id=\"ref-for-datacloneerror②\">DataCloneError</a></code>\"\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-DOMException\" id=\"ref-for-idl-DOMException②\">DOMException</a></code>.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-writable-stream-locked\" id=\"ref-for-is-writable-stream-locked⑨\">IsWritableStreamLocked</a>(<var>writable</var>) is true, throw a \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#datacloneerror\" id=\"ref-for-datacloneerror③\">DataCloneError</a></code>\"\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-DOMException\" id=\"ref-for-idl-DOMException③\">DOMException</a></code>.</p>"
        },
        {
          "html": "<p>Set <var>dataHolder</var>.[[readable]] to ! <a data-link-type=\"abstract-op\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializewithtransfer\" id=\"ref-for-structuredserializewithtransfer②\">StructuredSerializeWithTransfer</a>(<var>readable</var>,\n  « <var>readable</var> »).</p>"
        },
        {
          "html": "<p>Set <var>dataHolder</var>.[[writable]] to ! <a data-link-type=\"abstract-op\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializewithtransfer\" id=\"ref-for-structuredserializewithtransfer③\">StructuredSerializeWithTransfer</a>(<var>writable</var>,\n  « <var>writable</var> »).</p>"
        }
      ]
    },
    {
      "name": "TransformStream transfer-receiving steps",
      "html": "Their <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#transfer-receiving-steps\" id=\"ref-for-transfer-receiving-steps②\">transfer-receiving steps</a>, given <var>dataHolder</var> and <var>value</var>, are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>readableRecord</var> be ! <a data-link-type=\"abstract-op\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#structureddeserializewithtransfer\" id=\"ref-for-structureddeserializewithtransfer②\">StructuredDeserializeWithTransfer</a>(<var>dataHolder</var>.[[readable]],\n  <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#current-realm\" id=\"ref-for-current-realm⑧\">the current Realm</a>).</p>"
        },
        {
          "html": "<p>Let <var>writableRecord</var> be ! <a data-link-type=\"abstract-op\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#structureddeserializewithtransfer\" id=\"ref-for-structureddeserializewithtransfer③\">StructuredDeserializeWithTransfer</a>(<var>dataHolder</var>.[[writable]],\n  <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#current-realm\" id=\"ref-for-current-realm⑨\">the current Realm</a>).</p>"
        },
        {
          "html": "<p>Set <var>value</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-readable\" id=\"ref-for-transformstream-readable④\">[[readable]]</a> to <var>readableRecord</var>.[[Deserialized]].</p>"
        },
        {
          "html": "<p>Set <var>value</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-writable\" id=\"ref-for-transformstream-writable③\">[[writable]]</a> to <var>writableRecord</var>.[[Deserialized]].</p>"
        },
        {
          "html": "<p>Set <var>value</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-backpressure\" id=\"ref-for-transformstream-backpressure①\">[[backpressure]]</a>,\n  <var>value</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-backpressurechangepromise\" id=\"ref-for-transformstream-backpressurechangepromise\">[[backpressureChangePromise]]</a>, and\n  <var>value</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-controller\" id=\"ref-for-transformstream-controller①\">[[controller]]</a> to undefined.</p>"
        }
      ]
    },
    {
      "name": "TransformStreamDefaultController/desiredSize",
      "href": "https://streams.spec.whatwg.org/#ts-default-controller-desired-size",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"TransformStreamDefaultController\" data-dfn-type=\"attribute\" data-export=\"\" id=\"ts-default-controller-desired-size\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>desiredSize</code></dfn> getter steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>readableController</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①⓪⑦\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-stream\" id=\"ref-for-transformstreamdefaultcontroller-stream\">[[stream]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-readable\" id=\"ref-for-transformstream-readable⑤\">[[readable]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller④⑥\">[[controller]]</a>.</p>"
        },
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-get-desired-size\" id=\"ref-for-readable-stream-default-controller-get-desired-size②\">ReadableStreamDefaultControllerGetDesiredSize</a>(<var>readableController</var>).</p>"
        }
      ]
    },
    {
      "name": "TransformStreamDefaultController/enqueue(chunk)",
      "href": "https://streams.spec.whatwg.org/#ts-default-controller-enqueue",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"TransformStreamDefaultController\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"enqueue(chunk)|enqueue()\" id=\"ts-default-controller-enqueue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>enqueue(<var>chunk</var>)</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-controller-enqueue\" id=\"ref-for-transform-stream-default-controller-enqueue\">TransformStreamDefaultControllerEnqueue</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①⓪⑧\">this</a>, <var>chunk</var>).</p>"
        }
      ]
    },
    {
      "name": "TransformStreamDefaultController/error(e)",
      "href": "https://streams.spec.whatwg.org/#ts-default-controller-error",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"TransformStreamDefaultController\" data-dfn-type=\"method\" data-export=\"\" data-lt=\"error(reason)|error()|error(e)\" id=\"ts-default-controller-error\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>error(<var>e</var>)</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-controller-error\" id=\"ref-for-transform-stream-default-controller-error\">TransformStreamDefaultControllerError</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①⓪⑨\">this</a>, <var>e</var>).</p>"
        }
      ]
    },
    {
      "name": "TransformStreamDefaultController/terminate()",
      "href": "https://streams.spec.whatwg.org/#ts-default-controller-terminate",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"TransformStreamDefaultController\" data-dfn-type=\"method\" data-export=\"\" id=\"ts-default-controller-terminate\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>terminate()</code></dfn> method steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-controller-terminate\" id=\"ref-for-transform-stream-default-controller-terminate\">TransformStreamDefaultControllerTerminate</a>(<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①①⓪\">this</a>).</p>"
        }
      ]
    },
    {
      "name": "InitializeTransformStream",
      "href": "https://streams.spec.whatwg.org/#initialize-transform-stream",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"InitializeTransformStream\" id=\"initialize-transform-stream\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">InitializeTransformStream(<var>stream</var>, <var>startPromise</var>,\n <var>writableHighWaterMark</var>, <var>writableSizeAlgorithm</var>, <var>readableHighWaterMark</var>,\n <var>readableSizeAlgorithm</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>startAlgorithm</var> be an algorithm that returns <var>startPromise</var>.</p>"
        },
        {
          "html": "Let <var>writeAlgorithm</var> be the following steps, taking a <var>chunk</var> argument:",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-sink-write-algorithm\" id=\"ref-for-transform-stream-default-sink-write-algorithm\">TransformStreamDefaultSinkWriteAlgorithm</a>(<var>stream</var>, <var>chunk</var>).</p>"
            }
          ]
        },
        {
          "html": "Let <var>abortAlgorithm</var> be the following steps, taking a <var>reason</var> argument:",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-sink-abort-algorithm\" id=\"ref-for-transform-stream-default-sink-abort-algorithm\">TransformStreamDefaultSinkAbortAlgorithm</a>(<var>stream</var>, <var>reason</var>).</p>"
            }
          ]
        },
        {
          "html": "Let <var>closeAlgorithm</var> be the following steps:",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-sink-close-algorithm\" id=\"ref-for-transform-stream-default-sink-close-algorithm\">TransformStreamDefaultSinkCloseAlgorithm</a>(<var>stream</var>).</p>"
            }
          ]
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-writable\" id=\"ref-for-transformstream-writable④\">[[writable]]</a> to ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#create-writable-stream\" id=\"ref-for-create-writable-stream\">CreateWritableStream</a>(<var>startAlgorithm</var>,\n  <var>writeAlgorithm</var>, <var>closeAlgorithm</var>, <var>abortAlgorithm</var>, <var>writableHighWaterMark</var>,\n  <var>writableSizeAlgorithm</var>).</p>"
        },
        {
          "html": "Let <var>pullAlgorithm</var> be the following steps:",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-source-pull\" id=\"ref-for-transform-stream-default-source-pull\">TransformStreamDefaultSourcePullAlgorithm</a>(<var>stream</var>).</p>"
            }
          ]
        },
        {
          "html": "Let <var>cancelAlgorithm</var> be the following steps, taking a <var>reason</var> argument:",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-source-cancel\" id=\"ref-for-transform-stream-default-source-cancel\">TransformStreamDefaultSourceCancelAlgorithm</a>(<var>stream</var>, <var>reason</var>).</p>"
            }
          ]
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-readable\" id=\"ref-for-transformstream-readable⑥\">[[readable]]</a> to ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#create-readable-stream\" id=\"ref-for-create-readable-stream③\">CreateReadableStream</a>(<var>startAlgorithm</var>,\n  <var>pullAlgorithm</var>, <var>cancelAlgorithm</var>, <var>readableHighWaterMark</var>, <var>readableSizeAlgorithm</var>).</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-backpressure\" id=\"ref-for-transformstream-backpressure③\">[[backpressure]]</a> and\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-backpressurechangepromise\" id=\"ref-for-transformstream-backpressurechangepromise②\">[[backpressureChangePromise]]</a> to undefined.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-set-backpressure\" id=\"ref-for-transform-stream-set-backpressure①\">TransformStreamSetBackpressure</a>(<var>stream</var>, true).</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-controller\" id=\"ref-for-transformstream-controller③\">[[controller]]</a> to undefined.</p>"
        }
      ]
    },
    {
      "name": "TransformStreamError",
      "href": "https://streams.spec.whatwg.org/#transform-stream-error",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"TransformStreamError\" id=\"transform-stream-error\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">TransformStreamError(<var>stream</var>, <var>e</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-error\" id=\"ref-for-readable-stream-default-controller-error⑨\">ReadableStreamDefaultControllerError</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-readable\" id=\"ref-for-transformstream-readable⑦\">[[readable]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller④⑦\">[[controller]]</a>, <var>e</var>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-error-writable-and-unblock-write\" id=\"ref-for-transform-stream-error-writable-and-unblock-write\">TransformStreamErrorWritableAndUnblockWrite</a>(<var>stream</var>, <var>e</var>).</p>"
        }
      ]
    },
    {
      "name": "TransformStreamErrorWritableAndUnblockWrite",
      "href": "https://streams.spec.whatwg.org/#transform-stream-error-writable-and-unblock-write",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"TransformStreamErrorWritableAndUnblockWrite\" id=\"transform-stream-error-writable-and-unblock-write\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">TransformStreamErrorWritableAndUnblockWrite(<var>stream</var>,\n <var>e</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-controller-clear-algorithms\" id=\"ref-for-transform-stream-default-controller-clear-algorithms\">TransformStreamDefaultControllerClearAlgorithms</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-controller\" id=\"ref-for-transformstream-controller④\">[[controller]]</a>).</p>"
        },
        {
          "html": "<p>Perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-error-if-needed\" id=\"ref-for-writable-stream-default-controller-error-if-needed②\">WritableStreamDefaultControllerErrorIfNeeded</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-writable\" id=\"ref-for-transformstream-writable⑤\">[[writable]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-controller\" id=\"ref-for-writablestream-controller①⓪\">[[controller]]</a>, <var>e</var>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-unblock-write\" id=\"ref-for-transform-stream-unblock-write\">TransformStreamUnblockWrite</a>(<var>stream</var>).</p>"
        }
      ]
    },
    {
      "name": "TransformStreamSetBackpressure",
      "href": "https://streams.spec.whatwg.org/#transform-stream-set-backpressure",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"TransformStreamSetBackpressure\" id=\"transform-stream-set-backpressure\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">TransformStreamSetBackpressure(<var>stream</var>,\n <var>backpressure</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-backpressure\" id=\"ref-for-transformstream-backpressure⑥\">[[backpressure]]</a> is not <var>backpressure</var>.</p>"
        },
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-backpressurechangepromise\" id=\"ref-for-transformstream-backpressurechangepromise③\">[[backpressureChangePromise]]</a> is not undefined, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve②⑨\">resolve</a>\n  stream.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-backpressurechangepromise\" id=\"ref-for-transformstream-backpressurechangepromise④\">[[backpressureChangePromise]]</a> with undefined.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-backpressurechangepromise\" id=\"ref-for-transformstream-backpressurechangepromise⑤\">[[backpressureChangePromise]]</a> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise①⑤\">a new promise</a>.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-backpressure\" id=\"ref-for-transformstream-backpressure⑦\">[[backpressure]]</a> to <var>backpressure</var>.</p>"
        }
      ]
    },
    {
      "name": "TransformStreamUnblockWrite",
      "href": "https://streams.spec.whatwg.org/#transform-stream-unblock-write",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"TransformStreamUnblockWrite\" id=\"transform-stream-unblock-write\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">TransformStreamUnblockWrite(<var>stream</var>)</dfn> performs the\n following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-backpressure\" id=\"ref-for-transformstream-backpressure⑧\">[[backpressure]]</a> is true, perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-set-backpressure\" id=\"ref-for-transform-stream-set-backpressure②\">TransformStreamSetBackpressure</a>(<var>stream</var>,\n  false).</p>"
        }
      ]
    },
    {
      "name": "SetUpTransformStreamDefaultController",
      "href": "https://streams.spec.whatwg.org/#set-up-transform-stream-default-controller",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"SetUpTransformStreamDefaultController\" id=\"set-up-transform-stream-default-controller\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">SetUpTransformStreamDefaultController(<var>stream</var>,\n <var>controller</var>, <var>transformAlgorithm</var>, <var>flushAlgorithm</var>, <var>cancelAlgorithm</var>)</dfn> performs the\n following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements②③\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#transformstream\" id=\"ref-for-transformstream①⑥\">TransformStream</a></code>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-controller\" id=\"ref-for-transformstream-controller⑤\">[[controller]]</a> is undefined.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-stream\" id=\"ref-for-transformstreamdefaultcontroller-stream①\">[[stream]]</a> to <var>stream</var>.</p>"
        },
        {
          "html": "<p>Set <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-controller\" id=\"ref-for-transformstream-controller⑥\">[[controller]]</a> to <var>controller</var>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-transformalgorithm\" id=\"ref-for-transformstreamdefaultcontroller-transformalgorithm\">[[transformAlgorithm]]</a> to\n  <var>transformAlgorithm</var>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-flushalgorithm\" id=\"ref-for-transformstreamdefaultcontroller-flushalgorithm①\">[[flushAlgorithm]]</a> to <var>flushAlgorithm</var>.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-cancelalgorithm\" id=\"ref-for-transformstreamdefaultcontroller-cancelalgorithm①\">[[cancelAlgorithm]]</a> to <var>cancelAlgorithm</var>.</p>"
        }
      ]
    },
    {
      "name": "SetUpTransformStreamDefaultControllerFromTransformer",
      "href": "https://streams.spec.whatwg.org/#set-up-transform-stream-default-controller-from-transformer",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"SetUpTransformStreamDefaultControllerFromTransformer\" id=\"set-up-transform-stream-default-controller-from-transformer\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">SetUpTransformStreamDefaultControllerFromTransformer(<var>stream</var>,\n <var>transformer</var>, <var>transformerDict</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>controller</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new①⑨\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller\" id=\"ref-for-transformstreamdefaultcontroller①①\">TransformStreamDefaultController</a></code>.</p>"
        },
        {
          "html": "Let <var>transformAlgorithm</var> be the following steps, taking a <var>chunk</var> argument:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>result</var> be <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-controller-enqueue\" id=\"ref-for-transform-stream-default-controller-enqueue①\">TransformStreamDefaultControllerEnqueue</a>(<var>controller</var>, <var>chunk</var>).</p>"
            },
            {
              "html": "<p>If <var>result</var> is an abrupt completion, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with③⑥\">a promise rejected with</a> <var>result</var>.[[Value]].</p>"
            },
            {
              "html": "<p>Otherwise, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with③⓪\">a promise resolved with</a> undefined.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>flushAlgorithm</var> be an algorithm which returns <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with③①\">a promise resolved with</a> undefined.</p>"
        },
        {
          "html": "<p>Let <var>cancelAlgorithm</var> be an algorithm which returns <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with③②\">a promise resolved with</a> undefined.</p>"
        },
        {
          "html": "<p>If <var>transformerDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-transformer-transform\" id=\"ref-for-dom-transformer-transform⑤\">transform</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists②⓪\">exists</a>, set <var>transformAlgorithm</var> to an\n  algorithm which takes an argument <var>chunk</var> and returns the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#invoke-a-callback-function\" id=\"ref-for-invoke-a-callback-function①⑤\">invoking</a>\n  <var>transformerDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-transformer-transform\" id=\"ref-for-dom-transformer-transform⑥\">transform</a></code>\"] with argument list «&nbsp;<var>chunk</var>,\n  <var>controller</var>&nbsp;» and <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-callback-this-value\" id=\"ref-for-dfn-callback-this-value①①\">callback this value</a> <var>transformer</var>.</p>"
        },
        {
          "html": "<p>If <var>transformerDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-transformer-flush\" id=\"ref-for-dom-transformer-flush④\">flush</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists②①\">exists</a>, set <var>flushAlgorithm</var> to an\n  algorithm which returns the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#invoke-a-callback-function\" id=\"ref-for-invoke-a-callback-function①⑥\">invoking</a> <var>transformerDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-transformer-flush\" id=\"ref-for-dom-transformer-flush⑤\">flush</a></code>\"]\n  with argument list «&nbsp;<var>controller</var>&nbsp;» and <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-callback-this-value\" id=\"ref-for-dfn-callback-this-value①②\">callback this value</a> <var>transformer</var>.</p>"
        },
        {
          "html": "<p>If <var>transformerDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-transformer-cancel\" id=\"ref-for-dom-transformer-cancel②\">cancel</a></code>\"] <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists②②\">exists</a>, set <var>cancelAlgorithm</var> to an\n  algorithm which takes an argument <var>reason</var> and returns the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#invoke-a-callback-function\" id=\"ref-for-invoke-a-callback-function①⑦\">invoking</a>\n  <var>transformerDict</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-transformer-cancel\" id=\"ref-for-dom-transformer-cancel③\">cancel</a></code>\"] with argument list «&nbsp;<var>reason</var>&nbsp;» and\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-callback-this-value\" id=\"ref-for-dfn-callback-this-value①③\">callback this value</a> <var>transformer</var>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-transform-stream-default-controller\" id=\"ref-for-set-up-transform-stream-default-controller\">SetUpTransformStreamDefaultController</a>(<var>stream</var>, <var>controller</var>,\n  <var>transformAlgorithm</var>, <var>flushAlgorithm</var>, <var>cancelAlgorithm</var>).</p>"
        }
      ]
    },
    {
      "name": "TransformStreamDefaultControllerClearAlgorithms",
      "href": "https://streams.spec.whatwg.org/#transform-stream-default-controller-clear-algorithms",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"TransformStreamDefaultControllerClearAlgorithms\" id=\"transform-stream-default-controller-clear-algorithms\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">TransformStreamDefaultControllerClearAlgorithms(<var>controller</var>)</dfn>\n is called once the stream is closed or errored and the algorithms will not be executed any more.\n By removing the algorithm references it permits the <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformer\" id=\"ref-for-transformer⑨\">transformer</a> object to be garbage collected\n even if the <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#transformstream\" id=\"ref-for-transformstream①⑦\">TransformStream</a></code> itself is still referenced.\n\n \n    \n    <p>It performs the following steps:</p>",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-transformalgorithm\" id=\"ref-for-transformstreamdefaultcontroller-transformalgorithm①\">[[transformAlgorithm]]</a> to undefined.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-flushalgorithm\" id=\"ref-for-transformstreamdefaultcontroller-flushalgorithm②\">[[flushAlgorithm]]</a> to undefined.</p>"
        },
        {
          "html": "<p>Set <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-cancelalgorithm\" id=\"ref-for-transformstreamdefaultcontroller-cancelalgorithm②\">[[cancelAlgorithm]]</a> to undefined.</p>"
        }
      ]
    },
    {
      "name": "TransformStreamDefaultControllerEnqueue",
      "href": "https://streams.spec.whatwg.org/#transform-stream-default-controller-enqueue",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"TransformStreamDefaultControllerEnqueue\" id=\"transform-stream-default-controller-enqueue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">TransformStreamDefaultControllerEnqueue(<var>controller</var>,\n <var>chunk</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-stream\" id=\"ref-for-transformstreamdefaultcontroller-stream②\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p>Let <var>readableController</var> be\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-readable\" id=\"ref-for-transformstream-readable⑧\">[[readable]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller④⑧\">[[controller]]</a>.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-can-close-or-enqueue\" id=\"ref-for-readable-stream-default-controller-can-close-or-enqueue⑤\">ReadableStreamDefaultControllerCanCloseOrEnqueue</a>(<var>readableController</var>) is false, throw\n  a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑥③\">TypeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Let <var>enqueueResult</var> be <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-enqueue\" id=\"ref-for-readable-stream-default-controller-enqueue④\">ReadableStreamDefaultControllerEnqueue</a>(<var>readableController</var>,\n  <var>chunk</var>).</p>"
        },
        {
          "html": "If <var>enqueueResult</var> is an abrupt completion,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-error-writable-and-unblock-write\" id=\"ref-for-transform-stream-error-writable-and-unblock-write①\">TransformStreamErrorWritableAndUnblockWrite</a>(<var>stream</var>,\n  <var>enqueueResult</var>.[[Value]]).</p>"
            },
            {
              "html": "<p>Throw <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-readable\" id=\"ref-for-transformstream-readable⑨\">[[readable]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-storederror\" id=\"ref-for-readablestream-storederror⑨\">[[storedError]]</a>.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>backpressure</var> be !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#rs-default-controller-has-backpressure\" id=\"ref-for-rs-default-controller-has-backpressure\">ReadableStreamDefaultControllerHasBackpressure</a>(<var>readableController</var>).</p>"
        },
        {
          "html": "If <var>backpressure</var> is not <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-backpressure\" id=\"ref-for-transformstream-backpressure⑨\">[[backpressure]]</a>,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>backpressure</var> is true.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-set-backpressure\" id=\"ref-for-transform-stream-set-backpressure④\">TransformStreamSetBackpressure</a>(<var>stream</var>, true).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "TransformStreamDefaultControllerError",
      "href": "https://streams.spec.whatwg.org/#transform-stream-default-controller-error",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"TransformStreamDefaultControllerError\" id=\"transform-stream-default-controller-error\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">TransformStreamDefaultControllerError(<var>controller</var>,\n <var>e</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-error\" id=\"ref-for-transform-stream-error\">TransformStreamError</a>(<var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-stream\" id=\"ref-for-transformstreamdefaultcontroller-stream③\">[[stream]]</a>,\n  <var>e</var>).</p>"
        }
      ]
    },
    {
      "name": "TransformStreamDefaultControllerPerformTransform",
      "href": "https://streams.spec.whatwg.org/#transform-stream-default-controller-perform-transform",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"TransformStreamDefaultControllerPerformTransform\" id=\"transform-stream-default-controller-perform-transform\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">TransformStreamDefaultControllerPerformTransform(<var>controller</var>,\n <var>chunk</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>transformPromise</var> be the result of performing\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-transformalgorithm\" id=\"ref-for-transformstreamdefaultcontroller-transformalgorithm②\">[[transformAlgorithm]]</a>, passing <var>chunk</var>.</p>"
        },
        {
          "html": "Return the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-perform-steps-once-promise-is-settled\" id=\"ref-for-dfn-perform-steps-once-promise-is-settled③\">reacting</a> to <var>transformPromise</var> with the following\n  rejection steps given the argument <var>r</var>:",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-error\" id=\"ref-for-transform-stream-error①\">TransformStreamError</a>(<var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-stream\" id=\"ref-for-transformstreamdefaultcontroller-stream④\">[[stream]]</a>, <var>r</var>).</p>"
            },
            {
              "html": "<p>Throw <var>r</var>.</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "TransformStreamDefaultControllerTerminate",
      "href": "https://streams.spec.whatwg.org/#transform-stream-default-controller-terminate",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"TransformStreamDefaultControllerTerminate\" id=\"transform-stream-default-controller-terminate\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">TransformStreamDefaultControllerTerminate(<var>controller</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>stream</var> be <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-stream\" id=\"ref-for-transformstreamdefaultcontroller-stream⑤\">[[stream]]</a>.</p>"
        },
        {
          "html": "<p>Let <var>readableController</var> be\n  <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-readable\" id=\"ref-for-transformstream-readable①⓪\">[[readable]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller④⑨\">[[controller]]</a>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-close\" id=\"ref-for-readable-stream-default-controller-close④\">ReadableStreamDefaultControllerClose</a>(<var>readableController</var>).</p>"
        },
        {
          "html": "<p>Let <var>error</var> be a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑥④\">TypeError</a></code> exception indicating that the stream has been terminated.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-error-writable-and-unblock-write\" id=\"ref-for-transform-stream-error-writable-and-unblock-write②\">TransformStreamErrorWritableAndUnblockWrite</a>(<var>stream</var>, <var>error</var>).</p>"
        }
      ]
    },
    {
      "name": "TransformStreamDefaultSinkWriteAlgorithm",
      "href": "https://streams.spec.whatwg.org/#transform-stream-default-sink-write-algorithm",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"TransformStreamDefaultSinkWriteAlgorithm\" id=\"transform-stream-default-sink-write-algorithm\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">TransformStreamDefaultSinkWriteAlgorithm(<var>stream</var>,\n <var>chunk</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-writable\" id=\"ref-for-transformstream-writable⑥\">[[writable]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state③⑥\">[[state]]</a> is \"<code>writable</code>\".</p>"
        },
        {
          "html": "<p>Let <var>controller</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-controller\" id=\"ref-for-transformstream-controller⑦\">[[controller]]</a>.</p>"
        },
        {
          "html": "If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-backpressure\" id=\"ref-for-transformstream-backpressure①⓪\">[[backpressure]]</a> is true,",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>backpressureChangePromise</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-backpressurechangepromise\" id=\"ref-for-transformstream-backpressurechangepromise⑦\">[[backpressureChangePromise]]</a>.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>backpressureChangePromise</var> is not undefined.</p>"
            },
            {
              "html": "Return the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-perform-steps-once-promise-is-settled\" id=\"ref-for-dfn-perform-steps-once-promise-is-settled④\">reacting</a> to <var>backpressureChangePromise</var> with the following fulfillment\n  steps:",
              "rationale": "let",
              "steps": [
                {
                  "html": "<p>Let <var>writable</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-writable\" id=\"ref-for-transformstream-writable⑦\">[[writable]]</a>.</p>"
                },
                {
                  "html": "<p>Let <var>state</var> be <var>writable</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state③⑦\">[[state]]</a>.</p>"
                },
                {
                  "html": "<p>If <var>state</var> is \"<code>erroring</code>\", throw <var>writable</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror①⑥\">[[storedError]]</a>.</p>"
                },
                {
                  "html": "<p class=\"assertion\">Assert: <var>state</var> is \"<code>writable</code>\".</p>"
                },
                {
                  "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-controller-perform-transform\" id=\"ref-for-transform-stream-default-controller-perform-transform\">TransformStreamDefaultControllerPerformTransform</a>(<var>controller</var>, <var>chunk</var>).</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-controller-perform-transform\" id=\"ref-for-transform-stream-default-controller-perform-transform①\">TransformStreamDefaultControllerPerformTransform</a>(<var>controller</var>, <var>chunk</var>).</p>"
        }
      ]
    },
    {
      "name": "TransformStreamDefaultSinkAbortAlgorithm",
      "href": "https://streams.spec.whatwg.org/#transform-stream-default-sink-abort-algorithm",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"TransformStreamDefaultSinkAbortAlgorithm\" id=\"transform-stream-default-sink-abort-algorithm\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">TransformStreamDefaultSinkAbortAlgorithm(<var>stream</var>,\n <var>reason</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>controller</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-controller\" id=\"ref-for-transformstream-controller⑧\">[[controller]]</a>.</p>"
        },
        {
          "html": "<p>If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise\">[[finishPromise]]</a> is not undefined, return\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise①\">[[finishPromise]]</a>.</p>"
        },
        {
          "html": "<p>Let <var>readable</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-readable\" id=\"ref-for-transformstream-readable①①\">[[readable]]</a>.</p>"
        },
        {
          "html": "<p>Let <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise②\">[[finishPromise]]</a> be a new promise.</p>"
        },
        {
          "html": "<p>Let <var>cancelPromise</var> be the result of performing\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-cancelalgorithm\" id=\"ref-for-transformstreamdefaultcontroller-cancelalgorithm③\">[[cancelAlgorithm]]</a>, passing <var>reason</var>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-controller-clear-algorithms\" id=\"ref-for-transform-stream-default-controller-clear-algorithms①\">TransformStreamDefaultControllerClearAlgorithms</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-perform-steps-once-promise-is-settled\" id=\"ref-for-dfn-perform-steps-once-promise-is-settled⑤\">React</a> to <var>cancelPromise</var>:",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>cancelPromise</var> was fulfilled, then:",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If <var>readable</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state③⑦\">[[state]]</a> is \"<code>errored</code>\", <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject①⑥\">reject</a>\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise③\">[[finishPromise]]</a> with\n  <var>readable</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-storederror\" id=\"ref-for-readablestream-storederror①⓪\">[[storedError]]</a>.</p>"
                },
                {
                  "html": "Otherwise:",
                  "rationale": "perform",
                  "steps": [
                    {
                      "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-error\" id=\"ref-for-readable-stream-default-controller-error①⓪\">ReadableStreamDefaultControllerError</a>(<var>readable</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑤⓪\">[[controller]]</a>, <var>reason</var>).</p>"
                    },
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve③⓪\">Resolve</a> <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise④\">[[finishPromise]]</a> with undefined.</p>"
                    }
                  ]
                }
              ]
            },
            {
              "html": "If <var>cancelPromise</var> was rejected with reason <var>r</var>, then:",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-error\" id=\"ref-for-readable-stream-default-controller-error①①\">ReadableStreamDefaultControllerError</a>(<var>readable</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑤①\">[[controller]]</a>, <var>r</var>).</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject①⑦\">Reject</a> <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise⑤\">[[finishPromise]]</a> with <var>r</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise⑥\">[[finishPromise]]</a>.</p>"
        }
      ]
    },
    {
      "name": "TransformStreamDefaultSinkCloseAlgorithm",
      "href": "https://streams.spec.whatwg.org/#transform-stream-default-sink-close-algorithm",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"TransformStreamDefaultSinkCloseAlgorithm\" id=\"transform-stream-default-sink-close-algorithm\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">TransformStreamDefaultSinkCloseAlgorithm(<var>stream</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>controller</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-controller\" id=\"ref-for-transformstream-controller⑨\">[[controller]]</a>.</p>"
        },
        {
          "html": "<p>If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise⑦\">[[finishPromise]]</a> is not undefined, return\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise⑧\">[[finishPromise]]</a>.</p>"
        },
        {
          "html": "<p>Let <var>readable</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-readable\" id=\"ref-for-transformstream-readable①②\">[[readable]]</a>.</p>"
        },
        {
          "html": "<p>Let <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise⑨\">[[finishPromise]]</a> be a new promise.</p>"
        },
        {
          "html": "<p>Let <var>flushPromise</var> be the result of performing\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-flushalgorithm\" id=\"ref-for-transformstreamdefaultcontroller-flushalgorithm③\">[[flushAlgorithm]]</a>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-controller-clear-algorithms\" id=\"ref-for-transform-stream-default-controller-clear-algorithms②\">TransformStreamDefaultControllerClearAlgorithms</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-perform-steps-once-promise-is-settled\" id=\"ref-for-dfn-perform-steps-once-promise-is-settled⑥\">React</a> to <var>flushPromise</var>:",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>flushPromise</var> was fulfilled, then:",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If <var>readable</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-state\" id=\"ref-for-readablestream-state③⑧\">[[state]]</a> is \"<code>errored</code>\", <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject①⑧\">reject</a>\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise①⓪\">[[finishPromise]]</a> with\n  <var>readable</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-storederror\" id=\"ref-for-readablestream-storederror①①\">[[storedError]]</a>.</p>"
                },
                {
                  "html": "Otherwise:",
                  "rationale": "perform",
                  "steps": [
                    {
                      "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-close\" id=\"ref-for-readable-stream-default-controller-close⑤\">ReadableStreamDefaultControllerClose</a>(<var>readable</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑤②\">[[controller]]</a>).</p>"
                    },
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve③①\">Resolve</a> <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise①①\">[[finishPromise]]</a> with undefined.</p>"
                    }
                  ]
                }
              ]
            },
            {
              "html": "If <var>flushPromise</var> was rejected with reason <var>r</var>, then:",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-error\" id=\"ref-for-readable-stream-default-controller-error①②\">ReadableStreamDefaultControllerError</a>(<var>readable</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑤③\">[[controller]]</a>, <var>r</var>).</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject①⑨\">Reject</a> <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise①②\">[[finishPromise]]</a> with <var>r</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise①③\">[[finishPromise]]</a>.</p>"
        }
      ]
    },
    {
      "name": "TransformStreamDefaultSourceCancelAlgorithm",
      "href": "https://streams.spec.whatwg.org/#transform-stream-default-source-cancel",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"TransformStreamDefaultSourceCancelAlgorithm\" id=\"transform-stream-default-source-cancel\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">TransformStreamDefaultSourceCancelAlgorithm(<var>stream</var>,\n <var>reason</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>controller</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-controller\" id=\"ref-for-transformstream-controller①⓪\">[[controller]]</a>.</p>"
        },
        {
          "html": "<p>If <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise①④\">[[finishPromise]]</a> is not undefined, return\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise①⑤\">[[finishPromise]]</a>.</p>"
        },
        {
          "html": "<p>Let <var>writable</var> be <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-writable\" id=\"ref-for-transformstream-writable⑧\">[[writable]]</a>.</p>"
        },
        {
          "html": "<p>Let <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise①⑥\">[[finishPromise]]</a> be a new promise.</p>"
        },
        {
          "html": "<p>Let <var>cancelPromise</var> be the result of performing\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-cancelalgorithm\" id=\"ref-for-transformstreamdefaultcontroller-cancelalgorithm④\">[[cancelAlgorithm]]</a>, passing <var>reason</var>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-controller-clear-algorithms\" id=\"ref-for-transform-stream-default-controller-clear-algorithms③\">TransformStreamDefaultControllerClearAlgorithms</a>(<var>controller</var>).</p>"
        },
        {
          "html": "<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-perform-steps-once-promise-is-settled\" id=\"ref-for-dfn-perform-steps-once-promise-is-settled⑦\">React</a> to <var>cancelPromise</var>:",
          "rationale": "if",
          "steps": [
            {
              "html": "If <var>cancelPromise</var> was fulfilled, then:",
              "rationale": "if",
              "steps": [
                {
                  "html": "<p>If <var>writable</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-state\" id=\"ref-for-writablestream-state③⑧\">[[state]]</a> is \"<code>errored</code>\", <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject②⓪\">reject</a>\n  <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise①⑦\">[[finishPromise]]</a> with\n  <var>writable</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-storederror\" id=\"ref-for-writablestream-storederror①⑦\">[[storedError]]</a>.</p>"
                },
                {
                  "html": "Otherwise:",
                  "rationale": "perform",
                  "steps": [
                    {
                      "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-error-if-needed\" id=\"ref-for-writable-stream-default-controller-error-if-needed③\">WritableStreamDefaultControllerErrorIfNeeded</a>(<var>writable</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-controller\" id=\"ref-for-writablestream-controller①①\">[[controller]]</a>, <var>reason</var>).</p>"
                    },
                    {
                      "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-unblock-write\" id=\"ref-for-transform-stream-unblock-write①\">TransformStreamUnblockWrite</a>(<var>stream</var>).</p>"
                    },
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve③②\">Resolve</a> <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise①⑧\">[[finishPromise]]</a> with undefined.</p>"
                    }
                  ]
                }
              ]
            },
            {
              "html": "If <var>cancelPromise</var> was rejected with reason <var>r</var>, then:",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-error-if-needed\" id=\"ref-for-writable-stream-default-controller-error-if-needed④\">WritableStreamDefaultControllerErrorIfNeeded</a>(<var>writable</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-controller\" id=\"ref-for-writablestream-controller①②\">[[controller]]</a>, <var>r</var>).</p>"
                },
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-unblock-write\" id=\"ref-for-transform-stream-unblock-write②\">TransformStreamUnblockWrite</a>(<var>stream</var>).</p>"
                },
                {
                  "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#reject\" id=\"ref-for-reject②①\">Reject</a> <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise①⑨\">[[finishPromise]]</a> with <var>r</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Return <var>controller</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller-finishpromise\" id=\"ref-for-transformstreamdefaultcontroller-finishpromise②⓪\">[[finishPromise]]</a>.</p>"
        }
      ]
    },
    {
      "name": "TransformStreamDefaultSourcePullAlgorithm",
      "href": "https://streams.spec.whatwg.org/#transform-stream-default-source-pull",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"TransformStreamDefaultSourcePullAlgorithm\" id=\"transform-stream-default-source-pull\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">TransformStreamDefaultSourcePullAlgorithm(<var>stream</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-backpressure\" id=\"ref-for-transformstream-backpressure①①\">[[backpressure]]</a> is true.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-backpressurechangepromise\" id=\"ref-for-transformstream-backpressurechangepromise⑧\">[[backpressureChangePromise]]</a> is not undefined.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-set-backpressure\" id=\"ref-for-transform-stream-set-backpressure⑤\">TransformStreamSetBackpressure</a>(<var>stream</var>, false).</p>"
        },
        {
          "html": "<p>Return <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-backpressurechangepromise\" id=\"ref-for-transformstream-backpressurechangepromise⑨\">[[backpressureChangePromise]]</a>.</p>"
        }
      ]
    },
    {
      "name": "byte length queuing strategy size function",
      "href": "https://streams.spec.whatwg.org/#byte-length-queuing-strategy-size-function",
      "html": "Additionally, every <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#global-object\" id=\"ref-for-global-object\">global object</a> <var>globalObject</var> has an associated <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-lt=\"byte length queuing strategy size function\" data-noexport=\"\" id=\"byte-length-queuing-strategy-size-function\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">byte length queuing\n strategy size function</dfn>, which is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#Function\" id=\"ref-for-Function①\">Function</a></code> whose value must be initialized as follows:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>steps</var> be the following steps, given <var>chunk</var>:",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return ? <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-getv\" id=\"ref-for-sec-getv\">GetV</a>(<var>chunk</var>, \"<code>byteLength</code>\").</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>F</var> be ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-createbuiltinfunction\" id=\"ref-for-sec-createbuiltinfunction\">CreateBuiltinFunction</a>(<var>steps</var>, 1, \"<code>size</code>\", « », <var>globalObject</var>’s <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#concept-relevant-realm\" id=\"ref-for-concept-relevant-realm\">relevant Realm</a>).</p>"
        },
        {
          "html": "<p>Set <var>globalObject</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#byte-length-queuing-strategy-size-function\" id=\"ref-for-byte-length-queuing-strategy-size-function\">byte length queuing strategy size function</a> to a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#Function\" id=\"ref-for-Function②\">Function</a></code> that\n  represents a reference to <var>F</var>, with <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-callback-context\" id=\"ref-for-dfn-callback-context\">callback context</a> equal to <var>globalObject</var>’s <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#relevant-settings-object\" id=\"ref-for-relevant-settings-object\">relevant settings object</a>.</p>"
        }
      ]
    },
    {
      "name": "ByteLengthQueuingStrategy/ByteLengthQueuingStrategy(init)",
      "href": "https://streams.spec.whatwg.org/#blqs-constructor",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ByteLengthQueuingStrategy\" data-dfn-type=\"constructor\" data-export=\"\" data-lt=\"ByteLengthQueuingStrategy(init)|constructor(init)\" id=\"blqs-constructor\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>new ByteLengthQueuingStrategy(<var>init</var>)</code></dfn> constructor steps\n are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Set <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①①①\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#bytelengthqueuingstrategy-highwatermark\" id=\"ref-for-bytelengthqueuingstrategy-highwatermark\">[[highWaterMark]]</a> to\n  <var>init</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-queuingstrategyinit-highwatermark\" id=\"ref-for-dom-queuingstrategyinit-highwatermark①\">highWaterMark</a></code>\"].</p>"
        }
      ]
    },
    {
      "name": "ByteLengthQueuingStrategy/highWaterMark",
      "href": "https://streams.spec.whatwg.org/#blqs-high-water-mark",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ByteLengthQueuingStrategy\" data-dfn-type=\"attribute\" data-export=\"\" id=\"blqs-high-water-mark\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>highWaterMark</code></dfn>\n getter steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①①②\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#bytelengthqueuingstrategy-highwatermark\" id=\"ref-for-bytelengthqueuingstrategy-highwatermark①\">[[highWaterMark]]</a>.</p>"
        }
      ]
    },
    {
      "name": "ByteLengthQueuingStrategy/size",
      "href": "https://streams.spec.whatwg.org/#blqs-size",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"ByteLengthQueuingStrategy\" data-dfn-type=\"attribute\" data-export=\"\" id=\"blqs-size\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>size</code></dfn> getter steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①①③\">this</a>’s <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#concept-relevant-global\" id=\"ref-for-concept-relevant-global\">relevant global object</a>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#byte-length-queuing-strategy-size-function\" id=\"ref-for-byte-length-queuing-strategy-size-function①\">byte length queuing strategy size function</a>.</p>"
        }
      ]
    },
    {
      "name": "count queuing strategy size function",
      "href": "https://streams.spec.whatwg.org/#count-queuing-strategy-size-function",
      "html": "Additionally, every <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#global-object\" id=\"ref-for-global-object①\">global object</a> <var>globalObject</var> has an associated <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-lt=\"count queuing strategy size function\" data-noexport=\"\" id=\"count-queuing-strategy-size-function\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">count queuing strategy\n size function</dfn>, which is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#Function\" id=\"ref-for-Function④\">Function</a></code> whose value must be initialized as follows:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "Let <var>steps</var> be the following steps:",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return 1.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>F</var> be ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-createbuiltinfunction\" id=\"ref-for-sec-createbuiltinfunction①\">CreateBuiltinFunction</a>(<var>steps</var>, 0, \"<code>size</code>\", « », <var>globalObject</var>’s <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#concept-relevant-realm\" id=\"ref-for-concept-relevant-realm①\">relevant Realm</a>).</p>"
        },
        {
          "html": "<p>Set <var>globalObject</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#count-queuing-strategy-size-function\" id=\"ref-for-count-queuing-strategy-size-function\">count queuing strategy size function</a> to a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#Function\" id=\"ref-for-Function⑤\">Function</a></code> that represents\n  a reference to <var>F</var>, with <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-callback-context\" id=\"ref-for-dfn-callback-context①\">callback context</a> equal to <var>globalObject</var>’s <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#relevant-settings-object\" id=\"ref-for-relevant-settings-object①\">relevant settings object</a>.</p>"
        }
      ]
    },
    {
      "name": "CountQueuingStrategy/CountQueuingStrategy(init)",
      "href": "https://streams.spec.whatwg.org/#cqs-constructor",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"CountQueuingStrategy\" data-dfn-type=\"constructor\" data-export=\"\" data-lt=\"CountQueuingStrategy(init)|constructor(init)\" id=\"cqs-constructor\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>new CountQueuingStrategy(<var>init</var>)</code></dfn> constructor steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Set <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①①④\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#countqueuingstrategy-highwatermark\" id=\"ref-for-countqueuingstrategy-highwatermark\">[[highWaterMark]]</a> to\n  <var>init</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-queuingstrategyinit-highwatermark\" id=\"ref-for-dom-queuingstrategyinit-highwatermark③\">highWaterMark</a></code>\"].</p>"
        }
      ]
    },
    {
      "name": "CountQueuingStrategy/highWaterMark",
      "href": "https://streams.spec.whatwg.org/#cqs-high-water-mark",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"CountQueuingStrategy\" data-dfn-type=\"attribute\" data-export=\"\" id=\"cqs-high-water-mark\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>highWaterMark</code></dfn>\n getter steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①①⑤\">this</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#countqueuingstrategy-highwatermark\" id=\"ref-for-countqueuingstrategy-highwatermark①\">[[highWaterMark]]</a>.</p>"
        }
      ]
    },
    {
      "name": "CountQueuingStrategy/size",
      "href": "https://streams.spec.whatwg.org/#cqs-size",
      "html": "The <dfn class=\"dfn-paneled idl-code has-dfn-panel\" data-dfn-for=\"CountQueuingStrategy\" data-dfn-type=\"attribute\" data-export=\"\" id=\"cqs-size\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><code>size</code></dfn> getter steps are:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#this\" id=\"ref-for-this①①⑥\">this</a>’s <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#concept-relevant-global\" id=\"ref-for-concept-relevant-global①\">relevant global object</a>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#count-queuing-strategy-size-function\" id=\"ref-for-count-queuing-strategy-size-function①\">count queuing strategy size function</a>.</p>"
        }
      ]
    },
    {
      "name": "ExtractHighWaterMark",
      "href": "https://streams.spec.whatwg.org/#validate-and-normalize-high-water-mark",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ExtractHighWaterMark\" id=\"validate-and-normalize-high-water-mark\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ExtractHighWaterMark(<var>strategy</var>, <var>defaultHWM</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>strategy</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-queuingstrategy-highwatermark\" id=\"ref-for-dom-queuingstrategy-highwatermark④\">highWaterMark</a></code>\"] does not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists②③\">exist</a>, return <var>defaultHWM</var>.</p>"
        },
        {
          "html": "<p>Let <var>highWaterMark</var> be <var>strategy</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-queuingstrategy-highwatermark\" id=\"ref-for-dom-queuingstrategy-highwatermark⑤\">highWaterMark</a></code>\"].</p>"
        },
        {
          "html": "<p>If <var>highWaterMark</var> is NaN or <var>highWaterMark</var> &lt; 0, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-rangeerror\" id=\"ref-for-exceptiondef-rangeerror①⓪\">RangeError</a></code> exception.</p>"
        },
        {
          "html": "<p>Return <var>highWaterMark</var>.</p>"
        }
      ]
    },
    {
      "name": "ExtractSizeAlgorithm",
      "href": "https://streams.spec.whatwg.org/#make-size-algorithm-from-size-function",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ExtractSizeAlgorithm\" id=\"make-size-algorithm-from-size-function\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ExtractSizeAlgorithm(<var>strategy</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>strategy</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-queuingstrategy-size\" id=\"ref-for-dom-queuingstrategy-size③\">size</a></code>\"] does not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#map-exists\" id=\"ref-for-map-exists②④\">exist</a>, return an algorithm that\n  returns 1.</p>"
        },
        {
          "html": "Return an algorithm that performs the following steps, taking a <var>chunk</var> argument:",
          "rationale": "return",
          "steps": [
            {
              "html": "<p>Return the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#invoke-a-callback-function\" id=\"ref-for-invoke-a-callback-function①⑧\">invoking</a> <var>strategy</var>[\"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#dom-queuingstrategy-size\" id=\"ref-for-dom-queuingstrategy-size④\">size</a></code>\"] with argument\n  list «&nbsp;<var>chunk</var>&nbsp;».</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "DequeueValue",
      "href": "https://streams.spec.whatwg.org/#dequeue-value",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"DequeueValue\" id=\"dequeue-value\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">DequeueValue(<var>container</var>)</dfn> performs the\n following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>container</var> has [[queue]] and [[queueTotalSize]] internal slots.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>container</var>.[[queue]] is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty②①\">empty</a>.</p>"
        },
        {
          "html": "<p>Let <var>valueWithSize</var> be <var>container</var>.[[queue]][0].</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-remove\" id=\"ref-for-list-remove⑦\">Remove</a> <var>valueWithSize</var> from <var>container</var>.[[queue]].</p>"
        },
        {
          "html": "<p>Set <var>container</var>.[[queueTotalSize]] to <var>container</var>.[[queueTotalSize]] − <var>valueWithSize</var>’s\n  <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#value-with-size-size\" id=\"ref-for-value-with-size-size\">size</a>.</p>"
        },
        {
          "html": "<p>If <var>container</var>.[[queueTotalSize]] &lt; 0, set <var>container</var>.[[queueTotalSize]] to 0. (This can\n  occur due to rounding errors.)</p>"
        },
        {
          "html": "<p>Return <var>valueWithSize</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#value-with-size-value\" id=\"ref-for-value-with-size-value\">value</a>.</p>"
        }
      ]
    },
    {
      "name": "EnqueueValueWithSize",
      "href": "https://streams.spec.whatwg.org/#enqueue-value-with-size",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"EnqueueValueWithSize\" id=\"enqueue-value-with-size\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">EnqueueValueWithSize(<var>container</var>, <var>value</var>, <var>size</var>)</dfn> performs the\n following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>container</var> has [[queue]] and [[queueTotalSize]] internal slots.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-non-negative-number\" id=\"ref-for-is-non-negative-number②\">IsNonNegativeNumber</a>(<var>size</var>) is false, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-rangeerror\" id=\"ref-for-exceptiondef-rangeerror①①\">RangeError</a></code> exception.</p>"
        },
        {
          "html": "<p>If <var>size</var> is +∞, throw a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#exceptiondef-rangeerror\" id=\"ref-for-exceptiondef-rangeerror①②\">RangeError</a></code> exception.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-append\" id=\"ref-for-list-append⑨\">Append</a> a new <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#value-with-size\" id=\"ref-for-value-with-size①\">value-with-size</a> with <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#value-with-size-value\" id=\"ref-for-value-with-size-value①\">value</a> <var>value</var> and\n  <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#value-with-size-size\" id=\"ref-for-value-with-size-size①\">size</a> <var>size</var> to <var>container</var>.[[queue]].</p>"
        },
        {
          "html": "<p>Set <var>container</var>.[[queueTotalSize]] to <var>container</var>.[[queueTotalSize]] + <var>size</var>.</p>"
        }
      ]
    },
    {
      "name": "PeekQueueValue",
      "href": "https://streams.spec.whatwg.org/#peek-queue-value",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"PeekQueueValue\" id=\"peek-queue-value\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">PeekQueueValue(<var>container</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>container</var> has [[queue]] and [[queueTotalSize]] internal slots.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>container</var>.[[queue]] is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty②②\">empty</a>.</p>"
        },
        {
          "html": "<p>Let <var>valueWithSize</var> be <var>container</var>.[[queue]][0].</p>"
        },
        {
          "html": "<p>Return <var>valueWithSize</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#value-with-size-value\" id=\"ref-for-value-with-size-value②\">value</a>.</p>"
        }
      ]
    },
    {
      "name": "ResetQueue",
      "href": "https://streams.spec.whatwg.org/#reset-queue",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"ResetQueue\" id=\"reset-queue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">ResetQueue(<var>container</var>)</dfn>\n performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>container</var> has [[queue]] and [[queueTotalSize]] internal slots.</p>"
        },
        {
          "html": "<p>Set <var>container</var>.[[queue]] to a new empty <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list\" id=\"ref-for-list②①\">list</a>.</p>"
        },
        {
          "html": "<p>Set <var>container</var>.[[queueTotalSize]] to 0.</p>"
        }
      ]
    },
    {
      "name": "CrossRealmTransformSendError",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-crossrealmtransformsenderror",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"CrossRealmTransformSendError\" id=\"abstract-opdef-crossrealmtransformsenderror\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">CrossRealmTransformSendError(<var>port</var>,\n <var>error</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-packandpostmessage\" id=\"ref-for-abstract-opdef-packandpostmessage\">PackAndPostMessage</a>(<var>port</var>, \"<code>error</code>\", <var>error</var>), discarding the result.</p>"
        }
      ]
    },
    {
      "name": "PackAndPostMessage",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-packandpostmessage",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"PackAndPostMessage\" id=\"abstract-opdef-packandpostmessage\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">PackAndPostMessage(<var>port</var>, <var>type</var>, <var>value</var>)</dfn> performs\n the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>message</var> be <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ordinaryobjectcreate\" id=\"ref-for-sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a>(null).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-createdataproperty\" id=\"ref-for-sec-createdataproperty\">CreateDataProperty</a>(<var>message</var>, \"<code>type</code>\", <var>type</var>).</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-createdataproperty\" id=\"ref-for-sec-createdataproperty①\">CreateDataProperty</a>(<var>message</var>, \"<code>value</code>\", <var>value</var>).</p>"
        },
        {
          "html": "<p>Let <var>targetPort</var> be the port with which <var>port</var> is entangled, if any; otherwise let it be null.</p>"
        },
        {
          "html": "<p>Let <var>options</var> be «[ \"<code>transfer</code>\" → « » ]».</p>"
        },
        {
          "html": "<p>Run the <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/web-messaging.html#message-port-post-message-steps\" id=\"ref-for-message-port-post-message-steps\">message port post message steps</a> providing <var>targetPort</var>, <var>message</var>, and <var>options</var>.</p>"
        }
      ]
    },
    {
      "name": "PackAndPostMessageHandlingError",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-packandpostmessagehandlingerror",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"PackAndPostMessageHandlingError\" id=\"abstract-opdef-packandpostmessagehandlingerror\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">PackAndPostMessageHandlingError(<var>port</var>,\n <var>type</var>, <var>value</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>result</var> be <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-packandpostmessage\" id=\"ref-for-abstract-opdef-packandpostmessage①\">PackAndPostMessage</a>(<var>port</var>, <var>type</var>, <var>value</var>).</p>"
        },
        {
          "html": "If <var>result</var> is an abrupt completion,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-crossrealmtransformsenderror\" id=\"ref-for-abstract-opdef-crossrealmtransformsenderror\">CrossRealmTransformSendError</a>(<var>port</var>, <var>result</var>.[[Value]]).</p>"
            }
          ]
        },
        {
          "html": "<p>Return <var>result</var> as a completion record.</p>"
        }
      ]
    },
    {
      "name": "SetUpCrossRealmTransformReadable",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-setupcrossrealmtransformreadable",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"SetUpCrossRealmTransformReadable\" id=\"abstract-opdef-setupcrossrealmtransformreadable\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">SetUpCrossRealmTransformReadable(<var>stream</var>,\n <var>port</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#initialize-readable-stream\" id=\"ref-for-initialize-readable-stream③\">InitializeReadableStream</a>(<var>stream</var>).</p>"
        },
        {
          "html": "<p>Let <var>controller</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new②⓪\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller\" id=\"ref-for-readablestreamdefaultcontroller①③\">ReadableStreamDefaultController</a></code>.</p>"
        },
        {
          "html": "Add a handler for <var>port</var>’s <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/indices.html#event-message\" id=\"ref-for-event-message\">message</a></code> event with the following steps:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>data</var> be the data of the message.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>data</var> <a data-link-type=\"dfn\" data-refhint-key=\"08a5d589\" href=\"https://tc39.es/ecma262/#sec-object-type\" id=\"ref-for-sec-object-type②\">is an Object</a>.</p>"
            },
            {
              "html": "<p>Let <var>type</var> be ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-get-o-p\" id=\"ref-for-sec-get-o-p\">Get</a>(<var>data</var>, \"<code>type</code>\").</p>"
            },
            {
              "html": "<p>Let <var>value</var> be ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-get-o-p\" id=\"ref-for-sec-get-o-p①\">Get</a>(<var>data</var>, \"<code>value</code>\").</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>type</var> <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type\" id=\"ref-for-sec-ecmascript-language-types-string-type\">is a String</a>.</p>"
            },
            {
              "html": "If <var>type</var> is \"<code>chunk</code>\",",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-enqueue\" id=\"ref-for-readable-stream-default-controller-enqueue⑤\">ReadableStreamDefaultControllerEnqueue</a>(<var>controller</var>, <var>value</var>).</p>"
                }
              ]
            },
            {
              "html": "Otherwise, if <var>type</var> is \"<code>close</code>\",",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-close\" id=\"ref-for-readable-stream-default-controller-close⑥\">ReadableStreamDefaultControllerClose</a>(<var>controller</var>).</p>"
                },
                {
                  "html": "<p>Disentangle <var>port</var>.</p>"
                }
              ]
            },
            {
              "html": "Otherwise, if <var>type</var> is \"<code>error</code>\",",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-error\" id=\"ref-for-readable-stream-default-controller-error①③\">ReadableStreamDefaultControllerError</a>(<var>controller</var>, <var>value</var>).</p>"
                },
                {
                  "html": "<p>Disentangle <var>port</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "Add a handler for <var>port</var>’s <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/indices.html#event-messageerror\" id=\"ref-for-event-messageerror\">messageerror</a></code> event with the following steps:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>error</var> be a new \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#datacloneerror\" id=\"ref-for-datacloneerror④\">DataCloneError</a></code>\" <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-DOMException\" id=\"ref-for-idl-DOMException④\">DOMException</a></code>.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-crossrealmtransformsenderror\" id=\"ref-for-abstract-opdef-crossrealmtransformsenderror①\">CrossRealmTransformSendError</a>(<var>port</var>, <var>error</var>).</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-error\" id=\"ref-for-readable-stream-default-controller-error①④\">ReadableStreamDefaultControllerError</a>(<var>controller</var>, <var>error</var>).</p>"
            },
            {
              "html": "<p>Disentangle <var>port</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Enable <var>port</var>’s <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/web-messaging.html#port-message-queue\" id=\"ref-for-port-message-queue\">port message queue</a>.</p>"
        },
        {
          "html": "<p>Let <var>startAlgorithm</var> be an algorithm that returns undefined.</p>"
        },
        {
          "html": "Let <var>pullAlgorithm</var> be the following steps:",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-packandpostmessage\" id=\"ref-for-abstract-opdef-packandpostmessage②\">PackAndPostMessage</a>(<var>port</var>, \"<code>pull</code>\", undefined).</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with③③\">a promise resolved with</a> undefined.</p>"
            }
          ]
        },
        {
          "html": "Let <var>cancelAlgorithm</var> be the following steps, taking a <var>reason</var> argument:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>result</var> be <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-packandpostmessagehandlingerror\" id=\"ref-for-abstract-opdef-packandpostmessagehandlingerror\">PackAndPostMessageHandlingError</a>(<var>port</var>, \"<code>error</code>\", <var>reason</var>).</p>"
            },
            {
              "html": "<p>Disentangle <var>port</var>.</p>"
            },
            {
              "html": "<p>If <var>result</var> is an abrupt completion, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with③⑦\">a promise rejected with</a> <var>result</var>.[[Value]].</p>"
            },
            {
              "html": "<p>Otherwise, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with③④\">a promise resolved with</a> undefined.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>sizeAlgorithm</var> be an algorithm that returns 1.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-readable-stream-default-controller\" id=\"ref-for-set-up-readable-stream-default-controller②\">SetUpReadableStreamDefaultController</a>(<var>stream</var>, <var>controller</var>, <var>startAlgorithm</var>,\n  <var>pullAlgorithm</var>, <var>cancelAlgorithm</var>, 0, <var>sizeAlgorithm</var>).</p>"
        }
      ]
    },
    {
      "name": "SetUpCrossRealmTransformWritable",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-setupcrossrealmtransformwritable",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"SetUpCrossRealmTransformWritable\" id=\"abstract-opdef-setupcrossrealmtransformwritable\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">SetUpCrossRealmTransformWritable(<var>stream</var>,\n <var>port</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#initialize-writable-stream\" id=\"ref-for-initialize-writable-stream②\">InitializeWritableStream</a>(<var>stream</var>).</p>"
        },
        {
          "html": "<p>Let <var>controller</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new②①\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller\" id=\"ref-for-writablestreamdefaultcontroller①⑤\">WritableStreamDefaultController</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>backpressurePromise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise①⑥\">a new promise</a>.</p>"
        },
        {
          "html": "Add a handler for <var>port</var>’s <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/indices.html#event-message\" id=\"ref-for-event-message①\">message</a></code> event with the following steps:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>data</var> be the data of the message.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>data</var> <a data-link-type=\"dfn\" data-refhint-key=\"08a5d589\" href=\"https://tc39.es/ecma262/#sec-object-type\" id=\"ref-for-sec-object-type③\">is an Object</a>.</p>"
            },
            {
              "html": "<p>Let <var>type</var> be ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-get-o-p\" id=\"ref-for-sec-get-o-p②\">Get</a>(<var>data</var>, \"<code>type</code>\").</p>"
            },
            {
              "html": "<p>Let <var>value</var> be ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-get-o-p\" id=\"ref-for-sec-get-o-p③\">Get</a>(<var>data</var>, \"<code>value</code>\").</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>type</var> <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type\" id=\"ref-for-sec-ecmascript-language-types-string-type①\">is a String</a>.</p>"
            },
            {
              "html": "If <var>type</var> is \"<code>pull</code>\",",
              "rationale": "if",
              "steps": [
                {
                  "html": "If <var>backpressurePromise</var> is not undefined,",
                  "rationale": "resolve",
                  "steps": [
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve③③\">Resolve</a> <var>backpressurePromise</var> with undefined.</p>"
                    },
                    {
                      "html": "<p>Set <var>backpressurePromise</var> to undefined.</p>"
                    }
                  ]
                }
              ]
            },
            {
              "html": "Otherwise, if <var>type</var> is \"<code>error</code>\",",
              "rationale": "perform",
              "steps": [
                {
                  "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-error-if-needed\" id=\"ref-for-writable-stream-default-controller-error-if-needed⑤\">WritableStreamDefaultControllerErrorIfNeeded</a>(<var>controller</var>, <var>value</var>).</p>"
                },
                {
                  "html": "If <var>backpressurePromise</var> is not undefined,",
                  "rationale": "resolve",
                  "steps": [
                    {
                      "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#resolve\" id=\"ref-for-resolve③④\">Resolve</a> <var>backpressurePromise</var> with undefined.</p>"
                    },
                    {
                      "html": "<p>Set <var>backpressurePromise</var> to undefined.</p>"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "html": "Add a handler for <var>port</var>’s <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://html.spec.whatwg.org/multipage/indices.html#event-messageerror\" id=\"ref-for-event-messageerror①\">messageerror</a></code> event with the following steps:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>error</var> be a new \"<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#datacloneerror\" id=\"ref-for-datacloneerror⑤\">DataCloneError</a></code>\" <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-DOMException\" id=\"ref-for-idl-DOMException⑤\">DOMException</a></code>.</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-crossrealmtransformsenderror\" id=\"ref-for-abstract-opdef-crossrealmtransformsenderror②\">CrossRealmTransformSendError</a>(<var>port</var>, <var>error</var>).</p>"
            },
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-error-if-needed\" id=\"ref-for-writable-stream-default-controller-error-if-needed⑥\">WritableStreamDefaultControllerErrorIfNeeded</a>(<var>controller</var>, <var>error</var>).</p>"
            },
            {
              "html": "<p>Disentangle <var>port</var>.</p>"
            }
          ]
        },
        {
          "html": "<p>Enable <var>port</var>’s <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/web-messaging.html#port-message-queue\" id=\"ref-for-port-message-queue①\">port message queue</a>.</p>"
        },
        {
          "html": "<p>Let <var>startAlgorithm</var> be an algorithm that returns undefined.</p>"
        },
        {
          "html": "Let <var>writeAlgorithm</var> be the following steps, taking a <var>chunk</var> argument:",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>backpressurePromise</var> is undefined, set <var>backpressurePromise</var> to\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with③⑤\">a promise resolved with</a> undefined.</p>"
            },
            {
              "html": "Return the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-perform-steps-once-promise-is-settled\" id=\"ref-for-dfn-perform-steps-once-promise-is-settled⑧\">reacting</a> to <var>backpressurePromise</var> with the following\n  fulfillment steps:",
              "rationale": "set",
              "steps": [
                {
                  "html": "<p>Set <var>backpressurePromise</var> to <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-new-promise\" id=\"ref-for-a-new-promise①⑦\">a new promise</a>.</p>"
                },
                {
                  "html": "<p>Let <var>result</var> be <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-packandpostmessagehandlingerror\" id=\"ref-for-abstract-opdef-packandpostmessagehandlingerror①\">PackAndPostMessageHandlingError</a>(<var>port</var>, \"<code>chunk</code>\", <var>chunk</var>).</p>"
                },
                {
                  "html": "If <var>result</var> is an abrupt completion,",
                  "rationale": "return",
                  "steps": [
                    {
                      "html": "<p>Disentangle <var>port</var>.</p>"
                    },
                    {
                      "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with③⑧\">a promise rejected with</a> <var>result</var>.[[Value]].</p>"
                    }
                  ]
                },
                {
                  "html": "<p>Otherwise, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with③⑥\">a promise resolved with</a> undefined.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "Let <var>closeAlgorithm</var> be the folowing steps:",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-packandpostmessage\" id=\"ref-for-abstract-opdef-packandpostmessage③\">PackAndPostMessage</a>(<var>port</var>, \"<code>close</code>\", undefined).</p>"
            },
            {
              "html": "<p>Disentangle <var>port</var>.</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with③⑦\">a promise resolved with</a> undefined.</p>"
            }
          ]
        },
        {
          "html": "Let <var>abortAlgorithm</var> be the following steps, taking a <var>reason</var> argument:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>result</var> be <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-packandpostmessagehandlingerror\" id=\"ref-for-abstract-opdef-packandpostmessagehandlingerror②\">PackAndPostMessageHandlingError</a>(<var>port</var>, \"<code>error</code>\", <var>reason</var>).</p>"
            },
            {
              "html": "<p>Disentangle <var>port</var>.</p>"
            },
            {
              "html": "<p>If <var>result</var> is an abrupt completion, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with③⑨\">a promise rejected with</a> <var>result</var>.[[Value]].</p>"
            },
            {
              "html": "<p>Otherwise, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with③⑧\">a promise resolved with</a> undefined.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>sizeAlgorithm</var> be an algorithm that returns 1.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-writable-stream-default-controller\" id=\"ref-for-set-up-writable-stream-default-controller②\">SetUpWritableStreamDefaultController</a>(<var>stream</var>, <var>controller</var>, <var>startAlgorithm</var>,\n  <var>writeAlgorithm</var>, <var>closeAlgorithm</var>, <var>abortAlgorithm</var>, 1, <var>sizeAlgorithm</var>).</p>"
        }
      ]
    },
    {
      "name": "CanTransferArrayBuffer",
      "href": "https://streams.spec.whatwg.org/#can-transfer-array-buffer",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"CanTransferArrayBuffer\" id=\"can-transfer-array-buffer\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">CanTransferArrayBuffer(<var>O</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>O</var> <a data-link-type=\"dfn\" data-refhint-key=\"08a5d589\" href=\"https://tc39.es/ecma262/#sec-object-type\" id=\"ref-for-sec-object-type④\">is an Object</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>O</var> has an [[ArrayBufferData]] internal slot.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-isdetachedbuffer\" id=\"ref-for-sec-isdetachedbuffer⑦\">IsDetachedBuffer</a>(<var>O</var>) is true, return false.</p>"
        },
        {
          "html": "<p>If <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-samevalue\" id=\"ref-for-sec-samevalue\">SameValue</a>(<var>O</var>.[[ArrayBufferDetachKey]], undefined) is false, return false.</p>"
        },
        {
          "html": "<p>Return true.</p>"
        }
      ]
    },
    {
      "name": "IsNonNegativeNumber",
      "href": "https://streams.spec.whatwg.org/#is-non-negative-number",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"IsNonNegativeNumber\" id=\"is-non-negative-number\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">IsNonNegativeNumber(<var>v</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>v</var> <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#sec-ecmascript-language-types-number-type\" id=\"ref-for-sec-ecmascript-language-types-number-type①\">is not a Number</a>, return false.</p>"
        },
        {
          "html": "<p>If <var>v</var> is NaN, return false.</p>"
        },
        {
          "html": "<p>If <var>v</var> &lt; 0, return false.</p>"
        },
        {
          "html": "<p>Return true.</p>"
        }
      ]
    },
    {
      "name": "TransferArrayBuffer",
      "href": "https://streams.spec.whatwg.org/#transfer-array-buffer",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"TransferArrayBuffer\" id=\"transfer-array-buffer\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">TransferArrayBuffer(<var>O</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-isdetachedbuffer\" id=\"ref-for-sec-isdetachedbuffer⑧\">IsDetachedBuffer</a>(<var>O</var>) is false.</p>"
        },
        {
          "html": "<p>Let <var>arrayBufferData</var> be <var>O</var>.[[ArrayBufferData]].</p>"
        },
        {
          "html": "<p>Let <var>arrayBufferByteLength</var> be <var>O</var>.[[ArrayBufferByteLength]].</p>"
        },
        {
          "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-detacharraybuffer\" id=\"ref-for-sec-detacharraybuffer\">DetachArrayBuffer</a>(<var>O</var>).</p>"
        },
        {
          "html": "<p>Return a new <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-arraybuffer-objects\" id=\"ref-for-sec-arraybuffer-objects⑤\">ArrayBuffer</a></code> object, created in <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#current-realm\" id=\"ref-for-current-realm①⓪\">the current Realm</a>, whose\n  [[ArrayBufferData]] internal slot value is <var>arrayBufferData</var> and whose\n  [[ArrayBufferByteLength]] internal slot value is <var>arrayBufferByteLength</var>.</p>"
        }
      ]
    },
    {
      "name": "CloneAsUint8Array",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-cloneasuint8array",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"CloneAsUint8Array\" id=\"abstract-opdef-cloneasuint8array\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">CloneAsUint8Array(<var>O</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>O</var> <a data-link-type=\"dfn\" data-refhint-key=\"08a5d589\" href=\"https://tc39.es/ecma262/#sec-object-type\" id=\"ref-for-sec-object-type⑤\">is an Object</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>O</var> has an [[ViewedArrayBuffer]] internal slot.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-isdetachedbuffer\" id=\"ref-for-sec-isdetachedbuffer⑨\">IsDetachedBuffer</a>(<var>O</var>.[[ViewedArrayBuffer]]) is false.</p>"
        },
        {
          "html": "<p>Let <var>buffer</var> be ? <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-clonearraybuffer\" id=\"ref-for-sec-clonearraybuffer①\">CloneArrayBuffer</a>(<var>O</var>.[[ViewedArrayBuffer]], <var>O</var>.[[ByteOffset]],\n  <var>O</var>.[[ByteLength]], <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-arraybuffer-constructor\" id=\"ref-for-sec-arraybuffer-constructor②\">%ArrayBuffer%</a></code>).</p>"
        },
        {
          "html": "<p>Let <var>array</var> be ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/abstract-operations.html#sec-construct\" id=\"ref-for-sec-construct⑥\">Construct</a>(<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/multipage/indexed-collections.html#sec-typedarray-objects\" id=\"ref-for-sec-typedarray-objects⑦\">%Uint8Array%</a></code>, « <var>buffer</var> »).</p>"
        },
        {
          "html": "<p>Return <var>array</var>.</p>"
        }
      ]
    },
    {
      "name": "StructuredClone",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-structuredclone",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"StructuredClone\" id=\"abstract-opdef-structuredclone\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">StructuredClone(<var>v</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>serialized</var> be ? <a data-link-type=\"abstract-op\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#structuredserialize\" id=\"ref-for-structuredserialize\">StructuredSerialize</a>(<var>v</var>).</p>"
        },
        {
          "html": "<p>Return ? <a data-link-type=\"abstract-op\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#structureddeserialize\" id=\"ref-for-structureddeserialize\">StructuredDeserialize</a>(<var>serialized</var>, <a data-link-type=\"dfn\" href=\"https://tc39.es/ecma262/#current-realm\" id=\"ref-for-current-realm①①\">the current Realm</a>).</p>"
        }
      ]
    },
    {
      "name": "CanCopyDataBlockBytes",
      "href": "https://streams.spec.whatwg.org/#abstract-opdef-cancopydatablockbytes",
      "html": "<dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"abstract-op\" data-export=\"\" data-lt=\"CanCopyDataBlockBytes\" id=\"abstract-opdef-cancopydatablockbytes\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">CanCopyDataBlockBytes(<var>toBuffer</var>, <var>toIndex</var>,\n <var>fromBuffer</var>, <var>fromIndex</var>, <var>count</var>)</dfn> performs the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>toBuffer</var> <a data-link-type=\"dfn\" data-refhint-key=\"08a5d589\" href=\"https://tc39.es/ecma262/#sec-object-type\" id=\"ref-for-sec-object-type⑥\">is an Object</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>toBuffer</var> has an [[ArrayBufferData]] internal slot.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>fromBuffer</var> <a data-link-type=\"dfn\" data-refhint-key=\"08a5d589\" href=\"https://tc39.es/ecma262/#sec-object-type\" id=\"ref-for-sec-object-type⑦\">is an Object</a>.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: <var>fromBuffer</var> has an [[ArrayBufferData]] internal slot.</p>"
        },
        {
          "html": "<p>If <var>toBuffer</var> is <var>fromBuffer</var>, return false.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-isdetachedbuffer\" id=\"ref-for-sec-isdetachedbuffer①⓪\">IsDetachedBuffer</a>(<var>toBuffer</var>) is true, return false.</p>"
        },
        {
          "html": "<p>If ! <a data-link-type=\"abstract-op\" href=\"https://tc39.es/ecma262/multipage/structured-data.html#sec-isdetachedbuffer\" id=\"ref-for-sec-isdetachedbuffer①①\">IsDetachedBuffer</a>(<var>fromBuffer</var>) is true, return false.</p>"
        },
        {
          "html": "<p>If <var>toIndex</var> + <var>count</var> &gt; <var>toBuffer</var>.[[ArrayBufferByteLength]], return false.</p>"
        },
        {
          "html": "<p>If <var>fromIndex</var> + <var>count</var> &gt; <var>fromBuffer</var>.[[ArrayBufferByteLength]], return false.</p>"
        },
        {
          "html": "<p>Return true.</p>"
        }
      ]
    },
    {
      "name": "set up a ReadableStream",
      "href": "https://streams.spec.whatwg.org/#readablestream-set-up",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-set-up\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">set up</dfn> a newly-<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new②②\">created-via-Web IDL</a>\n <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream⑤④\">ReadableStream</a></code> object <var>stream</var>, given an optional algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream/set\n up\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-set-up-pullalgorithm\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>pullAlgorithm</var></dfn>, an optional algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream/set\n up\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-set-up-cancelalgorithm\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>cancelAlgorithm</var></dfn>, an optional number <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream/set\n up\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-set-up-highwatermark\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>highWaterMark</var></dfn> (default 1), and an optional algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream/set up\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-set-up-sizealgorithm\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>sizeAlgorithm</var></dfn>, perform the following steps. If\n given, <var>pullAlgorithm</var> and <var>cancelAlgorithm</var> may return a promise. If given, <var>sizeAlgorithm</var> must\n be an algorithm accepting <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#chunk\" id=\"ref-for-chunk⑧⓪\">chunk</a> objects and returning a number; and if given, <var>highWaterMark</var>\n must be a non-negative, non-NaN number.",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>startAlgorithm</var> be an algorithm that returns undefined.</p>"
        },
        {
          "html": "Let <var>pullAlgorithmWrapper</var> be an algorithm that runs these steps:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>result</var> be the result of running <var>pullAlgorithm</var>, if <var>pullAlgorithm</var> was given, or null\n  otherwise. If this throws an exception <var>e</var>, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with④⓪\">a promise rejected with</a> <var>e</var>.</p>"
            },
            {
              "html": "<p>If <var>result</var> is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-promise\" id=\"ref-for-idl-promise②①\">Promise</a></code>, then return <var>result</var>.</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with③⑨\">a promise resolved with</a> undefined.</p>"
            }
          ]
        },
        {
          "html": "Let <var>cancelAlgorithmWrapper</var> be an algorithm that runs these steps given <var>reason</var>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>result</var> be the result of running <var>cancelAlgorithm</var> given <var>reason</var>, if <var>cancelAlgorithm</var>\n  was given, or null otherwise. If this throws an exception <var>e</var>, return\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with④①\">a promise rejected with</a> <var>e</var>.</p>"
            },
            {
              "html": "<p>If <var>result</var> is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-promise\" id=\"ref-for-idl-promise②②\">Promise</a></code>, then return <var>result</var>.</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with④⓪\">a promise resolved with</a> undefined.</p>"
            }
          ]
        },
        {
          "html": "<p>If <var>sizeAlgorithm</var> was not given, then set it to an algorithm that returns 1.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#initialize-readable-stream\" id=\"ref-for-initialize-readable-stream④\">InitializeReadableStream</a>(<var>stream</var>).</p>"
        },
        {
          "html": "<p>Let <var>controller</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new②③\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller\" id=\"ref-for-readablestreamdefaultcontroller①④\">ReadableStreamDefaultController</a></code>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-readable-stream-default-controller\" id=\"ref-for-set-up-readable-stream-default-controller③\">SetUpReadableStreamDefaultController</a>(<var>stream</var>, <var>controller</var>, <var>startAlgorithm</var>,\n  <var>pullAlgorithmWrapper</var>, <var>cancelAlgorithmWrapper</var>, <var>highWaterMark</var>, <var>sizeAlgorithm</var>).</p>"
        }
      ]
    },
    {
      "name": "set up a byte-source ReadableStream",
      "href": "https://streams.spec.whatwg.org/#readablestream-set-up-with-byte-reading-support",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-set-up-with-byte-reading-support\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">set up with byte reading support</dfn> a\n newly-<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new②④\">created-via-Web IDL</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream⑤⑤\">ReadableStream</a></code> object <var>stream</var>, given an optional algorithm\n <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream/set up with byte reading support\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-set-up-with-byte-reading-support-pullalgorithm\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>pullAlgorithm</var></dfn>,\n an optional algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream/set up with byte reading\n support\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-set-up-with-byte-reading-support-cancelalgorithm\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>cancelAlgorithm</var></dfn>, and an optional number <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream/set up with byte reading support\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-set-up-with-byte-reading-support-highwatermark\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>highWaterMark</var></dfn> (default 0),\n perform the following steps. If given, <var>pullAlgorithm</var> and <var>cancelAlgorithm</var> may return a promise.\n If given, <var>highWaterMark</var> must be a non-negative, non-NaN number.",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>startAlgorithm</var> be an algorithm that returns undefined.</p>"
        },
        {
          "html": "Let <var>pullAlgorithmWrapper</var> be an algorithm that runs these steps:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>result</var> be the result of running <var>pullAlgorithm</var>, if <var>pullAlgorithm</var> was given, or null\n  otherwise. If this throws an exception <var>e</var>, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with④②\">a promise rejected with</a> <var>e</var>.</p>"
            },
            {
              "html": "<p>If <var>result</var> is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-promise\" id=\"ref-for-idl-promise②③\">Promise</a></code>, then return <var>result</var>.</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with④①\">a promise resolved with</a> undefined.</p>"
            }
          ]
        },
        {
          "html": "Let <var>cancelAlgorithmWrapper</var> be an algorithm that runs these steps:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>result</var> be the result of running <var>cancelAlgorithm</var>, if <var>cancelAlgorithm</var> was given, or\n  null otherwise. If this throws an exception <var>e</var>, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with④③\">a promise rejected with</a> <var>e</var>.</p>"
            },
            {
              "html": "<p>If <var>result</var> is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-promise\" id=\"ref-for-idl-promise②④\">Promise</a></code>, then return <var>result</var>.</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with④②\">a promise resolved with</a> undefined.</p>"
            }
          ]
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#initialize-readable-stream\" id=\"ref-for-initialize-readable-stream⑤\">InitializeReadableStream</a>(<var>stream</var>).</p>"
        },
        {
          "html": "<p>Let <var>controller</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new②⑤\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller\" id=\"ref-for-readablebytestreamcontroller①⑨\">ReadableByteStreamController</a></code>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-readable-byte-stream-controller\" id=\"ref-for-set-up-readable-byte-stream-controller②\">SetUpReadableByteStreamController</a>(<var>stream</var>, <var>controller</var>, <var>startAlgorithm</var>,\n  <var>pullAlgorithmWrapper</var>, <var>cancelAlgorithmWrapper</var>, <var>highWaterMark</var>, undefined).</p>"
        }
      ]
    },
    {
      "name": "ReadableStream/desired size to fill up to the high water mark",
      "href": "https://streams.spec.whatwg.org/#readablestream-desired-size-to-fill-up-to-the-high-water-mark",
      "html": "A <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream⑥⓪\">ReadableStream</a></code> <var>stream</var>’s <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"dfn\" data-export=\"\" data-lt=\"desired size to fill up to the high water mark\" id=\"readablestream-desired-size-to-fill-up-to-the-high-water-mark\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">desired size to fill up to the\n high water mark</dfn> is the result of running the following steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>stream</var> is not <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-readable\" id=\"ref-for-readablestream-readable\">readable</a>, then return 0.</p>"
        },
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑤④\">[[controller]]</a> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements②④\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller\" id=\"ref-for-readablebytestreamcontroller②⓪\">ReadableByteStreamController</a></code>,\n  then return !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-get-desired-size\" id=\"ref-for-readable-byte-stream-controller-get-desired-size②\">ReadableByteStreamControllerGetDesiredSize</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑤⑤\">[[controller]]</a>).</p>"
        },
        {
          "html": "<p>Return !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-get-desired-size\" id=\"ref-for-readable-stream-default-controller-get-desired-size③\">ReadableStreamDefaultControllerGetDesiredSize</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑤⑥\">[[controller]]</a>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStream/close",
      "href": "https://streams.spec.whatwg.org/#readablestream-close",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-close\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">close</dfn> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream⑥②\">ReadableStream</a></code> <var>stream</var>:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑤⑦\">[[controller]]</a> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements②⑤\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller\" id=\"ref-for-readablebytestreamcontroller②①\">ReadableByteStreamController</a></code>,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-close\" id=\"ref-for-readable-byte-stream-controller-close⑤\">ReadableByteStreamControllerClose</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑤⑧\">[[controller]]</a>).</p>"
            },
            {
              "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑤⑨\">[[controller]]</a>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller-pendingpullintos\" id=\"ref-for-readablebytestreamcontroller-pendingpullintos③②\">[[pendingPullIntos]]</a>\n  is not <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#list-is-empty\" id=\"ref-for-list-is-empty②③\">empty</a>, perform !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond\" id=\"ref-for-readable-byte-stream-controller-respond④\">ReadableByteStreamControllerRespond</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑥⓪\">[[controller]]</a>, 0).</p>"
            }
          ]
        },
        {
          "html": "<p>Otherwise, perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-close\" id=\"ref-for-readable-stream-default-controller-close⑦\">ReadableStreamDefaultControllerClose</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑥①\">[[controller]]</a>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStream/error",
      "href": "https://streams.spec.whatwg.org/#readablestream-error",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-error\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">error</dfn> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream⑥③\">ReadableStream</a></code> <var>stream</var> given a JavaScript\n value <var>e</var>:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑥②\">[[controller]]</a> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements②⑥\">implements</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller\" id=\"ref-for-readablebytestreamcontroller②②\">ReadableByteStreamController</a></code>,\n  then perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-error\" id=\"ref-for-readable-byte-stream-controller-error①③\">ReadableByteStreamControllerError</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑥③\">[[controller]]</a>,\n  <var>e</var>).</p>"
        },
        {
          "html": "<p>Otherwise, perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-error\" id=\"ref-for-readable-stream-default-controller-error①⑤\">ReadableStreamDefaultControllerError</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑥④\">[[controller]]</a>,\n  <var>e</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStream/enqueue",
      "href": "https://streams.spec.whatwg.org/#readablestream-enqueue",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-enqueue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">enqueue</dfn> the JavaScript value <var>chunk</var> into a\n <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream⑥④\">ReadableStream</a></code> <var>stream</var>:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "If <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑥⑤\">[[controller]]</a> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements②⑦\">implements</a>\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller\" id=\"ref-for-readablestreamdefaultcontroller①⑤\">ReadableStreamDefaultController</a></code>,",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-controller-enqueue\" id=\"ref-for-readable-stream-default-controller-enqueue⑥\">ReadableStreamDefaultControllerEnqueue</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑥⑥\">[[controller]]</a>,\n  <var>chunk</var>).</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "assert",
          "steps": [
            {
              "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑥⑦\">[[controller]]</a> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements②⑧\">implements</a>\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller\" id=\"ref-for-readablebytestreamcontroller②③\">ReadableByteStreamController</a></code>.</p>"
            },
            {
              "html": "<p class=\"assertion\">Assert: <var>chunk</var> is an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#ArrayBufferView\" id=\"ref-for-ArrayBufferView⑥\">ArrayBufferView</a></code>.</p>"
            },
            {
              "html": "<p>Let <var>byobView</var> be the <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-current-byob-request-view\" id=\"ref-for-readablestream-current-byob-request-view\">current BYOB request view</a> for <var>stream</var>.</p>"
            },
            {
              "html": "If <var>byobView</var> is non-null, and <var>chunk</var>.[[ViewedArrayBuffer]] is\n  <var>byobView</var>.[[ViewedArrayBuffer]], then:",
              "rationale": "assert",
              "steps": [
                {
                  "html": "<p class=\"assertion\">Assert: <var>chunk</var>.[[ByteOffset]] is <var>byobView</var>.[[ByteOffset]].</p>"
                },
                {
                  "html": "<p class=\"assertion\">Assert: <var>chunk</var>.[[ByteLength]] ≤ <var>byobView</var>.[[ByteLength]].</p>"
                },
                {
                  "html": "<p>Perform ?\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond\" id=\"ref-for-readable-byte-stream-controller-respond⑤\">ReadableByteStreamControllerRespond</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑥⑧\">[[controller]]</a>,\n  <var>chunk</var>.[[ByteLength]]).</p>"
                }
              ]
            },
            {
              "html": "<p>Otherwise, perform ?\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-enqueue\" id=\"ref-for-readable-byte-stream-controller-enqueue④\">ReadableByteStreamControllerEnqueue</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑥⑨\">[[controller]]</a>, <var>chunk</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableStream/current BYOB request view",
      "href": "https://streams.spec.whatwg.org/#readablestream-current-byob-request-view",
      "html": "The <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-current-byob-request-view\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">current BYOB request view</dfn> for a\n <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream⑥⑥\">ReadableStream</a></code> <var>stream</var> is either an <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#ArrayBufferView\" id=\"ref-for-ArrayBufferView⑦\">ArrayBufferView</a></code> or null, determined by the following\n steps:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑦⓪\">[[controller]]</a> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements②⑨\">implements</a>\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller\" id=\"ref-for-readablebytestreamcontroller②④\">ReadableByteStreamController</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>byobRequest</var> be !\n  <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablebytestreamcontrollergetbyobrequest\" id=\"ref-for-abstract-opdef-readablebytestreamcontrollergetbyobrequest③\">ReadableByteStreamControllerGetBYOBRequest</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑦①\">[[controller]]</a>).</p>"
        },
        {
          "html": "<p>If <var>byobRequest</var> is null, then return null.</p>"
        },
        {
          "html": "<p>Return <var>byobRequest</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest-view\" id=\"ref-for-readablestreambyobrequest-view⑧\">[[view]]</a>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStream/pull from bytes",
      "href": "https://streams.spec.whatwg.org/#readablestream-pull-from-bytes",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-pull-from-bytes\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">pull from bytes</dfn> with a <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#byte-sequence\" id=\"ref-for-byte-sequence②\">byte sequence</a> <var>bytes</var> into a\n <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream⑥⑦\">ReadableStream</a></code> <var>stream</var>:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: <var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑦②\">[[controller]]</a> <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#implements\" id=\"ref-for-implements③⓪\">implements</a>\n  <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller\" id=\"ref-for-readablebytestreamcontroller②⑤\">ReadableByteStreamController</a></code>.</p>"
        },
        {
          "html": "<p>Let <var>available</var> be <var>bytes</var>’s <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#byte-sequence-length\" id=\"ref-for-byte-sequence-length\">length</a>.</p>"
        },
        {
          "html": "<p>Let <var>desiredSize</var> be <var>available</var>.</p>"
        },
        {
          "html": "<p>If <var>stream</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-current-byob-request-view\" id=\"ref-for-readablestream-current-byob-request-view⑥\">current BYOB request view</a> is non-null, then set <var>desiredSize</var>\n  to <var>stream</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-current-byob-request-view\" id=\"ref-for-readablestream-current-byob-request-view⑦\">current BYOB request view</a>’s <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#buffersource-byte-length\" id=\"ref-for-buffersource-byte-length①\">byte length</a>.</p>"
        },
        {
          "html": "<p>Let <var>pullSize</var> be the smaller value of <var>available</var> and <var>desiredSize</var>.</p>"
        },
        {
          "html": "<p>Let <var>pulled</var> be the first <var>pullSize</var> bytes of <var>bytes</var>.</p>"
        },
        {
          "html": "<p>Remove the first <var>pullSize</var> bytes from <var>bytes</var>.</p>"
        },
        {
          "html": "If <var>stream</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-current-byob-request-view\" id=\"ref-for-readablestream-current-byob-request-view⑧\">current BYOB request view</a> is non-null, then:",
          "rationale": "perform",
          "steps": [
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#arraybufferview-write\" id=\"ref-for-arraybufferview-write①\">Write</a> <var>pulled</var> into <var>stream</var>’s <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-current-byob-request-view\" id=\"ref-for-readablestream-current-byob-request-view⑨\">current BYOB request view</a>.</p>"
            },
            {
              "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-respond\" id=\"ref-for-readable-byte-stream-controller-respond⑥\">ReadableByteStreamControllerRespond</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑦③\">[[controller]]</a>,\n  <var>pullSize</var>).</p>"
            }
          ]
        },
        {
          "html": "Otherwise,",
          "rationale": "set",
          "steps": [
            {
              "html": "<p>Set <var>view</var> to the result of <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#arraybufferview-create\" id=\"ref-for-arraybufferview-create①\">creating</a> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-typedarray-objects\" id=\"ref-for-sec-typedarray-objects⑧\">Uint8Array</a></code> from <var>pulled</var>\n  in <var>stream</var>’s <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#concept-relevant-realm\" id=\"ref-for-concept-relevant-realm②\">relevant Realm</a>.</p>"
            },
            {
              "html": "<p>Perform ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-byte-stream-controller-enqueue\" id=\"ref-for-readable-byte-stream-controller-enqueue⑤\">ReadableByteStreamControllerEnqueue</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-controller\" id=\"ref-for-readablestream-controller⑦④\">[[controller]]</a>,\n  <var>view</var>).</p>"
            }
          ]
        }
      ]
    },
    {
      "name": "ReadableStream/get a reader",
      "href": "https://streams.spec.whatwg.org/#readablestream-get-a-reader",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"dfn\" data-export=\"\" data-lt=\"get a reader|getting a reader\" id=\"readablestream-get-a-reader\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">get a reader</dfn> for a\n <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream⑦⓪\">ReadableStream</a></code> <var>stream</var>, return ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#acquire-readable-stream-reader\" id=\"ref-for-acquire-readable-stream-reader⑦\">AcquireReadableStreamDefaultReader</a>(<var>stream</var>). The result\n will be a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader\" id=\"ref-for-readablestreamdefaultreader①⑧\">ReadableStreamDefaultReader</a></code>.",
      "rationale": "To <dfn>"
    },
    {
      "name": "ReadableStreamDefaultReader/read a chunk",
      "href": "https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-a-chunk",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStreamDefaultReader\" data-dfn-type=\"dfn\" data-export=\"\" data-lt=\"read a chunk|reading a chunk\" id=\"readablestreamdefaultreader-read-a-chunk\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">read\na chunk</dfn> from a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader\" id=\"ref-for-readablestreamdefaultreader①⑨\">ReadableStreamDefaultReader</a></code> <var>reader</var>, given a <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request\" id=\"ref-for-read-request⑤\">read request</a>\n<var>readRequest</var>, perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-reader-read\" id=\"ref-for-readable-stream-default-reader-read④\">ReadableStreamDefaultReaderRead</a>(<var>reader</var>, <var>readRequest</var>).",
      "rationale": "To <dfn>"
    },
    {
      "name": "read all bytes",
      "href": "https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStreamDefaultReader\" data-dfn-type=\"dfn\" data-export=\"\" data-lt=\"read all bytes|reading all bytes\" id=\"readablestreamdefaultreader-read-all-bytes\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">read all\n bytes</dfn> from a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader\" id=\"ref-for-readablestreamdefaultreader②⓪\">ReadableStreamDefaultReader</a></code> <var>reader</var>, given <var>successSteps</var>,\n which is an algorithm accepting a <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#byte-sequence\" id=\"ref-for-byte-sequence③\">byte sequence</a>, and <var>failureSteps</var>, which is an algorithm\n accepting a JavaScript value: <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-loop\" id=\"ref-for-read-loop\">read-loop</a> given <var>reader</var>, a new <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#byte-sequence\" id=\"ref-for-byte-sequence④\">byte sequence</a>,\n <var>successSteps</var>, and <var>failureSteps</var>.",
      "rationale": "To <dfn>"
    },
    {
      "name": "read all bytes",
      "href": "https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes",
      "html": "For the purposes of the above algorithm, to <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-noexport=\"\" id=\"read-loop\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">read-loop</dfn> given <var>reader</var>, <var>bytes</var>,\n  <var>successSteps</var>, and <var>failureSteps</var>:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>readRequest</var> be a new <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request\" id=\"ref-for-read-request⑥\">read request</a> with the following <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#struct-item\" id=\"ref-for-struct-item①②\">items</a>:</p>\n       <dl>\n        <dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-chunk-steps\" id=\"ref-for-read-request-chunk-steps⑦\">chunk steps</a>, given <var>chunk</var>\n        </dt><dd data-md=\"\">\n         \n        </dd><dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-close-steps\" id=\"ref-for-read-request-close-steps⑦\">close steps</a>\n        </dt><dd data-md=\"\">\n         \n        </dd><dt data-md=\"\"><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-request-error-steps\" id=\"ref-for-read-request-error-steps⑦\">error steps</a>, given <var>e</var>\n        </dt><dd data-md=\"\">\n         \n       </dd></dl>",
          "rationale": "if",
          "steps": [
            {
              "html": "<p>If <var>chunk</var> is not a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-typedarray-objects\" id=\"ref-for-sec-typedarray-objects⑨\">Uint8Array</a></code> object, call <var>failureSteps</var> with a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror\" id=\"ref-for-sec-native-error-types-used-in-this-standard-typeerror⑥⑤\">TypeError</a></code> and\n  abort these steps.</p>"
            },
            {
              "html": "<p>Append the bytes represented by <var>chunk</var> to <var>bytes</var>.</p>"
            },
            {
              "html": "<p><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#read-loop\" id=\"ref-for-read-loop①\">Read-loop</a> given <var>reader</var>, <var>bytes</var>, <var>successSteps</var>, and <var>failureSteps</var>.</p>"
            }
          ],
          "additional": [
            {
              "html": "",
              "rationale": "call",
              "steps": [
                {
                  "html": "<p>Call <var>successSteps</var> with <var>bytes</var>.</p>"
                }
              ]
            },
            {
              "html": "",
              "rationale": "call",
              "steps": [
                {
                  "html": "<p>Call <var>failureSteps</var> with <var>e</var>.</p>"
                }
              ]
            }
          ]
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-default-reader-read\" id=\"ref-for-readable-stream-default-reader-read⑤\">ReadableStreamDefaultReaderRead</a>(<var>reader</var>, <var>readRequest</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStreamDefaultReader/release",
      "href": "https://streams.spec.whatwg.org/#readablestreamdefaultreader-release",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStreamDefaultReader\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestreamdefaultreader-release\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">release</dfn> a\n<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader\" id=\"ref-for-readablestreamdefaultreader②②\">ReadableStreamDefaultReader</a></code> <var>reader</var>, perform !\n<a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#abstract-opdef-readablestreamdefaultreaderrelease\" id=\"ref-for-abstract-opdef-readablestreamdefaultreaderrelease⑦\">ReadableStreamDefaultReaderRelease</a>(<var>reader</var>).",
      "rationale": "To <dfn>"
    },
    {
      "name": "ReadableStreamDefaultReader/cancel",
      "href": "https://streams.spec.whatwg.org/#readablestreamdefaultreader-cancel",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStreamDefaultReader\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestreamdefaultreader-cancel\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">cancel</dfn> a\n<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader\" id=\"ref-for-readablestreamdefaultreader②③\">ReadableStreamDefaultReader</a></code> <var>reader</var> with <var>reason</var>, perform !\n<a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-reader-generic-cancel\" id=\"ref-for-readable-stream-reader-generic-cancel②\">ReadableStreamReaderGenericCancel</a>(<var>reader</var>, <var>reason</var>). The return value will be a promise\nthat either fulfills with undefined, or rejects with a failure reason.",
      "rationale": "To <dfn>"
    },
    {
      "name": "ReadableStream/cancel",
      "href": "https://streams.spec.whatwg.org/#readablestream-cancel",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-cancel\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">cancel</dfn> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream⑦②\">ReadableStream</a></code> <var>stream</var> with\n<var>reason</var>, return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-cancel\" id=\"ref-for-readable-stream-cancel①②\">ReadableStreamCancel</a>(<var>stream</var>, <var>reason</var>). The return value will be a promise\nthat either fulfills with undefined, or rejects with a failure reason.",
      "rationale": "To <dfn>"
    },
    {
      "name": "ReadableStream/tee",
      "href": "https://streams.spec.whatwg.org/#readablestream-tee",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"dfn\" data-export=\"\" data-lt=\"tee|teeing\" id=\"readablestream-tee\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">tee</dfn> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream⑦③\">ReadableStream</a></code> <var>stream</var>,\n return ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-tee\" id=\"ref-for-readable-stream-tee①\">ReadableStreamTee</a>(<var>stream</var>, true).",
      "rationale": "To <dfn>"
    },
    {
      "name": "set up a WritableStream",
      "href": "https://streams.spec.whatwg.org/#writablestream-set-up",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"WritableStream\" data-dfn-type=\"dfn\" data-export=\"\" id=\"writablestream-set-up\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">set up</dfn> a newly-<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new②⑦\">created-via-Web IDL</a>\n <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestream\" id=\"ref-for-writablestream③⑤\">WritableStream</a></code> object <var>stream</var>, given an algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"WritableStream/set\n up\" data-dfn-type=\"dfn\" data-export=\"\" id=\"writablestream-set-up-writealgorithm\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>writeAlgorithm</var></dfn>, an optional algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"WritableStream/set\n up\" data-dfn-type=\"dfn\" data-export=\"\" id=\"writablestream-set-up-closealgorithm\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>closeAlgorithm</var></dfn>, an optional algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"WritableStream/set\n up\" data-dfn-type=\"dfn\" data-export=\"\" id=\"writablestream-set-up-abortalgorithm\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>abortAlgorithm</var></dfn>, an optional number <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"WritableStream/set\n up\" data-dfn-type=\"dfn\" data-export=\"\" id=\"writablestream-set-up-highwatermark\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>highWaterMark</var></dfn> (default 1), an optional algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"WritableStream/set up\" data-dfn-type=\"dfn\" data-export=\"\" id=\"writablestream-set-up-sizealgorithm\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>sizeAlgorithm</var></dfn>, perform the following steps.\n <var>writeAlgorithm</var> must be an algorithm that accepts a <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#chunk\" id=\"ref-for-chunk⑧②\">chunk</a> object and returns a promise. If\n given, <var>closeAlgorithm</var> and <var>abortAlgorithm</var> may return a promise. If given, <var>sizeAlgorithm</var> must\n be an algorithm accepting <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#chunk\" id=\"ref-for-chunk⑧③\">chunk</a> objects and returning a number; and if given, <var>highWaterMark</var>\n must be a non-negative, non-NaN number.\n\n\n    \n    <p>Other specifications should be careful when constructing their\n <i><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-set-up-writealgorithm\" id=\"ref-for-writablestream-set-up-writealgorithm\">writeAlgorithm</a></i> to avoid <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/infrastructure.html#in-parallel\" id=\"ref-for-in-parallel①\">in parallel</a> reads from the given\n <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#chunk\" id=\"ref-for-chunk⑧④\">chunk</a>, as such reads can violate the run-to-completion semantics of JavaScript. To avoid this,\n they can make a synchronous copy or transfer of the given value, using operations such as\n <a data-link-type=\"abstract-op\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializewithtransfer\" id=\"ref-for-structuredserializewithtransfer④\">StructuredSerializeWithTransfer</a>, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-get-buffer-source-copy\" id=\"ref-for-dfn-get-buffer-source-copy\">get a copy of the bytes held by the buffer source</a>, or\n <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#arraybuffer-transfer\" id=\"ref-for-arraybuffer-transfer①\">transferring an <code>ArrayBuffer</code></a>. An exception is when the\n <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#chunk\" id=\"ref-for-chunk⑧⑤\">chunk</a> is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-sharedarraybuffer-objects\" id=\"ref-for-sec-sharedarraybuffer-objects\">SharedArrayBuffer</a></code>, for which it is understood that parallel mutations are a fact\n of life.</p>",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>startAlgorithm</var> be an algorithm that returns undefined.</p>"
        },
        {
          "html": "Let <var>closeAlgorithmWrapper</var> be an algorithm that runs these steps:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>result</var> be the result of running <var>closeAlgorithm</var>, if <var>closeAlgorithm</var> was given, or\n  null otherwise. If this throws an exception <var>e</var>, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with④④\">a promise rejected with</a> <var>e</var>.</p>"
            },
            {
              "html": "<p>If <var>result</var> is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-promise\" id=\"ref-for-idl-promise②⑤\">Promise</a></code>, then return <var>result</var>.</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with④③\">a promise resolved with</a> undefined.</p>"
            }
          ]
        },
        {
          "html": "Let <var>abortAlgorithmWrapper</var> be an algorithm that runs these steps given <var>reason</var>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>result</var> be the result of running <var>abortAlgorithm</var> given <var>reason</var>, if <var>abortAlgorithm</var> was\n  given, or null otherwise. If this throws an exception <var>e</var>, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with④⑤\">a promise rejected with</a>\n  <var>e</var>.</p>"
            },
            {
              "html": "<p>If <var>result</var> is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-promise\" id=\"ref-for-idl-promise②⑥\">Promise</a></code>, then return <var>result</var>.</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with④④\">a promise resolved with</a> undefined.</p>"
            }
          ]
        },
        {
          "html": "<p>If <var>sizeAlgorithm</var> was not given, then set it to an algorithm that returns 1.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#initialize-writable-stream\" id=\"ref-for-initialize-writable-stream③\">InitializeWritableStream</a>(<var>stream</var>).</p>"
        },
        {
          "html": "<p>Let <var>controller</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new②⑧\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller\" id=\"ref-for-writablestreamdefaultcontroller①⑥\">WritableStreamDefaultController</a></code>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-writable-stream-default-controller\" id=\"ref-for-set-up-writable-stream-default-controller③\">SetUpWritableStreamDefaultController</a>(<var>stream</var>, <var>controller</var>, <var>startAlgorithm</var>,\n  <var>writeAlgorithm</var>, <var>closeAlgorithmWrapper</var>, <var>abortAlgorithmWrapper</var>, <var>highWaterMark</var>,\n  <var>sizeAlgorithm</var>).</p>"
        }
      ]
    },
    {
      "name": "WritableStream/error",
      "href": "https://streams.spec.whatwg.org/#writablestream-error",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"WritableStream\" data-dfn-type=\"dfn\" data-export=\"\" data-lt=\"error|erroring\" id=\"writablestream-error\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">error</dfn> a\n<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestream\" id=\"ref-for-writablestream④⓪\">WritableStream</a></code> <var>stream</var> given a JavaScript value <var>e</var>, perform !\n<a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-controller-error-if-needed\" id=\"ref-for-writable-stream-default-controller-error-if-needed⑦\">WritableStreamDefaultControllerErrorIfNeeded</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#writablestream-controller\" id=\"ref-for-writablestream-controller①③\">[[controller]]</a>, <var>e</var>).",
      "rationale": "To <dfn>"
    },
    {
      "name": "WritableStream/get a writer",
      "href": "https://streams.spec.whatwg.org/#writablestream-get-a-writer",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"WritableStream\" data-dfn-type=\"dfn\" data-export=\"\" data-lt=\"get a writer|getting a writer\" id=\"writablestream-get-a-writer\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">get a writer</dfn> for a\n <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestream\" id=\"ref-for-writablestream④④\">WritableStream</a></code> <var>stream</var>, return ? <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#acquire-writable-stream-default-writer\" id=\"ref-for-acquire-writable-stream-default-writer②\">AcquireWritableStreamDefaultWriter</a>(<var>stream</var>). The result\n will be a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter\" id=\"ref-for-writablestreamdefaultwriter①①\">WritableStreamDefaultWriter</a></code>.",
      "rationale": "To <dfn>"
    },
    {
      "name": "WritableStreamDefaultWriter/write a chunk",
      "href": "https://streams.spec.whatwg.org/#writablestreamdefaultwriter-write-a-chunk",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"WritableStreamDefaultWriter\" data-dfn-type=\"dfn\" data-export=\"\" data-lt=\"write a chunk|writing a\nchunk\" id=\"writablestreamdefaultwriter-write-a-chunk\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">write a chunk</dfn> to a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter\" id=\"ref-for-writablestreamdefaultwriter①②\">WritableStreamDefaultWriter</a></code> <var>writer</var>, given a value <var>chunk</var>,\nreturn ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-writer-write\" id=\"ref-for-writable-stream-default-writer-write①\">WritableStreamDefaultWriterWrite</a>(<var>writer</var>, <var>chunk</var>).",
      "rationale": "To <dfn>"
    },
    {
      "name": "WritableStreamDefaultWriter/release",
      "href": "https://streams.spec.whatwg.org/#writablestreamdefaultwriter-release",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"WritableStreamDefaultWriter\" data-dfn-type=\"dfn\" data-export=\"\" id=\"writablestreamdefaultwriter-release\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">release</dfn> a\n<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestreamdefaultwriter\" id=\"ref-for-writablestreamdefaultwriter①③\">WritableStreamDefaultWriter</a></code> <var>writer</var>, perform !\n<a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-default-writer-release\" id=\"ref-for-writable-stream-default-writer-release②\">WritableStreamDefaultWriterRelease</a>(<var>writer</var>).",
      "rationale": "To <dfn>"
    },
    {
      "name": "WritableStream/close",
      "href": "https://streams.spec.whatwg.org/#writablestream-close",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"WritableStream\" data-dfn-type=\"dfn\" data-export=\"\" data-lt=\"close|closing\" id=\"writablestream-close\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">close</dfn> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestream\" id=\"ref-for-writablestream④⑤\">WritableStream</a></code>\n<var>stream</var>, return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-close\" id=\"ref-for-writable-stream-close②\">WritableStreamClose</a>(<var>stream</var>). The return value will be a promise that either\nfulfills with undefined, or rejects with a failure reason.",
      "rationale": "To <dfn>"
    },
    {
      "name": "WritableStream/abort",
      "href": "https://streams.spec.whatwg.org/#writablestream-abort",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"WritableStream\" data-dfn-type=\"dfn\" data-export=\"\" data-lt=\"abort|aborting\" id=\"writablestream-abort\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">abort</dfn> a\n<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestream\" id=\"ref-for-writablestream④⑥\">WritableStream</a></code> <var>stream</var> with <var>reason</var>, return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#writable-stream-abort\" id=\"ref-for-writable-stream-abort⑦\">WritableStreamAbort</a>(<var>stream</var>, <var>reason</var>). The\nreturn value will be a promise that either fulfills with undefined, or rejects with a failure\nreason.",
      "rationale": "To <dfn>"
    },
    {
      "name": "create a TransformStream",
      "href": "https://streams.spec.whatwg.org/#transformstream-set-up",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"TransformStream\" data-dfn-type=\"dfn\" data-export=\"\" data-lt=\"set up|setting up\" id=\"transformstream-set-up\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">set up</dfn> a\n newly-<a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new③⓪\">created-via-Web IDL</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#transformstream\" id=\"ref-for-transformstream①⑧\">TransformStream</a></code> <var>stream</var> given an algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"TransformStream/set up\" data-dfn-type=\"dfn\" data-export=\"\" id=\"transformstream-set-up-transformalgorithm\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>transformAlgorithm</var></dfn>, an optional algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"TransformStream/set up\" data-dfn-type=\"dfn\" data-export=\"\" id=\"transformstream-set-up-flushalgorithm\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>flushAlgorithm</var></dfn>, and an optional algorithm <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"TransformStream/set up\" data-dfn-type=\"dfn\" data-export=\"\" id=\"transformstream-set-up-cancelalgorithm\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>cancelAlgorithm</var></dfn>, perform the following steps.\n <var>transformAlgorithm</var> and, if given, <var>flushAlgorithm</var> and <var>cancelAlgorithm</var>, may return a promise.\n\n\n    \n    <p>Other specifications should be careful when constructing their\n <i><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-set-up-transformalgorithm\" id=\"ref-for-transformstream-set-up-transformalgorithm\">transformAlgorithm</a></i> to avoid <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/infrastructure.html#in-parallel\" id=\"ref-for-in-parallel②\">in parallel</a> reads from the given\n <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#chunk\" id=\"ref-for-chunk⑧⑥\">chunk</a>, as such reads can violate the run-to-completion semantics of JavaScript. To avoid this,\n they can make a synchronous copy or transfer of the given value, using operations such as\n <a data-link-type=\"abstract-op\" href=\"https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializewithtransfer\" id=\"ref-for-structuredserializewithtransfer⑤\">StructuredSerializeWithTransfer</a>, <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#dfn-get-buffer-source-copy\" id=\"ref-for-dfn-get-buffer-source-copy①\">get a copy of the bytes held by the buffer source</a>, or\n <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#arraybuffer-transfer\" id=\"ref-for-arraybuffer-transfer②\">transferring an <code>ArrayBuffer</code></a>.  An exception is when the\n <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#chunk\" id=\"ref-for-chunk⑧⑦\">chunk</a> is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://tc39.es/ecma262/#sec-sharedarraybuffer-objects\" id=\"ref-for-sec-sharedarraybuffer-objects①\">SharedArrayBuffer</a></code>, for which it is understood that parallel mutations are a fact\n of life.</p>",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>writableHighWaterMark</var> be 1.</p>"
        },
        {
          "html": "<p>Let <var>writableSizeAlgorithm</var> be an algorithm that returns 1.</p>"
        },
        {
          "html": "<p>Let <var>readableHighWaterMark</var> be 0.</p>"
        },
        {
          "html": "<p>Let <var>readableSizeAlgorithm</var> be an algorithm that returns 1.</p>"
        },
        {
          "html": "Let <var>transformAlgorithmWrapper</var> be an algorithm that runs these steps given a value <var>chunk</var>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>result</var> be the result of running <var>transformAlgorithm</var> given <var>chunk</var>. If this throws an\n  exception <var>e</var>, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with④⑥\">a promise rejected with</a> <var>e</var>.</p>"
            },
            {
              "html": "<p>If <var>result</var> is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-promise\" id=\"ref-for-idl-promise②⑦\">Promise</a></code>, then return <var>result</var>.</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with④⑤\">a promise resolved with</a> undefined.</p>"
            }
          ]
        },
        {
          "html": "Let <var>flushAlgorithmWrapper</var> be an algorithm that runs these steps:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>result</var> be the result of running <var>flushAlgorithm</var>, if <var>flushAlgorithm</var> was given, or\n  null otherwise. If this throws an exception <var>e</var>, return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with④⑦\">a promise rejected with</a> <var>e</var>.</p>"
            },
            {
              "html": "<p>If <var>result</var> is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-promise\" id=\"ref-for-idl-promise②⑧\">Promise</a></code>, then return <var>result</var>.</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with④⑥\">a promise resolved with</a> undefined.</p>"
            }
          ]
        },
        {
          "html": "Let <var>cancelAlgorithmWrapper</var> be an algorithm that runs these steps given a value <var>reason</var>:",
          "rationale": "let",
          "steps": [
            {
              "html": "<p>Let <var>result</var> be the result of running <var>cancelAlgorithm</var> given <var>reason</var>, if <var>cancelAlgorithm</var>\n  was given, or null otherwise. If this throws an exception <var>e</var>, return\n  <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-rejected-with\" id=\"ref-for-a-promise-rejected-with④⑧\">a promise rejected with</a> <var>e</var>.</p>"
            },
            {
              "html": "<p>If <var>result</var> is a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-promise\" id=\"ref-for-idl-promise②⑨\">Promise</a></code>, then return <var>result</var>.</p>"
            },
            {
              "html": "<p>Return <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with④⑦\">a promise resolved with</a> undefined.</p>"
            }
          ]
        },
        {
          "html": "<p>Let <var>startPromise</var> be <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#a-promise-resolved-with\" id=\"ref-for-a-promise-resolved-with④⑧\">a promise resolved with</a> undefined.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#initialize-transform-stream\" id=\"ref-for-initialize-transform-stream①\">InitializeTransformStream</a>(<var>stream</var>, <var>startPromise</var>, <var>writableHighWaterMark</var>,\n  <var>writableSizeAlgorithm</var>, <var>readableHighWaterMark</var>, <var>readableSizeAlgorithm</var>).</p>"
        },
        {
          "html": "<p>Let <var>controller</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new③①\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller\" id=\"ref-for-transformstreamdefaultcontroller①②\">TransformStreamDefaultController</a></code>.</p>"
        },
        {
          "html": "<p>Perform ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#set-up-transform-stream-default-controller\" id=\"ref-for-set-up-transform-stream-default-controller①\">SetUpTransformStreamDefaultController</a>(<var>stream</var>, <var>controller</var>,\n  <var>transformAlgorithmWrapper</var>, <var>flushAlgorithmWrapper</var>, <var>cancelAlgorithmWrapper</var>).</p>"
        }
      ]
    },
    {
      "name": "create an identity TransformStream",
      "href": "https://streams.spec.whatwg.org/#create-an-identity-transformstream",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-export=\"\" data-lt=\"create an identity TransformStream|creating an identity TransformStream\" id=\"create-an-identity-transformstream\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">create\n an identity <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#transformstream\" id=\"ref-for-transformstream②②\">TransformStream</a></code></dfn>:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>transformStream</var> be a <a data-link-type=\"dfn\" href=\"https://webidl.spec.whatwg.org/#new\" id=\"ref-for-new③③\">new</a> <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#transformstream\" id=\"ref-for-transformstream②③\">TransformStream</a></code>.</p>"
        },
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-set-up\" id=\"ref-for-transformstream-set-up②\">Set up</a> <var>transformStream</var> with <var><a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-set-up-transformalgorithm\" id=\"ref-for-transformstream-set-up-transformalgorithm①\">transformAlgorithm</a></var> set to an algorithm which, given\n  <var>chunk</var>, <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-enqueue\" id=\"ref-for-transformstream-enqueue\">enqueues</a> <var>chunk</var> in <var>transformStream</var>.</p>"
        },
        {
          "html": "<p>Return <var>transformStream</var>.</p>"
        }
      ]
    },
    {
      "name": "TransformStream/enqueue",
      "href": "https://streams.spec.whatwg.org/#transformstream-enqueue",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"TransformStream\" data-dfn-type=\"dfn\" data-export=\"\" id=\"transformstream-enqueue\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">enqueue</dfn> the JavaScript value <var>chunk</var> into a\n<code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#transformstream\" id=\"ref-for-transformstream②⑤\">TransformStream</a></code> <var>stream</var>, perform !\n<a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-controller-enqueue\" id=\"ref-for-transform-stream-default-controller-enqueue②\">TransformStreamDefaultControllerEnqueue</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-controller\" id=\"ref-for-transformstream-controller①①\">[[controller]]</a>, <var>chunk</var>).",
      "rationale": "To <dfn>"
    },
    {
      "name": "TransformStream/terminate",
      "href": "https://streams.spec.whatwg.org/#transformstream-terminate",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"TransformStream\" data-dfn-type=\"dfn\" data-export=\"\" id=\"transformstream-terminate\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">terminate</dfn> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#transformstream\" id=\"ref-for-transformstream②⑥\">TransformStream</a></code> <var>stream</var>,\nperform !\n<a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-controller-terminate\" id=\"ref-for-transform-stream-default-controller-terminate①\">TransformStreamDefaultControllerTerminate</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-controller\" id=\"ref-for-transformstream-controller①②\">[[controller]]</a>).",
      "rationale": "To <dfn>"
    },
    {
      "name": "TransformStream/error",
      "href": "https://streams.spec.whatwg.org/#transformstream-error",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"TransformStream\" data-dfn-type=\"dfn\" data-export=\"\" id=\"transformstream-error\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">error</dfn> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#transformstream\" id=\"ref-for-transformstream②⑦\">TransformStream</a></code> <var>stream</var> given a\nJavaScript value <var>e</var>, perform !\n<a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#transform-stream-default-controller-error\" id=\"ref-for-transform-stream-default-controller-error①\">TransformStreamDefaultControllerError</a>(<var>stream</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-controller\" id=\"ref-for-transformstream-controller①③\">[[controller]]</a>, <var>e</var>).",
      "rationale": "To <dfn>"
    },
    {
      "name": "ReadableStream pipe to",
      "href": "https://streams.spec.whatwg.org/#readablestream-pipe",
      "html": "The result of a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream⑧①\">ReadableStream</a></code> <var>readable</var> <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"dfn\" data-export=\"\" data-lt=\"pipe|pipe\n to|piped to|piping to\" id=\"readablestream-pipe\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">piped to</dfn> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#writablestream\" id=\"ref-for-writablestream④⑧\">WritableStream</a></code> <var>writable</var>, given an optional boolean\n <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream/pipe to,ReadableStream/piped to\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-pipe-to-preventclose\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>preventClose</var></dfn>\n (default false), an optional boolean <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream/pipe to,ReadableStream/piped\n to\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-pipe-to-preventabort\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>preventAbort</var></dfn> (default false), an optional boolean <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream/pipe to,ReadableStream/piped to\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-pipe-to-preventcancel\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>preventCancel</var></dfn> (default\n false), and an optional <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#abortsignal\" id=\"ref-for-abortsignal⑥\">AbortSignal</a></code> <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream/pipe\n to,ReadableStream/piped to\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-pipe-to-signal\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>signal</var></dfn>, is given by performing the following steps.\n They will return a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://webidl.spec.whatwg.org/#idl-promise\" id=\"ref-for-idl-promise③⓪\">Promise</a></code> that fulfills when the pipe completes, or rejects with an exception\n if it fails.",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-readable-stream-locked\" id=\"ref-for-is-readable-stream-locked①③\">IsReadableStreamLocked</a>(<var>readable</var>) is false.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-writable-stream-locked\" id=\"ref-for-is-writable-stream-locked①⓪\">IsWritableStreamLocked</a>(<var>writable</var>) is false.</p>"
        },
        {
          "html": "<p>Let <var>signalArg</var> be <var>signal</var> if <var>signal</var> was given, or undefined otherwise.</p>"
        },
        {
          "html": "<p>Return ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-pipe-to\" id=\"ref-for-readable-stream-pipe-to④\">ReadableStreamPipeTo</a>(<var>readable</var>, <var>writable</var>, <var>preventClose</var>, <var>preventAbort</var>,\n  <var>preventCancel</var>, <var>signalArg</var>).</p>"
        }
      ]
    },
    {
      "name": "ReadableStream pipe through",
      "href": "https://streams.spec.whatwg.org/#readablestream-pipe-through",
      "html": "The result of a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream⑧②\">ReadableStream</a></code> <var>readable</var> <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"dfn\" data-export=\"\" data-lt=\"pipe\n through|piped through|piping through\" id=\"readablestream-pipe-through\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">piped through</dfn> a <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#transformstream\" id=\"ref-for-transformstream③③\">TransformStream</a></code> <var>transform</var>, given\n an optional boolean <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream/pipe through,ReadableStream/piped\n through\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-pipe-through-preventclose\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>preventClose</var></dfn> (default false), an optional boolean <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream/pipe through,ReadableStream/piped through\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-pipe-through-preventabort\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>preventAbort</var></dfn>\n (default false), an optional boolean <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream/pipe\n through,ReadableStream/piped through\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-pipe-through-preventcancel\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>preventCancel</var></dfn> (default false), and an\n optional <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://dom.spec.whatwg.org/#abortsignal\" id=\"ref-for-abortsignal⑦\">AbortSignal</a></code> <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream/pipe through,ReadableStream/piped\n through\" data-dfn-type=\"dfn\" data-export=\"\" id=\"readablestream-pipe-through-signal\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\"><var>signal</var></dfn>, is given by performing the following steps. The result will be\n the <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readable-side\" id=\"ref-for-readable-side①⑤\">readable side</a> of <var>transform</var>.",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-readable-stream-locked\" id=\"ref-for-is-readable-stream-locked①④\">IsReadableStreamLocked</a>(<var>readable</var>) is false.</p>"
        },
        {
          "html": "<p class=\"assertion\">Assert: ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#is-writable-stream-locked\" id=\"ref-for-is-writable-stream-locked①①\">IsWritableStreamLocked</a>(<var>transform</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-writable\" id=\"ref-for-transformstream-writable①⓪\">[[writable]]</a>) is false.</p>"
        },
        {
          "html": "<p>Let <var>signalArg</var> be <var>signal</var> if <var>signal</var> was given, or undefined otherwise.</p>"
        },
        {
          "html": "<p>Let <var>promise</var> be ! <a data-link-type=\"abstract-op\" href=\"https://streams.spec.whatwg.org/#readable-stream-pipe-to\" id=\"ref-for-readable-stream-pipe-to⑤\">ReadableStreamPipeTo</a>(<var>readable</var>,\n  <var>transform</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-writable\" id=\"ref-for-transformstream-writable①①\">[[writable]]</a>, <var>preventClose</var>, <var>preventAbort</var>, <var>preventCancel</var>,\n  <var>signalArg</var>).</p>"
        },
        {
          "html": "<p>Set <var>promise</var>.[[PromiseIsHandled]] to true.</p>"
        },
        {
          "html": "<p>Return <var>transform</var>.<a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#transformstream-readable\" id=\"ref-for-transformstream-readable①④\">[[readable]]</a>.</p>"
        }
      ]
    },
    {
      "name": "ReadableStream/create a proxy",
      "href": "https://streams.spec.whatwg.org/#readablestream-create-a-proxy",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-for=\"ReadableStream\" data-dfn-type=\"dfn\" data-export=\"\" data-lt=\"create a proxy|creating a proxy\" id=\"readablestream-create-a-proxy\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">create a proxy</dfn> for a\n <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream⑧③\">ReadableStream</a></code> <var>stream</var>, perform the following steps. The result will be a new\n <code class=\"idl\"><a data-link-type=\"idl\" href=\"https://streams.spec.whatwg.org/#readablestream\" id=\"ref-for-readablestream⑧④\">ReadableStream</a></code> object which pulls its data from <var>stream</var>, while <var>stream</var> itself becomes\n immediately <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-locked\" id=\"ref-for-readablestream-locked②\">locked</a> and <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#is-readable-stream-disturbed\" id=\"ref-for-is-readable-stream-disturbed\">disturbed</a>.",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p>Let <var>identityTransform</var> be the result of <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#create-an-identity-transformstream\" id=\"ref-for-create-an-identity-transformstream\">creating an identity <code>TransformStream</code></a>.</p>"
        },
        {
          "html": "<p>Return the result of <var>stream</var> <a data-link-type=\"dfn\" href=\"https://streams.spec.whatwg.org/#readablestream-pipe-through\" id=\"ref-for-readablestream-pipe-through\">piped through</a> <var>identityTransform</var>.</p>"
        }
      ]
    }
  ]
}