const std = @import("std");

/// Show brief help (for -h flag)
pub fn showBrief(program_name: []const u8) void {
    std.debug.print("zz - CLI Utilities\n\n", .{});
    std.debug.print("Usage: {s} <command> [args...]\n\n", .{program_name});
    std.debug.print("Commands:\n", .{});
    std.debug.print("  tree [dir]            Show directory tree\n", .{});
    std.debug.print("  prompt [files...]     Build LLM prompts from files\n", .{});
    std.debug.print("  format [files...]     Format code files\n", .{});
    std.debug.print("  echo [text...]        Output text with escape sequences\n", .{});
    std.debug.print("  demo [options]        Interactive demo of zz capabilities\n", .{});
    std.debug.print("  deps [options]        Manage vendored dependencies\n", .{});
    std.debug.print("  stream-demo [opts]    Showcase DirectStream architecture\n", .{});
    std.debug.print("  help                  Show detailed help\n", .{});
    std.debug.print("\n", .{});
    std.debug.print("Use '{s} --help' or '{s} help' for detailed information\n", .{ program_name, program_name });
}

/// Show detailed help (for --help flag and help command)
pub fn show(program_name: []const u8) void {
    std.debug.print("zz - CLI Utilities\n\n", .{});
    std.debug.print("Usage: {s} <command> [args...]\n\n", .{program_name});
    std.debug.print("Commands:\n", .{});
    std.debug.print("  tree [directory] [options]\n", .{});
    std.debug.print("                                Show directory tree (defaults to current dir)\n", .{});
    std.debug.print("                                Options:\n", .{});
    std.debug.print("                                  --format=FORMAT, -f FORMAT   Output format: tree (default) or list\n", .{});
    std.debug.print("                                  --depth=N, -d N              Limit directory traversal depth\n", .{});
    std.debug.print("                                  --show-hidden                 Show hidden files\n", .{});
    std.debug.print("                                  --no-gitignore                Disable .gitignore parsing\n", .{});
    std.debug.print("  prompt [files...] [options]  Build LLM prompts with intelligent code extraction\n", .{});
    std.debug.print("                                Options:\n", .{});
    std.debug.print("                                  --prepend=TEXT       Add text before files\n", .{});
    std.debug.print("                                  --append=TEXT        Add text after files\n", .{});
    std.debug.print("                                  --allow-empty-glob   Warn instead of error for empty globs\n", .{});
    std.debug.print("                                  --allow-missing      Warn instead of error for all missing\n", .{});
    std.debug.print("                                Extraction flags (combine for custom extraction):\n", .{});
    std.debug.print("                                  --signatures         Extract function/method signatures\n", .{});
    std.debug.print("                                  --types              Extract type definitions\n", .{});
    std.debug.print("                                  --docs               Extract documentation comments\n", .{});
    std.debug.print("                                  --structure          Extract code structure\n", .{});
    std.debug.print("                                  --imports            Extract import statements\n", .{});
    std.debug.print("                                  --errors             Extract error handling code\n", .{});
    std.debug.print("                                  --tests              Extract test functions\n", .{});
    std.debug.print("                                  --full               Extract complete source (default)\n", .{});
    std.debug.print("  format [files...] [options]  Format code files with language-aware pretty printing\n", .{});
    std.debug.print("                                Options:\n", .{});
    std.debug.print("                                  --write, -w          Format files in-place\n", .{});
    std.debug.print("                                  --check              Check if files are formatted (exit 1 if not)\n", .{});
    std.debug.print("                                  --stdin              Read from stdin, write to stdout\n", .{});
    std.debug.print("                                  --indent-size=N      Number of spaces for indentation (default: 4)\n", .{});
    std.debug.print("                                  --indent-style=STYLE Use spaces or tabs (default: space)\n", .{});
    std.debug.print("                                  --line-width=N       Maximum line width (default: 100)\n", .{});
    std.debug.print("                                Supported languages:\n", .{});
    std.debug.print("                                  Zig (using zig fmt), JSON, HTML, CSS, TypeScript (basic), Svelte (basic)\n", .{});
    std.debug.print("                                Examples:\n", .{});
    std.debug.print("                                  zz format src/*.zig --check         # Check if files are formatted\n", .{});
    std.debug.print("                                  zz format config.json --write       # Format file in-place\n", .{});
    std.debug.print("                                  echo '{{\"a\":1}}' | zz format --stdin  # Format stdin JSON\n", .{});
    std.debug.print("  echo [text...] [options]     Output text with modern conveniences\n", .{});
    std.debug.print("                                Options:\n", .{});
    std.debug.print("                                  -n                   Don't output trailing newline\n", .{});
    std.debug.print("                                  -e                   Enable escape sequences (\\n, \\t, \\xHH, etc.)\n", .{});
    std.debug.print("                                  -E                   Disable escape sequences (default)\n", .{});
    std.debug.print("                                  --json               Output as JSON string (properly escaped)\n", .{});
    std.debug.print("                                  --repeat=N           Repeat output N times (max 10000)\n", .{});
    std.debug.print("                                  --sep=STRING         Separator between arguments (default: space)\n", .{});
    std.debug.print("                                  --null               Use null byte as separator\n", .{});
    std.debug.print("                                  --stdin              Read from stdin instead of arguments\n", .{});
    std.debug.print("                                  --color=COLOR        Output in color (red, green, blue, etc.)\n", .{});
    std.debug.print("                                  --bold               Bold text output\n", .{});
    std.debug.print("                                  --no-color           Disable color output\n", .{});
    std.debug.print("                                Examples:\n", .{});
    std.debug.print("                                  zz echo \"Hello, World!\"              # Basic output\n", .{});
    std.debug.print("                                  zz echo -e \"Line1\\nLine2\"            # With escape sequences\n", .{});
    std.debug.print("                                  zz echo --json 'C:\\path\\file'        # JSON-escaped output\n", .{});
    std.debug.print("                                  zz echo --color=red --bold \"Error!\"  # Colored output\n", .{});
    std.debug.print("                                  zz echo --repeat=100 \"test\"          # Repeat for testing\n", .{});
    std.debug.print("  demo [options]                Interactive demonstration of zz capabilities\n", .{});
    std.debug.print("                                Options:\n", .{});
    std.debug.print("                                  --non-interactive, -n              Run in non-interactive mode (for docs)\n", .{});
    std.debug.print("                                  --output=FILE, --output FILE       Write output to file (non-interactive mode)\n", .{});
    std.debug.print("                                  --help, -h                         Show demo help\n", .{});
    std.debug.print("                                Examples:\n", .{});
    std.debug.print("                                  zz demo                            # Interactive terminal demo\n", .{});
    std.debug.print("                                  zz demo --non-interactive          # Clean output for documentation\n", .{});
    std.debug.print("                                  zz demo --output=demo.md -n        # Save demo output to file\n", .{});
    std.debug.print("  deps [options]                Manage vendored dependencies declared in deps.zon\n", .{});
    std.debug.print("                                Options:\n", .{});
    std.debug.print("                                  --update                           Update all dependencies\n", .{});
    std.debug.print("                                  --check                            Check status without updating (CI-friendly)\n", .{});
    std.debug.print("                                  --list                             List all dependencies and their status\n", .{});
    std.debug.print("                                  --dry-run                          Show what would be updated without doing it\n", .{});
    std.debug.print("                                  --force                            Force update all dependencies\n", .{});
    std.debug.print("                                  --force-dep NAME                   Force update specific dependency\n", .{});
    std.debug.print("                                  --update-pattern PATTERN          Update dependencies matching pattern (glob)\n", .{});
    std.debug.print("                                  --no-backup                        Disable automatic backups\n", .{});
    std.debug.print("                                  --no-color                         Disable colored output\n", .{});
    std.debug.print("                                  --verbose, -v                      Enable verbose output\n", .{});
    std.debug.print("                                Examples:\n", .{});
    std.debug.print("                                  zz deps --update                   # Update all dependencies\n", .{});
    std.debug.print("                                  zz deps --check                    # Check status (good for CI)\n", .{});
    std.debug.print("                                  zz deps --list                     # Show detailed status table\n", .{});
    std.debug.print("                                  zz deps --dry-run                  # Preview what would change\n", .{});
    std.debug.print("                                  zz deps --force-dep webref    # Force update webref only\n", .{});
    std.debug.print("                                  zz deps --update-pattern \"tree*\"   # Update all webref deps\n", .{});
    std.debug.print("  stream-demo [options]         Showcase DirectStream architecture and performance\n", .{});
    std.debug.print("                                Options:\n", .{});
    std.debug.print("                                  --performance, -p                  Compare DirectStream vs vtable performance\n", .{});
    std.debug.print("                                  --query, -q                        Demonstrate DirectFactStream queries\n", .{});
    std.debug.print("                                  --tokenization, -t                 Show JSON/ZON DirectTokenStream\n", .{});
    std.debug.print("                                  --help, -h                         Show stream-demo help\n", .{});
    std.debug.print("                                Examples:\n", .{});
    std.debug.print("                                  zz stream-demo                     # Run all demos\n", .{});
    std.debug.print("                                  zz stream-demo --performance       # Performance comparison\n", .{});
    std.debug.print("                                  zz stream-demo --query             # Query engine demo\n", .{});
    std.debug.print("  help                          Show this help\n", .{});
    std.debug.print("\nGlob Patterns:\n", .{});
    std.debug.print("  *.zig                         Match all .zig files\n", .{});
    std.debug.print("  src/**/*.zig                  Recursive match\n", .{});
    std.debug.print("  *.{{zig,md}}                    Match multiple extensions\n", .{});
    std.debug.print("  log[0-9].txt                  Character classes\n", .{});
    std.debug.print("  file\\*.txt                    Escape special chars\n", .{});
}
