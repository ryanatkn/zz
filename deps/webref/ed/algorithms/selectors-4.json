{
  "spec": {
    "title": "Selectors Level 4",
    "url": "https://drafts.csswg.org/selectors-4/"
  },
  "algorithms": [
    {
      "name": "parse as a forgiving selector list",
      "href": "https://drafts.csswg.org/selectors-4/#parse-as-a-forgiving-selector-list",
      "html": "To <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-export=\"\" id=\"parse-as-a-forgiving-selector-list\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">parse as a forgiving selector list</dfn> given an input <var>input</var>:",
      "rationale": ".algorithm",
      "steps": [
        {
          "html": "<p><a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/css-syntax-3/#css-parse-a-comma-separated-list-according-to-a-css-grammar\" id=\"ref-for-css-parse-a-comma-separated-list-according-to-a-css-grammar\">Parse a list</a> of <a class=\"production css\" data-link-type=\"type\" href=\"https://drafts.csswg.org/selectors-4/#typedef-complex-real-selector\" id=\"ref-for-typedef-complex-real-selector②\">&lt;complex-real-selector&gt;</a>s from <var>input</var>,\nand let <var>selector list</var> be the result.</p>"
        },
        {
          "html": "<p>Remove all failure items from <var>selector list</var>,\nand all items that are <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/selectors-4/#invalid-selector\" id=\"ref-for-invalid-selector④\">invalid selectors</a>,\nthen return a <a class=\"production css\" data-link-type=\"type\" href=\"https://drafts.csswg.org/selectors-4/#typedef-selector-list\" id=\"ref-for-typedef-selector-list\">&lt;selector-list&gt;</a>\nrepresenting the remaining items in <var>selector list</var>.\n(This might be empty.)</p>"
        }
      ]
    },
    {
      "name": "parse a selector",
      "href": "https://drafts.csswg.org/selectors-4/#parse-a-selector",
      "html": "This section defines how to <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-export=\"\" id=\"parse-a-selector\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">parse a selector</dfn> from a string <var>source</var>.\n\tIt returns either a complex selector list,\n\tor failure.",
      "rationale": "let",
      "steps": [
        {
          "html": "Let <var>selector</var> be the result of <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/css-syntax-3/#css-parse-something-according-to-a-css-grammar\" id=\"ref-for-css-parse-something-according-to-a-css-grammar①\">parsing</a> <var>source</var> as a <a class=\"production css\" data-link-type=\"type\" href=\"https://drafts.csswg.org/selectors-4/#typedef-selector-list\" id=\"ref-for-typedef-selector-list①\">&lt;selector-list&gt;</a>.\n\t\t\tIf this returns failure,\n\t\t\tit’s an <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/selectors-4/#invalid-selector\" id=\"ref-for-invalid-selector⑥\">invalid selector</a>;\n\t\t\treturn failure."
        },
        {
          "html": "If <var>selector</var> is an <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/selectors-4/#invalid-selector\" id=\"ref-for-invalid-selector⑦\">invalid selector</a> for any other reason\n\t\t\t(such as, for example, containing an undeclared namespace prefix),\n\t\t\treturn failure."
        },
        {
          "html": "Otherwise,\n\t\t\treturn <var>selector</var>."
        }
      ]
    },
    {
      "name": "parse a relative selector",
      "href": "https://drafts.csswg.org/selectors-4/#parse-a-relative-selector",
      "html": "This section defines how to <dfn class=\"dfn-paneled has-dfn-panel\" data-dfn-type=\"dfn\" data-export=\"\" id=\"parse-a-relative-selector\" role=\"button\" aria-expanded=\"false\" tabindex=\"0\">parse a relative selector</dfn> from a string <var>source</var>.\n\tIt returns either a complex selector list,\n\tor failure.",
      "rationale": "let",
      "steps": [
        {
          "html": "Let <var>selector</var> be the result of <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/css-syntax-3/#css-parse-something-according-to-a-css-grammar\" id=\"ref-for-css-parse-something-according-to-a-css-grammar②\">parsing</a> <var>source</var> as a <a class=\"production css\" data-link-type=\"type\" href=\"https://drafts.csswg.org/selectors-4/#typedef-relative-selector-list\" id=\"ref-for-typedef-relative-selector-list③\">&lt;relative-selector-list&gt;</a>.\n\t\t\tIf this returns failure,\n\t\t\tit’s an <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/selectors-4/#invalid-selector\" id=\"ref-for-invalid-selector⑧\">invalid selector</a>;\n\t\t\treturn failure."
        },
        {
          "html": "If <var>selector</var> is an <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/selectors-4/#invalid-selector\" id=\"ref-for-invalid-selector⑨\">invalid selector</a> for any other reason\n\t\t\t(such as, for example, containing an undeclared namespace prefix),\n\t\t\treturn failure."
        },
        {
          "html": "Otherwise,\n\t\t\treturn <var>selector</var>."
        }
      ]
    },
    {
      "html": "This algorithm returns a (possibly empty) list of elements.",
      "rationale": "start",
      "steps": [
        {
          "html": "Start with a list of <var>candidate elements</var>,\n\t\t\twhich are the <var>root elements</var>\n\t\t\tand all of their descendant elements,\n\t\t\tsorted in <a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#concept-shadow-including-tree-order\" id=\"ref-for-concept-shadow-including-tree-order\">shadow-including tree order</a>,\n\t\t\tunless otherwise specified."
        },
        {
          "html": "If <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/selectors-4/#scoping-root\" id=\"ref-for-scoping-root①①\">scoping root</a> were provided,\n\t\t\tthen remove from the <var>candidate elements</var>\n\t\t\tany elements that are not\n\t\t\t<a data-link-type=\"dfn\" href=\"https://dom.spec.whatwg.org/#concept-tree-descendant\" id=\"ref-for-concept-tree-descendant\">descendants</a> of at least one <span id=\"ref-for-scoping-root①②\">scoping root</span>."
        },
        {
          "html": "Initialize the <var>selector match list</var> to empty."
        },
        {
          "html": "For each <var>element</var> in the set of\n\t\t\t<var>candidate elements</var>:",
          "rationale": "if",
          "steps": [
            {
              "html": "If the result of <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/selectors-4/#match-a-selector-against-an-element\" id=\"ref-for-match-a-selector-against-an-element①\">match a selector against an element</a>\n\t\t\t\tfor <var>element</var> and <var>selector</var> is success,\n\t\t\t\tadd <var>element</var> to the <var>selector match list</var>."
            },
            {
              "html": "For each possible pseudo-element associated with <var>element</var>\n\t\t\t\tthat is one of the pseudo-elements allowed to show up in the match list,\n\t\t\t\tif the result of <a data-link-type=\"dfn\" href=\"https://drafts.csswg.org/selectors-4/#match-a-selector-against-a-pseudo-element\" id=\"ref-for-match-a-selector-against-a-pseudo-element\">match a selector against a pseudo-element</a>\n\t\t\t\tfor the pseudo-element and <var>selector</var> is success,\n\t\t\t\tadd the pseudo-element to the <var>selector match list</var>."
            }
          ]
        }
      ]
    },
    {
      "html": "This section describes an approach first developed and documented at\n<a href=\"https://github.com/explainers-by-googlers/Partitioning-visited-links-history\">https://github.com/explainers-by-googlers/Partitioning-visited-links-history</a>,\nthat partitions a user’s browsing history information,\nto allow <a class=\"css\" data-link-type=\"maybe\" href=\"https://drafts.csswg.org/selectors-4/#visited-pseudo\" id=\"ref-for-visited-pseudo①③\">:visited</a> to only match links\ncorresponding to navigations that the site’s origin could have observed on its own.\nWith this, <span class=\"css\" id=\"ref-for-visited-pseudo①④\">:visited</span> can be treated as a normal pseudo-class,\nwithout any of the complex mitigations described above,\nas it doesn’t expose any information not already theoretically available to the site,\nwhile still preserving as much of the <em>usefulness</em> of <span class=\"css\" id=\"ref-for-visited-pseudo①⑤\">:visited</span> as possible for the user.",
      "rationale": "let",
      "steps": [
        {
          "html": "<p>Let <var>visited history</var> be a <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#ordered-set\" id=\"ref-for-ordered-set\">set</a>\ncontaining <a data-link-type=\"dfn\" href=\"https://infra.spec.whatwg.org/#tuple\" id=\"ref-for-tuple\">tuples</a> of three pieces of information:</p>\n     <ul>\n      <li data-md=\"\">\n       <p>a visited <a data-link-type=\"dfn\" href=\"https://url.spec.whatwg.org/#concept-url\" id=\"ref-for-concept-url\">URL</a></p>\n      </li><li data-md=\"\">\n       <p>an <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#concept-origin\" id=\"ref-for-concept-origin\">origin</a> for the site that started a navigation</p>\n      </li><li data-md=\"\">\n       <p>a <a data-link-type=\"dfn\" href=\"https://html.spec.whatwg.org/multipage/browsers.html#site\" id=\"ref-for-site\">site</a> for the top-level site containing the frame that started the navigation.\n(This will often be the same as the previous,\nbut can differ if the user clicks a link in a iframe, for example.)</p>\n     </li></ul>"
        },
        {
          "html": "<p>Whenever a navigation is triggered <em>from within a page</em>—​e.g.,\nfrom the user clicking a link,\nor a script on the page initiating a navigation—​add an entry to <var>visited history</var>\nrecording the navigation’s destination URL,\nthe origin of the page containing the link or script,\nand the (schemeful) site of the top-level site containing that\npage (which might be the same site as the previous origin).</p>\n     \n     <p>Additionally, add an entry to <var>visited history</var>\nrecording the destination’s URL, the <em>destination’s</em>\norigin, and the <em>destination’s</em> site. Do this only\nfor navigations from top-level frames or iframes which are\nsame-origin with their top-level frame.</p>"
        },
        {
          "html": "<p>When determining if a link element should match <a class=\"css\" data-link-type=\"maybe\" href=\"https://drafts.csswg.org/selectors-4/#link-pseudo\" id=\"ref-for-link-pseudo⑦\">:link</a> or <a class=\"css\" data-link-type=\"maybe\" href=\"https://drafts.csswg.org/selectors-4/#visited-pseudo\" id=\"ref-for-visited-pseudo①⑧\">:visited</a>,\nonly allow it to match <span class=\"css\" id=\"ref-for-visited-pseudo①⑨\">:visited</span> if\nthe link’s destination,\nthe origin of the page containing the link,\nand the top-level site containing the link\nmatch a tuple in <var>visited history</var>.</p>"
        }
      ]
    }
  ]
}